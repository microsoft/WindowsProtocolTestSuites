// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BreakReadWriteLeaseV2TestCase : PtfTestClassBase {
        
        public BreakReadWriteLeaseV2TestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void LeaseBreakResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState);
        
        public delegate void OnLeaseBreakNotificationDelegate1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState);
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig).MakeByRefType());
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo OnLeaseBreakNotificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "OnLeaseBreakNotification");
        
        static System.Reflection.EventInfo LeaseBreakResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "LeaseBreakResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter ILeasingAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c1;
        
        private IVariable<int> leaseFlags;
        
        private IVariable<int> leaseState;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v1;
        
        private IVariable<int> v2;
        
        private IVariable<int> v3;
        
        private IVariable<int> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILeasingAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(LeaseBreakResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(OnLeaseBreakNotificationInfo, this.ILeasingAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c1");
            this.leaseFlags = this.Manager.CreateVariable<int>("leaseFlags");
            this.leaseState = this.Manager.CreateVariable<int>("leaseState");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
            this.v4 = this.Manager.CreateVariable<int>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS0() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker3)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker2)));
                if ((temp7 == 0)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp1;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp1);
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp1, "c of FileOperationToBreakLeaseRequest, state S32");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S35\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp2;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp2);
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp2, "c of FileOperationToBreakLeaseRequest, state S36");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                                "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                                "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                                "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                                "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                                "delay closing handles it holds open, or to defer sending opens. Before processin" +
                                "g one of the following operations, the underlying object store MUST request that" +
                                " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                                "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                                "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                                "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                                "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                                "2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS13();
                    goto label1;
                }
                if ((temp7 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label1;
                }
                if ((temp7 == 2)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp5;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp5);
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp5, "c of FileOperationToBreakLeaseRequest, state S8");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S10\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S11\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp6;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp6);
                    this.Manager.Comment("reaching state \'S12\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp6, "c of FileOperationToBreakLeaseRequest, state S12");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                                "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                                "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                                "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                                "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                                "delay closing handles it holds open, or to defer sending opens. Before processin" +
                                "g one of the following operations, the underlying object store MUST request that" +
                                " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                                "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                                "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                                "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                                "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                                "2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS13();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker2)));
            label1:
;
                goto label5;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S42\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker5)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S43\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp8;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp8);
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp8, "c of FileOperationToBreakLeaseRequest, state S44");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S47\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp9;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp9);
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp9, "c of FileOperationToBreakLeaseRequest, state S48");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                                "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                                "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                                "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                                "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                                "delay closing handles it holds open, or to defer sending opens. Before processin" +
                                "g one of the following operations, the underlying object store MUST request that" +
                                " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                                "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                                "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                                "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                                "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                                "2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S49\'");
                    int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker5)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S50\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S51\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S52\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S53\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S54\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S55\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp10;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                                    "DifferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp10);
                            this.Manager.Comment("reaching state \'S56\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp10, "c of FileOperationToBreakLeaseRequest, state S56");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                        "ient to cache data read from the object. Before processing one of the following " +
                                        "operations from a client with a different ClientId, the object store MUST reques" +
                                        "t that the server revoke READ caching. The object store is not required to wait " +
                                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                        "byte-range locks on an object. Before processing one of the following operations" +
                                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                                        " and the object store MUST wait for acknowledgment from the server before procee" +
                                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                        "processing one of the following operations, the underlying object store MUST req" +
                                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                        "to No caching.\"");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                                    " 2.\"");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v1\'");
                            this.v1.Unbind();
                            BreakReadWriteLeaseV2TestCaseS57();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker2)));
                        }
                        goto label2;
                    }
                    if ((temp11 == 1)) {
                        BreakReadWriteLeaseV2TestCaseS61();
                        goto label2;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker5)));
                label2:
;
                    goto label4;
                }
                if ((temp16 == 1)) {
                    this.Manager.Comment("reaching state \'S67\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp12;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp12);
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp12, "c of FileOperationToBreakLeaseRequest, state S68");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S70\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S71\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp13;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp13);
                    this.Manager.Comment("reaching state \'S72\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp13, "c of FileOperationToBreakLeaseRequest, state S72");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                                "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                                "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                                "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                                "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                                "delay closing handles it holds open, or to defer sending opens. Before processin" +
                                "g one of the following operations, the underlying object store MUST request that" +
                                " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                                "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                                "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                                "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                                "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                                "2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S73\'");
                    int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker6)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker7)));
                    if ((temp15 == 0)) {
                        BreakReadWriteLeaseV2TestCaseS61();
                        goto label3;
                    }
                    if ((temp15 == 1)) {
                        this.Manager.Comment("reaching state \'S74\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S75\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S76\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S77\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S78\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S79\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp14;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp14);
                            this.Manager.Comment("reaching state \'S80\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp14, "c of FileOperationToBreakLeaseRequest, state S80");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                        "ient to cache data read from the object. Before processing one of the following " +
                                        "operations from a client with a different ClientId, the object store MUST reques" +
                                        "t that the server revoke READ caching. The object store is not required to wait " +
                                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                        "byte-range locks on an object. Before processing one of the following operations" +
                                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                                        " and the object store MUST wait for acknowledgment from the server before procee" +
                                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                        "processing one of the following operations, the underlying object store MUST req" +
                                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                        "to No caching.\"");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                                    " 2.\"");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v1\'");
                            this.v1.Unbind();
                            BreakReadWriteLeaseV2TestCaseS57();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker4)));
                        }
                        goto label3;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker6)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker7)));
                label3:
;
                    goto label4;
                }
                if ((temp16 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label4;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker5)));
            label4:
;
                goto label5;
            }
            if ((temp17 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label5;
            }
            if ((temp17 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker2)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S16\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S19\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp3;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp3);
                    this.Manager.Comment("reaching state \'S20\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp3, "c of FileOperationToBreakLeaseRequest, state S20");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker)));
                }
                goto label0;
            }
            if ((temp4 == 1)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker2)));
        label0:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S16");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S16");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S24\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(3,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 3, newEpoch, "newEpoch of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S27\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S30\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S27");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S52");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS57() {
            this.Manager.Comment("reaching state \'S57\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker4))) != -1)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S60\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker4)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker4(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(3,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 3, newEpoch, "newEpoch of OnLeaseBreakNotification, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S57");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S57");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker5(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS61() {
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S63\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S66\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker3)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S63");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker6(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0OnLeaseBreakNotificationChecker7(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0LeaseBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S76");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S76");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS81() {
            this.Manager.Comment("reaching state \'S81\'");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS82() {
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S82\'.");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS83() {
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S83\'.");
        }
        #endregion
        
        #region Test Starting in S135
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS135() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS135");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp18;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp18);
            this.Manager.AddReturn(ReadConfigInfo, null, temp18);
            this.Manager.Comment("reaching state \'S136\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker3)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S141\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker2)));
                if ((temp23 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label7;
                }
                if ((temp23 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS142();
                    goto label7;
                }
                if ((temp23 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS142();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker2)));
            label7:
;
                goto label10;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S160\'");
                int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker5)));
                if ((temp28 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS161();
                    goto label9;
                }
                if ((temp28 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS161();
                    goto label9;
                }
                if ((temp28 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker5)));
            label9:
;
                goto label10;
            }
            if ((temp29 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label10;
            }
            if ((temp29 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS115() {
            this.Manager.Comment("reaching state \'S115\'");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS142() {
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp19;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp19);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp19, "c of FileOperationToBreakLeaseRequest, state S143");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp20;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp20);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp20, "c of FileOperationToBreakLeaseRequest, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S148\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker1)));
            if ((temp22 == 0)) {
                BreakReadWriteLeaseV2TestCaseS109();
                goto label6;
            }
            if ((temp22 == 1)) {
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S151\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S152\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S153\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S154\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp21;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp21);
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp21, "c of FileOperationToBreakLeaseRequest, state S155");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker1)));
                }
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker1)));
        label6:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS109() {
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S111\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S114\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S111");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S151");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS105() {
            this.Manager.Comment("reaching state \'S105\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S108\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker2)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(3,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 3, newEpoch, "newEpoch of OnLeaseBreakNotification, state S105");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S105");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S105");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS161() {
            this.Manager.Comment("reaching state \'S161\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp24;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp24);
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp24, "c of FileOperationToBreakLeaseRequest, state S162");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S165\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp25;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp25);
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp25, "c of FileOperationToBreakLeaseRequest, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S167\'");
            int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker4)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S170\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S171\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S172\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S173\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp26;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp26);
                    this.Manager.Comment("reaching state \'S174\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp26, "c of FileOperationToBreakLeaseRequest, state S174");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker2)));
                }
                goto label8;
            }
            if ((temp27 == 1)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label8;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker4)));
        label8:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135LeaseBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S170");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135OnLeaseBreakNotificationChecker4(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S136");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS135ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S175
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS175() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS175");
            this.Manager.Comment("reaching state \'S175\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S176\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker3)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S181\'");
                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker2)));
                if ((temp35 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label12;
                }
                if ((temp35 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS182();
                    goto label12;
                }
                if ((temp35 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS182();
                    goto label12;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker2)));
            label12:
;
                goto label15;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S200\'");
                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker5)));
                if ((temp40 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS201();
                    goto label14;
                }
                if ((temp40 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS201();
                    goto label14;
                }
                if ((temp40 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker5)));
            label14:
;
                goto label15;
            }
            if ((temp41 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label15;
            }
            if ((temp41 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S176");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS182() {
            this.Manager.Comment("reaching state \'S182\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp31;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp31);
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp31, "c of FileOperationToBreakLeaseRequest, state S183");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp32;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp32);
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp32, "c of FileOperationToBreakLeaseRequest, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S188\'");
            int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker1)));
            if ((temp34 == 0)) {
                BreakReadWriteLeaseV2TestCaseS109();
                goto label11;
            }
            if ((temp34 == 1)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S191\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S192\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S193\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S194\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp33;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp33);
                    this.Manager.Comment("reaching state \'S195\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp33, "c of FileOperationToBreakLeaseRequest, state S195");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175LeaseBreakResponseChecker)));
                }
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker1)));
        label11:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S191");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S176");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS201() {
            this.Manager.Comment("reaching state \'S201\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp36;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp36);
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp36, "c of FileOperationToBreakLeaseRequest, state S202");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp37;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp37);
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp37, "c of FileOperationToBreakLeaseRequest, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S207\'");
            int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker3)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S210\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S213\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp38;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp38);
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp38, "c of FileOperationToBreakLeaseRequest, state S214");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS175LeaseBreakResponseChecker1)));
                }
                goto label13;
            }
            if ((temp39 == 1)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker3)));
        label13:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S210");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S176");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS175ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S176");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S215
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS215() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS215");
            this.Manager.Comment("reaching state \'S215\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp42);
            this.Manager.AddReturn(ReadConfigInfo, null, temp42);
            this.Manager.Comment("reaching state \'S216\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker3)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S221\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker2)));
                if ((temp47 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label17;
                }
                if ((temp47 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS222();
                    goto label17;
                }
                if ((temp47 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS222();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker2)));
            label17:
;
                goto label20;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S240\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker5)));
                if ((temp52 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS241();
                    goto label19;
                }
                if ((temp52 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS241();
                    goto label19;
                }
                if ((temp52 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label19;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker5)));
            label19:
;
                goto label20;
            }
            if ((temp53 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label20;
            }
            if ((temp53 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS222() {
            this.Manager.Comment("reaching state \'S222\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp43;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp43);
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp43, "c of FileOperationToBreakLeaseRequest, state S223");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S224\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S226\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp44;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp44);
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp44, "c of FileOperationToBreakLeaseRequest, state S227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S228\'");
            int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker1)));
            if ((temp46 == 0)) {
                BreakReadWriteLeaseV2TestCaseS109();
                goto label16;
            }
            if ((temp46 == 1)) {
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S231\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S232\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S233\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S234\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp45;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp45);
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp45, "c of FileOperationToBreakLeaseRequest, state S235");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215LeaseBreakResponseChecker)));
                }
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker1)));
        label16:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S231");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS241() {
            this.Manager.Comment("reaching state \'S241\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp48;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp48);
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp48, "c of FileOperationToBreakLeaseRequest, state S242");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S245\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp49;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp49);
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp49, "c of FileOperationToBreakLeaseRequest, state S246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S247\'");
            int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker3)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S250\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S251\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S252\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S253\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp50;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp50);
                    this.Manager.Comment("reaching state \'S254\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp50, "c of FileOperationToBreakLeaseRequest, state S254");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS215LeaseBreakResponseChecker1)));
                }
                goto label18;
            }
            if ((temp51 == 1)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker3)));
        label18:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S247");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S247");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S250");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S247");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S247");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S216");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS215ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S255
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS255() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS255");
            this.Manager.Comment("reaching state \'S255\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S256\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker3)));
            if ((temp65 == 0)) {
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S261\'");
                int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker2)));
                if ((temp59 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label22;
                }
                if ((temp59 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS262();
                    goto label22;
                }
                if ((temp59 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS262();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker2)));
            label22:
;
                goto label25;
            }
            if ((temp65 == 1)) {
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S280\'");
                int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker5)));
                if ((temp64 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS281();
                    goto label24;
                }
                if ((temp64 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS281();
                    goto label24;
                }
                if ((temp64 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label24;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker5)));
            label24:
;
                goto label25;
            }
            if ((temp65 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label25;
            }
            if ((temp65 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S261");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S261");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S261");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S261");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS262() {
            this.Manager.Comment("reaching state \'S262\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp55;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp55);
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp55, "c of FileOperationToBreakLeaseRequest, state S263");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S266\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp56;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp56);
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp56, "c of FileOperationToBreakLeaseRequest, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S268\'");
            int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker1)));
            if ((temp58 == 0)) {
                BreakReadWriteLeaseV2TestCaseS109();
                goto label21;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S271\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S272\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S273\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S274\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp57;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp57);
                    this.Manager.Comment("reaching state \'S275\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp57, "c of FileOperationToBreakLeaseRequest, state S275");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255LeaseBreakResponseChecker)));
                }
                goto label21;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker1)));
        label21:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S268");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S268");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S268");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S268");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S271");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S261");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S280");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS281() {
            this.Manager.Comment("reaching state \'S281\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp60;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp60);
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp60, "c of FileOperationToBreakLeaseRequest, state S282");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S285\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp61;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp61);
            this.Manager.Comment("reaching state \'S286\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp61, "c of FileOperationToBreakLeaseRequest, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S287\'");
            int temp63 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker3)));
            if ((temp63 == 0)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label23;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S290\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S291\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S292\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S293\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp62;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp62);
                    this.Manager.Comment("reaching state \'S294\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp62, "c of FileOperationToBreakLeaseRequest, state S294");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS255LeaseBreakResponseChecker1)));
                }
                goto label23;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker3)));
        label23:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S287");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S287");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S287");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S287");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S290");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S290");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S280");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S280");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S280");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S280");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S256");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS255ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S295
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS295() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS295");
            this.Manager.Comment("reaching state \'S295\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp66;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp66);
            this.Manager.AddReturn(ReadConfigInfo, null, temp66);
            this.Manager.Comment("reaching state \'S296\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker3)));
            if ((temp75 == 0)) {
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S301\'");
                int temp69 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker2)));
                if ((temp69 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label26;
                }
                if ((temp69 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS302();
                    goto label26;
                }
                if ((temp69 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS302();
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker2)));
            label26:
;
                goto label29;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S319\'");
                int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker5)));
                if ((temp74 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS320();
                    goto label28;
                }
                if ((temp74 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS320();
                    goto label28;
                }
                if ((temp74 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label28;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker5)));
            label28:
;
                goto label29;
            }
            if ((temp75 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label29;
            }
            if ((temp75 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S296");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S301");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S301");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S301");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S301");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S301");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S301");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS302() {
            this.Manager.Comment("reaching state \'S302\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp67;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp67);
            this.Manager.Comment("reaching state \'S303\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp67, "c of FileOperationToBreakLeaseRequest, state S303");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S304\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S305\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S306\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp68;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                    ",Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp68);
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp68, "c of FileOperationToBreakLeaseRequest, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                        "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                        " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                        "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                        "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                        "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                        "e following operations, the underlying object store MUST request that the server" +
                        " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                        " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                        "[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                        ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] T" +
                        "he server implements the SMB 3.x dialect family and Lease.Version is 2.\", \"[Test" +
                        "Info] Lease state is set to No caching.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadWriteLeaseV2TestCaseS308();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS308() {
            this.Manager.Comment("reaching state \'S308\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S311\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S312\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S313\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S314\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295LeaseBreakResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S308");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S308");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S308");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S311");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S301");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S301");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S301");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S296");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S319");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S319");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS320() {
            this.Manager.Comment("reaching state \'S320\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp70;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp70);
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp70, "c of FileOperationToBreakLeaseRequest, state S321");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S324\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp71;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp71);
            this.Manager.Comment("reaching state \'S325\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp71, "c of FileOperationToBreakLeaseRequest, state S325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S326\'");
            int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker2)));
            if ((temp73 == 0)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label27;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S329\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S330\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S331\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S332\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp72;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp72);
                    this.Manager.Comment("reaching state \'S333\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp72, "c of FileOperationToBreakLeaseRequest, state S333");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS295LeaseBreakResponseChecker1)));
                }
                goto label27;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker2)));
        label27:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S326");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S326");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S326");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S326");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S326");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S326");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S326");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S326");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S329");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S319");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S319");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S319");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S319");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S319");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S319");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S319");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S296");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS295ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S296");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS334() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS334");
            this.Manager.Comment("reaching state \'S334\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S335\'");
            int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker3)));
            if ((temp85 == 0)) {
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S340\'");
                int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker2)));
                if ((temp79 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label30;
                }
                if ((temp79 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS341();
                    goto label30;
                }
                if ((temp79 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS341();
                    goto label30;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker2)));
            label30:
;
                goto label33;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S351\'");
                int temp84 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker5)));
                if ((temp84 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS352();
                    goto label32;
                }
                if ((temp84 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS352();
                    goto label32;
                }
                if ((temp84 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker5)));
            label32:
;
                goto label33;
            }
            if ((temp85 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label33;
            }
            if ((temp85 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S335");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS341() {
            this.Manager.Comment("reaching state \'S341\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp77;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp77);
            this.Manager.Comment("reaching state \'S342\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp77, "c of FileOperationToBreakLeaseRequest, state S342");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S344\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S345\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp78;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                    "idDifferentLeaseKey,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp78);
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp78, "c of FileOperationToBreakLeaseRequest, state S346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                        "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                        " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                        "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                        "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                        "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                        "e following operations, the underlying object store MUST request that the server" +
                        " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                        " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                        "[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                        ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] T" +
                        "he server implements the SMB 3.x dialect family and Lease.Version is 2.\", \"[Test" +
                        "Info] Lease state is set to No caching.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadWriteLeaseV2TestCaseS308();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S335");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS352() {
            this.Manager.Comment("reaching state \'S352\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp80;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp80);
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp80, "c of FileOperationToBreakLeaseRequest, state S353");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S354\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S356\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp81;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp81);
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp81, "c of FileOperationToBreakLeaseRequest, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S358\'");
            int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS334OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS334OnLeaseBreakNotificationChecker1)));
            if ((temp83 == 0)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label31;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S361\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S362\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S363\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S364\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp82;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp82);
                    this.Manager.Comment("reaching state \'S365\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp82, "c of FileOperationToBreakLeaseRequest, state S365");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS334LeaseBreakResponseChecker)));
                }
                goto label31;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS334OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS334OnLeaseBreakNotificationChecker1)));
        label31:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S358");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S358");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S358");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S358");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S358");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S358");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S361");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S351");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S351");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S335");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS334ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S335");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS366() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS366");
            this.Manager.Comment("reaching state \'S366\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp86;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp86);
            this.Manager.AddReturn(ReadConfigInfo, null, temp86);
            this.Manager.Comment("reaching state \'S367\'");
            int temp95 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker3)));
            if ((temp95 == 0)) {
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S372\'");
                int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker2)));
                if ((temp91 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label35;
                }
                if ((temp91 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS373();
                    goto label35;
                }
                if ((temp91 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS373();
                    goto label35;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker2)));
            label35:
;
                goto label37;
            }
            if ((temp95 == 1)) {
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S391\'");
                int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker5)));
                if ((temp94 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label36;
                }
                if ((temp94 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS392();
                    goto label36;
                }
                if ((temp94 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS392();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker5)));
            label36:
;
                goto label37;
            }
            if ((temp95 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label37;
            }
            if ((temp95 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S367");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S372");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S372");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S372");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S372");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS373() {
            this.Manager.Comment("reaching state \'S373\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp87;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp87);
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp87, "c of FileOperationToBreakLeaseRequest, state S374");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S376\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S377\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp88;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientGuidDifferentLeaseKey,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp88);
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp88, "c of FileOperationToBreakLeaseRequest, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S379\'");
            int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker1)));
            if ((temp90 == 0)) {
                BreakReadWriteLeaseV2TestCaseS109();
                goto label34;
            }
            if ((temp90 == 1)) {
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S382\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S383\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S384\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S385\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp89;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp89);
                    this.Manager.Comment("reaching state \'S386\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp89, "c of FileOperationToBreakLeaseRequest, state S386");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366LeaseBreakResponseChecker)));
                }
                goto label34;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker1)));
        label34:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S379");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S379");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S379");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S379");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S382");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S382");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S372");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S367");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S391");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S391");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S391");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S391");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS392() {
            this.Manager.Comment("reaching state \'S392\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp92;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp92);
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp92, "c of FileOperationToBreakLeaseRequest, state S393");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S394\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S396\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp93;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                    ",Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp93);
            this.Manager.Comment("reaching state \'S397\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp93, "c of FileOperationToBreakLeaseRequest, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                        "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                        " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                        "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                        "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                        "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                        "e following operations, the underlying object store MUST request that the server" +
                        " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                        " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                        "[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                        ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] T" +
                        "he server implements the SMB 3.x dialect family and Lease.Version is 2.\", \"[Test" +
                        "Info] Lease state is set to No caching.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadWriteLeaseV2TestCaseS398();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS398() {
            this.Manager.Comment("reaching state \'S398\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S399\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S401\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S402\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S404\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS366LeaseBreakResponseChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker2)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S398");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S398");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S398");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S398");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S401");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S391");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S367");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS366ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S367");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S405
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS405() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS405");
            this.Manager.Comment("reaching state \'S405\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp96;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp96);
            this.Manager.AddReturn(ReadConfigInfo, null, temp96);
            this.Manager.Comment("reaching state \'S406\'");
            int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker3)));
            if ((temp105 == 0)) {
                this.Manager.Comment("reaching state \'S407\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S411\'");
                int temp101 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker2)));
                if ((temp101 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS412();
                    goto label39;
                }
                if ((temp101 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS412();
                    goto label39;
                }
                if ((temp101 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label39;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker2)));
            label39:
;
                goto label41;
            }
            if ((temp105 == 1)) {
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S430\'");
                int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker5)));
                if ((temp104 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label40;
                }
                if ((temp104 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS431();
                    goto label40;
                }
                if ((temp104 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS431();
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker5)));
            label40:
;
                goto label41;
            }
            if ((temp105 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label41;
            }
            if ((temp105 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S406");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S411");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS412() {
            this.Manager.Comment("reaching state \'S412\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp97;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp97);
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp97, "c of FileOperationToBreakLeaseRequest, state S413");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S414\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S416\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp98;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp98);
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp98, "c of FileOperationToBreakLeaseRequest, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S418\'");
            int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS405OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS405OnLeaseBreakNotificationChecker1)));
            if ((temp100 == 0)) {
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S421\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S422\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S423\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S424\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp99;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp99);
                    this.Manager.Comment("reaching state \'S425\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp99, "c of FileOperationToBreakLeaseRequest, state S425");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS405LeaseBreakResponseChecker)));
                }
                goto label38;
            }
            if ((temp100 == 1)) {
                BreakReadWriteLeaseV2TestCaseS61();
                goto label38;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS405OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS405OnLeaseBreakNotificationChecker1)));
        label38:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S418");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S418");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S418");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S421");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S421");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S418");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S418");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S418");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S411");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S411");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S411");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S411");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S406");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS431() {
            this.Manager.Comment("reaching state \'S431\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp102;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp102);
            this.Manager.Comment("reaching state \'S432\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp102, "c of FileOperationToBreakLeaseRequest, state S432");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S433\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S434\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S435\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp103;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                    "idDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp103);
            this.Manager.Comment("reaching state \'S436\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp103, "c of FileOperationToBreakLeaseRequest, state S436");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                        "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                        " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                        "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                        "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                        "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                        "e following operations, the underlying object store MUST request that the server" +
                        " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                        " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                        "[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                        ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] T" +
                        "he server implements the SMB 3.x dialect family and Lease.Version is 2.\", \"[Test" +
                        "Info] Lease state is set to No caching.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadWriteLeaseV2TestCaseS398();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S406");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS405ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S406");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S437
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS437() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS437");
            this.Manager.Comment("reaching state \'S437\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp106;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp106);
            this.Manager.AddReturn(ReadConfigInfo, null, temp106);
            this.Manager.Comment("reaching state \'S438\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker3)));
            if ((temp113 == 0)) {
                this.Manager.Comment("reaching state \'S439\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S440\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S443\'");
                int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker2)));
                if ((temp111 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS444();
                    goto label43;
                }
                if ((temp111 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS444();
                    goto label43;
                }
                if ((temp111 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label43;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker2)));
            label43:
;
                goto label45;
            }
            if ((temp113 == 1)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label45;
            }
            if ((temp113 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label45;
            }
            if ((temp113 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S438");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS444() {
            this.Manager.Comment("reaching state \'S444\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp107;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp107);
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp107, "c of FileOperationToBreakLeaseRequest, state S445");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S446\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S448\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp108;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp108);
            this.Manager.Comment("reaching state \'S449\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp108, "c of FileOperationToBreakLeaseRequest, state S449");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S450\'");
            int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS437OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS437OnLeaseBreakNotificationChecker1)));
            if ((temp110 == 0)) {
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S453\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S454\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S455\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S456\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp109;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp109);
                    this.Manager.Comment("reaching state \'S457\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp109, "c of FileOperationToBreakLeaseRequest, state S457");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437LeaseBreakResponseChecker)));
                }
                goto label42;
            }
            if ((temp110 == 1)) {
                BreakReadWriteLeaseV2TestCaseS61();
                goto label42;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS437OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS437OnLeaseBreakNotificationChecker1)));
        label42:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S450");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S450");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S450");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S450");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S453");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S453");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S450");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S450");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S450");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S450");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S438");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS458() {
            this.Manager.Comment("reaching state \'S458\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S459\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S460\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                    "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S461\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S462\'");
            int temp112 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker5)));
            if ((temp112 == 0)) {
                BreakReadWriteLeaseV2TestCaseS37();
                goto label44;
            }
            if ((temp112 == 1)) {
                BreakReadWriteLeaseV2TestCaseS463();
                goto label44;
            }
            if ((temp112 == 2)) {
                BreakReadWriteLeaseV2TestCaseS463();
                goto label44;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker5)));
        label44:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S462");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S462");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS463() {
            this.Manager.Comment("reaching state \'S463\'");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S462");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S438");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS437ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S438");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS464() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS464");
            this.Manager.Comment("reaching state \'S464\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp114);
            this.Manager.AddReturn(ReadConfigInfo, null, temp114);
            this.Manager.Comment("reaching state \'S465\'");
            int temp120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker3)));
            if ((temp120 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label48;
            }
            if ((temp120 == 1)) {
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S470\'");
                int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker2)));
                if ((temp119 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS471();
                    goto label47;
                }
                if ((temp119 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS471();
                    goto label47;
                }
                if ((temp119 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label47;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker2)));
            label47:
;
                goto label48;
            }
            if ((temp120 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label48;
            }
            if ((temp120 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S470");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS471() {
            this.Manager.Comment("reaching state \'S471\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp115;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp115);
            this.Manager.Comment("reaching state \'S472\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp115, "c of FileOperationToBreakLeaseRequest, state S472");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S473\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S474\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S475\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp116;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp116);
            this.Manager.Comment("reaching state \'S476\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp116, "c of FileOperationToBreakLeaseRequest, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S477\'");
            int temp118 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS464OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS464OnLeaseBreakNotificationChecker1)));
            if ((temp118 == 0)) {
                this.Manager.Comment("reaching state \'S478\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S479\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S480\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S481\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S482\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S483\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp117;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp117);
                    this.Manager.Comment("reaching state \'S484\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp117, "c of FileOperationToBreakLeaseRequest, state S484");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS464LeaseBreakResponseChecker)));
                }
                goto label46;
            }
            if ((temp118 == 1)) {
                BreakReadWriteLeaseV2TestCaseS61();
                goto label46;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS464OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS464OnLeaseBreakNotificationChecker1)));
        label46:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S477");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S477");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S477");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S477");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S480");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S480");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S477");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S477");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S477");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S477");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S470");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S470");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S470");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S470");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S465");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS464ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S485
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS485() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS485");
            this.Manager.Comment("reaching state \'S485\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp121;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp121);
            this.Manager.AddReturn(ReadConfigInfo, null, temp121);
            this.Manager.Comment("reaching state \'S486\'");
            int temp127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker3)));
            if ((temp127 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label51;
            }
            if ((temp127 == 1)) {
                this.Manager.Comment("reaching state \'S487\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S488\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S489\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S490\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S491\'");
                int temp126 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker2)));
                if ((temp126 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS492();
                    goto label50;
                }
                if ((temp126 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS492();
                    goto label50;
                }
                if ((temp126 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label50;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker2)));
            label50:
;
                goto label51;
            }
            if ((temp127 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label51;
            }
            if ((temp127 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S486");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S486");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S491");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS492() {
            this.Manager.Comment("reaching state \'S492\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp122;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp122);
            this.Manager.Comment("reaching state \'S493\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp122, "c of FileOperationToBreakLeaseRequest, state S493");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S494\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S496\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp123;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp123);
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp123, "c of FileOperationToBreakLeaseRequest, state S497");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S498\'");
            int temp125 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS485OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS485OnLeaseBreakNotificationChecker1)));
            if ((temp125 == 0)) {
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S500\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S501\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S502\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S503\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S504\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp124;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp124);
                    this.Manager.Comment("reaching state \'S505\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp124, "c of FileOperationToBreakLeaseRequest, state S505");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS485LeaseBreakResponseChecker)));
                }
                goto label49;
            }
            if ((temp125 == 1)) {
                BreakReadWriteLeaseV2TestCaseS61();
                goto label49;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS485OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS485OnLeaseBreakNotificationChecker1)));
        label49:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S498");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S498");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S498");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S501");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S498");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S498");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S498");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S491");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S491");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S491");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S491");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S486");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS485ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S486");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS506() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS506");
            this.Manager.Comment("reaching state \'S506\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp128;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp128);
            this.Manager.AddReturn(ReadConfigInfo, null, temp128);
            this.Manager.Comment("reaching state \'S507\'");
            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker3)));
            if ((temp134 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label54;
            }
            if ((temp134 == 1)) {
                this.Manager.Comment("reaching state \'S508\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S509\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S512\'");
                int temp133 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker2)));
                if ((temp133 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS513();
                    goto label53;
                }
                if ((temp133 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS513();
                    goto label53;
                }
                if ((temp133 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label53;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker2)));
            label53:
;
                goto label54;
            }
            if ((temp134 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label54;
            }
            if ((temp134 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S507");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S507");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS513() {
            this.Manager.Comment("reaching state \'S513\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp129;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp129);
            this.Manager.Comment("reaching state \'S514\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp129, "c of FileOperationToBreakLeaseRequest, state S514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S515\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S516\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S517\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp130;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp130);
            this.Manager.Comment("reaching state \'S518\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp130, "c of FileOperationToBreakLeaseRequest, state S518");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S519\'");
            int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS506OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS506OnLeaseBreakNotificationChecker1)));
            if ((temp132 == 0)) {
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S522\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S523\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S524\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S525\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp131;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp131);
                    this.Manager.Comment("reaching state \'S526\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp131, "c of FileOperationToBreakLeaseRequest, state S526");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS506LeaseBreakResponseChecker)));
                }
                goto label52;
            }
            if ((temp132 == 1)) {
                BreakReadWriteLeaseV2TestCaseS61();
                goto label52;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS506OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS506OnLeaseBreakNotificationChecker1)));
        label52:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S519");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S519");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S522");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S522");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S519");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S519");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S512");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S507");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS506ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S507");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S527
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS527() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS527");
            this.Manager.Comment("reaching state \'S527\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp135;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp135);
            this.Manager.AddReturn(ReadConfigInfo, null, temp135);
            this.Manager.Comment("reaching state \'S528\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker3)));
            if ((temp139 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label56;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S533\'");
                int temp138 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker2)));
                if ((temp138 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS534();
                    goto label55;
                }
                if ((temp138 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS534();
                    goto label55;
                }
                if ((temp138 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label55;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker2)));
            label55:
;
                goto label56;
            }
            if ((temp139 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label56;
            }
            if ((temp139 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S533");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S533");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS534() {
            this.Manager.Comment("reaching state \'S534\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp136;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp136);
            this.Manager.Comment("reaching state \'S535\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp136, "c of FileOperationToBreakLeaseRequest, state S535");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S536\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S537\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S538\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp137;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                    ",Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp137);
            this.Manager.Comment("reaching state \'S539\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp137, "c of FileOperationToBreakLeaseRequest, state S539");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                        "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                        " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                        "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                        "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                        "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                        "e following operations, the underlying object store MUST request that the server" +
                        " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                        " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                        "[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                        ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] T" +
                        "he server implements the SMB 3.x dialect family and Lease.Version is 2.\", \"[Test" +
                        "Info] Lease state is set to No caching.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadWriteLeaseV2TestCaseS540();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS540() {
            this.Manager.Comment("reaching state \'S540\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS527OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S543\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S544\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S545\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S546\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS527LeaseBreakResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS527OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S540");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S540");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S540");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S540");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S543");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S533");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S533");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S533");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S533");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S533");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S533");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S533");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S528");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS527ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S547
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS547() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS547");
            this.Manager.Comment("reaching state \'S547\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp140;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp140);
            this.Manager.AddReturn(ReadConfigInfo, null, temp140);
            this.Manager.Comment("reaching state \'S548\'");
            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker3)));
            if ((temp144 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label58;
            }
            if ((temp144 == 1)) {
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S552\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S553\'");
                int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker2)));
                if ((temp143 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS554();
                    goto label57;
                }
                if ((temp143 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS554();
                    goto label57;
                }
                if ((temp143 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker2)));
            label57:
;
                goto label58;
            }
            if ((temp144 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label58;
            }
            if ((temp144 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S553");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS554() {
            this.Manager.Comment("reaching state \'S554\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp141;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp141);
            this.Manager.Comment("reaching state \'S555\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp141, "c of FileOperationToBreakLeaseRequest, state S555");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S556\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S557\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S558\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp142;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                    "idDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp142);
            this.Manager.Comment("reaching state \'S559\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp142, "c of FileOperationToBreakLeaseRequest, state S559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                        "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                        " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                        "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                        "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                        "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                        "e following operations, the underlying object store MUST request that the server" +
                        " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                        " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                        "[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                        ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] T" +
                        "he server implements the SMB 3.x dialect family and Lease.Version is 2.\", \"[Test" +
                        "Info] Lease state is set to No caching.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadWriteLeaseV2TestCaseS540();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S553");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S553");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S553");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S553");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S548");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS547ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS560() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS560");
            this.Manager.Comment("reaching state \'S560\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp145;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp145);
            this.Manager.AddReturn(ReadConfigInfo, null, temp145);
            this.Manager.Comment("reaching state \'S561\'");
            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker3)));
            if ((temp151 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label61;
            }
            if ((temp151 == 1)) {
                this.Manager.Comment("reaching state \'S562\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S563\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S564\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S566\'");
                int temp150 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker2)));
                if ((temp150 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS567();
                    goto label60;
                }
                if ((temp150 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS567();
                    goto label60;
                }
                if ((temp150 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS81();
                    goto label60;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker2)));
            label60:
;
                goto label61;
            }
            if ((temp151 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label61;
            }
            if ((temp151 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS567() {
            this.Manager.Comment("reaching state \'S567\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp146;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp146);
            this.Manager.Comment("reaching state \'S568\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp146, "c of FileOperationToBreakLeaseRequest, state S568");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S569\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S570\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S571\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp147;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp147);
            this.Manager.Comment("reaching state \'S572\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp147, "c of FileOperationToBreakLeaseRequest, state S572");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S573\'");
            int temp149 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS560OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS560OnLeaseBreakNotificationChecker1)));
            if ((temp149 == 0)) {
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S576\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S577\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S578\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S579\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp148;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp148);
                    this.Manager.Comment("reaching state \'S580\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp148, "c of FileOperationToBreakLeaseRequest, state S580");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS560LeaseBreakResponseChecker)));
                }
                goto label59;
            }
            if ((temp149 == 1)) {
                BreakReadWriteLeaseV2TestCaseS61();
                goto label59;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS560OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS560OnLeaseBreakNotificationChecker1)));
        label59:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S573");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S573");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S573");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S573");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S576");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S573");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S573");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S573");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S573");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S561");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS560ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S581
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS581() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS581");
            this.Manager.Comment("reaching state \'S581\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp152;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp152);
            this.Manager.AddReturn(ReadConfigInfo, null, temp152);
            this.Manager.Comment("reaching state \'S582\'");
            int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker3)));
            if ((temp162 == 0)) {
                BreakReadWriteLeaseV2TestCaseS458();
                goto label65;
            }
            if ((temp162 == 1)) {
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S587\'");
                int temp161 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker2)));
                if ((temp161 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label64;
                }
                if ((temp161 == 1)) {
                    this.Manager.Comment("reaching state \'S588\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp153;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp153);
                    this.Manager.Comment("reaching state \'S589\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp153, "c of FileOperationToBreakLeaseRequest, state S589");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S590\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S591\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S592\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp154;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp154);
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp154, "c of FileOperationToBreakLeaseRequest, state S593");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                                "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                                "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                                "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                                "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                                "delay closing handles it holds open, or to defer sending opens. Before processin" +
                                "g one of the following operations, the underlying object store MUST request that" +
                                " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                                "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                                "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                                "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                                "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                                "2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S594\'");
                    int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker1)));
                    if ((temp156 == 0)) {
                        BreakReadWriteLeaseV2TestCaseS109();
                        goto label62;
                    }
                    if ((temp156 == 1)) {
                        this.Manager.Comment("reaching state \'S595\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S596\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S597\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S598\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S599\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S600\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp155;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                                    "DifferentLeaseKey,Smb302,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp155);
                            this.Manager.Comment("reaching state \'S601\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp155, "c of FileOperationToBreakLeaseRequest, state S601");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                        "ient to cache data read from the object. Before processing one of the following " +
                                        "operations from a client with a different ClientId, the object store MUST reques" +
                                        "t that the server revoke READ caching. The object store is not required to wait " +
                                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                        "byte-range locks on an object. Before processing one of the following operations" +
                                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                                        " and the object store MUST wait for acknowledgment from the server before procee" +
                                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                        "processing one of the following operations, the underlying object store MUST req" +
                                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                        "to No caching.\"");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                                    " 2.\"");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v1\'");
                            this.v1.Unbind();
                            BreakReadWriteLeaseV2TestCaseS105();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581LeaseBreakResponseChecker)));
                        }
                        goto label62;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker1)));
                label62:
;
                    goto label64;
                }
                if ((temp161 == 2)) {
                    this.Manager.Comment("reaching state \'S602\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp157;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp157);
                    this.Manager.Comment("reaching state \'S603\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp157, "c of FileOperationToBreakLeaseRequest, state S603");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S604\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S605\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S606\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp158;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp158);
                    this.Manager.Comment("reaching state \'S607\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp158, "c of FileOperationToBreakLeaseRequest, state S607");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                                "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                                "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                                "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                                "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                                "delay closing handles it holds open, or to defer sending opens. Before processin" +
                                "g one of the following operations, the underlying object store MUST request that" +
                                " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                                "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                                "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                                "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                                "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                                "2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S608\'");
                    int temp160 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker3)));
                    if ((temp160 == 0)) {
                        BreakReadWriteLeaseV2TestCaseS109();
                        goto label63;
                    }
                    if ((temp160 == 1)) {
                        this.Manager.Comment("reaching state \'S609\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S610\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S611\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S612\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S613\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S614\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp159;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb302,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp159);
                            this.Manager.Comment("reaching state \'S615\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp159, "c of FileOperationToBreakLeaseRequest, state S615");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                        "ient to cache data read from the object. Before processing one of the following " +
                                        "operations from a client with a different ClientId, the object store MUST reques" +
                                        "t that the server revoke READ caching. The object store is not required to wait " +
                                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                        "byte-range locks on an object. Before processing one of the following operations" +
                                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                                        " and the object store MUST wait for acknowledgment from the server before procee" +
                                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                        "processing one of the following operations, the underlying object store MUST req" +
                                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                        "to No caching.\"");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                                    " 2.\"");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v1\'");
                            this.v1.Unbind();
                            BreakReadWriteLeaseV2TestCaseS105();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581LeaseBreakResponseChecker1)));
                        }
                        goto label63;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker3)));
                label63:
;
                    goto label64;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker2)));
            label64:
;
                goto label65;
            }
            if ((temp162 == 2)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label65;
            }
            if ((temp162 == 3)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S582");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S582");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S594");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S594");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S594");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S594");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S594");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S594");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S594");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S594");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S597");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S608");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S608");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S608");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S608");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S608");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S608");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S611");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S611");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S582");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS581ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S582");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadWriteLeaseV2TestCaseS84() {
            this.Manager.BeginTest("BreakReadWriteLeaseV2TestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp163;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp163);
            this.Manager.AddReturn(ReadConfigInfo, null, temp163);
            this.Manager.Comment("reaching state \'S85\'");
            int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker3)));
            if ((temp174 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S120\'");
                int temp168 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker2)));
                if ((temp168 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS121();
                    goto label67;
                }
                if ((temp168 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS121();
                    goto label67;
                }
                if ((temp168 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS37();
                    goto label67;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker1)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker2)));
            label67:
;
                goto label70;
            }
            if ((temp174 == 1)) {
                BreakReadWriteLeaseV2TestCaseS82();
                goto label70;
            }
            if ((temp174 == 2)) {
                BreakReadWriteLeaseV2TestCaseS83();
                goto label70;
            }
            if ((temp174 == 3)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S90\'");
                int temp173 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker5)));
                if ((temp173 == 0)) {
                    BreakReadWriteLeaseV2TestCaseS115();
                    goto label69;
                }
                if ((temp173 == 1)) {
                    BreakReadWriteLeaseV2TestCaseS91();
                    goto label69;
                }
                if ((temp173 == 2)) {
                    BreakReadWriteLeaseV2TestCaseS91();
                    goto label69;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker3)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker4)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker5)));
            label69:
;
                goto label70;
            }
            throw new InvalidOperationException("never reached");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS121() {
            this.Manager.Comment("reaching state \'S121\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp164;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp164);
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp164, "c of FileOperationToBreakLeaseRequest, state S122");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp165;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp165);
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp165, "c of FileOperationToBreakLeaseRequest, state S126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S127\'");
            int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker1)));
            if ((temp167 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S130\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S133\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp166;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp166);
                    this.Manager.Comment("reaching state \'S134\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp166, "c of FileOperationToBreakLeaseRequest, state S134");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84LeaseBreakResponseChecker)));
                }
                goto label66;
            }
            if ((temp167 == 1)) {
                BreakReadWriteLeaseV2TestCaseS25();
                goto label66;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker1)));
        label66:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S130");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S85");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS91() {
            this.Manager.Comment("reaching state \'S91\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp169;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp169);
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp169, "c of FileOperationToBreakLeaseRequest, state S92");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S95\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp170;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp170);
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp170, "c of FileOperationToBreakLeaseRequest, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] The file is opened by a local a" +
                        "pplication or via another protocol, or opened via SMB2 without providing the sam" +
                        "e ClientId, and requested access includes any flags other than FILE_READ_ATTRIBU" +
                        "TES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease s" +
                        "tate is broken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to " +
                        "delay closing handles it holds open, or to defer sending opens. Before processin" +
                        "g one of the following operations, the underlying object store MUST request that" +
                        " the server revoke HANDLE caching, and the object store MUST wait for acknowledg" +
                        "ment before proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set t" +
                        "o TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect famil" +
                        "y and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \", \"[" +
                        "TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is " +
                        "2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                    "opened via SMB2 without providing the same ClientId, and requested access includ" +
                    "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                    "NIZE.\"");
            this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S97\'");
            int temp172 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker3)));
            if ((temp172 == 0)) {
                BreakReadWriteLeaseV2TestCaseS109();
                goto label68;
            }
            if ((temp172 == 1)) {
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S100\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S103\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp171;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp171);
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp171, "c of FileOperationToBreakLeaseRequest, state S104");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadWriteLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV2TestCaseS84LeaseBreakResponseChecker1)));
                }
                goto label68;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker3)));
        label68:
;
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S100");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV2TestCaseS84CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
    }
}
