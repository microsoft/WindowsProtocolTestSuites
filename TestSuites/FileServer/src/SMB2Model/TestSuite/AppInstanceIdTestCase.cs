// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AppInstanceIdTestCase : PtfTestClassBase {
        
        public AppInstanceIdTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision);
        
        public delegate void OpenRequestDelegate1();
        
        public delegate void OpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.IAppInstanceIdAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision).MakeByRefType());
        
        static System.Reflection.MethodBase OpenRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.IAppInstanceIdAdapter), "OpenRequest", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType));
        
        static System.Reflection.EventInfo OpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.IAppInstanceIdAdapter), "OpenResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.IAppInstanceIdAdapter IAppInstanceIdAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IAppInstanceIdAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.IAppInstanceIdAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.IAppInstanceIdAdapter))));
            this.Manager.Subscribe(OpenResponseInfo, this.IAppInstanceIdAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS0() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp1 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS0ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS0ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS0ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS0ReadConfigChecker3)));
            if ((temp1 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label0;
            }
            if ((temp1 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS5();
                goto label0;
            }
            if ((temp1 == 2)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label0;
            }
            if ((temp1 == 3)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,CreateDurableThenDisc" +
                        "onnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S1");
        }
        
        private void AppInstanceIdTestCaseS17() {
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS0OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S18\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S19\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS0OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS0OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S1");
        }
        
        private void AppInstanceIdTestCaseS5() {
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS0OpenRequestChecker1)));
            this.Manager.Comment("reaching state \'S6\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S7\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker1)));
            }
        }
        
        private void AppInstanceIdTestCaseS0OpenRequestChecker1() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS0OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(0)), status, "status of OpenResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open does not exist.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
        }
        
        private void AppInstanceIdTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S1");
        }
        
        private void AppInstanceIdTestCaseS23() {
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS0OpenRequestChecker2)));
            this.Manager.Comment("reaching state \'S24\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S25\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker2)));
            }
        }
        
        private void AppInstanceIdTestCaseS0OpenRequestChecker2() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS0OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S24");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S1");
        }
        
        private void AppInstanceIdTestCaseS11() {
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS0OpenRequestChecker3)));
            this.Manager.Comment("reaching state \'S12\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S13\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS0OpenResponseChecker3)));
            }
        }
        
        private void AppInstanceIdTestCaseS0OpenRequestChecker3() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS0OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS100() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS100");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp2;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp2);
            this.Manager.AddReturn(ReadConfigInfo, null, temp2);
            this.Manager.Comment("reaching state \'S101\'");
            int temp3 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS100ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS100ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS100ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS100ReadConfigChecker3)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label1;
            }
            if ((temp3 == 1)) {
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label1;
            }
            if ((temp3 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label1;
            }
            if ((temp3 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS100ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S101");
        }
        
        private void AppInstanceIdTestCaseS67() {
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS100OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S68\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS100OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S69\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS100OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS100OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS100OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS100ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S101");
        }
        
        private void AppInstanceIdTestCaseS73() {
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS100OpenRequestChecker1)));
            this.Manager.Comment("reaching state \'S74\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS100OpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S75\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS100OpenResponseChecker1)));
            }
        }
        
        private void AppInstanceIdTestCaseS100OpenRequestChecker1() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS100OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS100ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S101");
        }
        
        private void AppInstanceIdTestCaseS34() {
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
            this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                    "the server MUST initialize the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                    "ValidAppInstanceId)\'");
            this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
            this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
            this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
            this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
            this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                    "ot be closed.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.AddReturn(OpenRequestInfo, null);
            AppInstanceIdTestCaseS37();
        }
        
        private void AppInstanceIdTestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS100OpenRequestChecker2)));
            this.Manager.Comment("reaching state \'S38\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS100OpenResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S39\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS100OpenResponseChecker2)));
            }
        }
        
        private void AppInstanceIdTestCaseS100OpenRequestChecker2() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS100OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS100ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S101");
        }
        
        private void AppInstanceIdTestCaseS40() {
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
            this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                    ".AppInstanceId is not set.\"");
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                    "ValidAppInstanceId)\'");
            this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
            this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                    " the SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
            this.Manager.AddReturn(OpenRequestInfo, null);
            AppInstanceIdTestCaseS17();
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS108() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS108");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp4;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp4);
            this.Manager.AddReturn(ReadConfigInfo, null, temp4);
            this.Manager.Comment("reaching state \'S109\'");
            int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS108ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS108ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS108ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS108ReadConfigChecker3)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label2;
            }
            if ((temp5 == 1)) {
                AppInstanceIdTestCaseS116();
                goto label2;
            }
            if ((temp5 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label2;
            }
            if ((temp5 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS108ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S109");
        }
        
        private void AppInstanceIdTestCaseS113() {
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS108OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S114\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS108OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S115\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS108OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS108OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS108OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS108ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S109");
        }
        
        private void AppInstanceIdTestCaseS116() {
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
            this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                    "the server MUST initialize the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                    "ValidAppInstanceId)\'");
            this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
            this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
            this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
            this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
            this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                    "ot be closed.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.AddReturn(OpenRequestInfo, null);
            AppInstanceIdTestCaseS119();
        }
        
        private void AppInstanceIdTestCaseS119() {
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS108OpenRequestChecker1)));
            this.Manager.Comment("reaching state \'S120\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS108OpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S121\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS108OpenResponseChecker1)));
            }
        }
        
        private void AppInstanceIdTestCaseS108OpenRequestChecker1() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS108OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS108ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S109");
        }
        
        private void AppInstanceIdTestCaseS108ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S109");
        }
        
        private void AppInstanceIdTestCaseS43() {
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
            this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                    ".AppInstanceId is not set.\"");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                    "ValidAppInstanceId)\'");
            this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
            this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                    " the SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
            this.Manager.AddReturn(OpenRequestInfo, null);
            AppInstanceIdTestCaseS23();
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS122() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS122");
            this.Manager.Comment("reaching state \'S122\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp6;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp6);
            this.Manager.AddReturn(ReadConfigInfo, null, temp6);
            this.Manager.Comment("reaching state \'S123\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS122ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS122ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS122ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS122ReadConfigChecker3)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label3;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label3;
            }
            if ((temp7 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label3;
            }
            if ((temp7 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS122ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S123");
        }
        
        private void AppInstanceIdTestCaseS122ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S123");
        }
        
        private void AppInstanceIdTestCaseS122ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S123");
        }
        
        private void AppInstanceIdTestCaseS122ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S123");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS130() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS130");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp8);
            this.Manager.AddReturn(ReadConfigInfo, null, temp8);
            this.Manager.Comment("reaching state \'S131\'");
            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS130ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS130ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS130ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS130ReadConfigChecker3)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label4;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label4;
            }
            if ((temp9 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label4;
            }
            if ((temp9 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS130ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S131");
        }
        
        private void AppInstanceIdTestCaseS130ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S131");
        }
        
        private void AppInstanceIdTestCaseS130ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S131");
        }
        
        private void AppInstanceIdTestCaseS130ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S131");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS138() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS138");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp10;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp10);
            this.Manager.AddReturn(ReadConfigInfo, null, temp10);
            this.Manager.Comment("reaching state \'S139\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS138ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS138ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS138ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS138ReadConfigChecker3)));
            if ((temp11 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label5;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label5;
            }
            if ((temp11 == 2)) {
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS146();
                goto label5;
            }
            if ((temp11 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS138ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S139");
        }
        
        private void AppInstanceIdTestCaseS138ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S139");
        }
        
        private void AppInstanceIdTestCaseS138ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S139");
        }
        
        private void AppInstanceIdTestCaseS146() {
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS138OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S147\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS138OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S148\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS138OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS138OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS138OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(0)), status, "status of OpenResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open does not exist.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
        }
        
        private void AppInstanceIdTestCaseS138ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S139");
        }
        #endregion
        
        #region Test Starting in S149
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS149() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS149");
            this.Manager.Comment("reaching state \'S149\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp12);
            this.Manager.AddReturn(ReadConfigInfo, null, temp12);
            this.Manager.Comment("reaching state \'S150\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS149ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS149ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS149ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS149ReadConfigChecker3)));
            if ((temp13 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label6;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label6;
            }
            if ((temp13 == 2)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS157();
                goto label6;
            }
            if ((temp13 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS149ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S150");
        }
        
        private void AppInstanceIdTestCaseS149ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S150");
        }
        
        private void AppInstanceIdTestCaseS149ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S150");
        }
        
        private void AppInstanceIdTestCaseS157() {
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS149OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S158\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS149OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S159\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS149OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS149OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS149OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS149ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S150");
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS160() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS160");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp14);
            this.Manager.AddReturn(ReadConfigInfo, null, temp14);
            this.Manager.Comment("reaching state \'S161\'");
            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS160ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS160ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS160ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS160ReadConfigChecker3)));
            if ((temp15 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label7;
            }
            if ((temp15 == 1)) {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS157();
                goto label7;
            }
            if ((temp15 == 2)) {
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label7;
            }
            if ((temp15 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS160ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S161");
        }
        
        private void AppInstanceIdTestCaseS160ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S161");
        }
        
        private void AppInstanceIdTestCaseS160ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S161");
        }
        
        private void AppInstanceIdTestCaseS168() {
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS160OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S169\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS160OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S170\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS160OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS160OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS160OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS160ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S161");
        }
        #endregion
        
        #region Test Starting in S171
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS171() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS171");
            this.Manager.Comment("reaching state \'S171\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp16;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp16);
            this.Manager.AddReturn(ReadConfigInfo, null, temp16);
            this.Manager.Comment("reaching state \'S172\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS171ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS171ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS171ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS171ReadConfigChecker3)));
            if ((temp17 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label8;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS157();
                goto label8;
            }
            if ((temp17 == 2)) {
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label8;
            }
            if ((temp17 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS171ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S172");
        }
        
        private void AppInstanceIdTestCaseS171ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S172");
        }
        
        private void AppInstanceIdTestCaseS171ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S172");
        }
        
        private void AppInstanceIdTestCaseS171ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S172");
        }
        #endregion
        
        #region Test Starting in S179
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS179() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS179");
            this.Manager.Comment("reaching state \'S179\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp18;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp18);
            this.Manager.AddReturn(ReadConfigInfo, null, temp18);
            this.Manager.Comment("reaching state \'S180\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS179ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS179ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS179ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS179ReadConfigChecker3)));
            if ((temp19 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label9;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS157();
                goto label9;
            }
            if ((temp19 == 2)) {
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label9;
            }
            if ((temp19 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS179ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S180");
        }
        
        private void AppInstanceIdTestCaseS179ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S180");
        }
        
        private void AppInstanceIdTestCaseS179ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S180");
        }
        
        private void AppInstanceIdTestCaseS179ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S180");
        }
        #endregion
        
        #region Test Starting in S187
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS187() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS187");
            this.Manager.Comment("reaching state \'S187\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp20);
            this.Manager.AddReturn(ReadConfigInfo, null, temp20);
            this.Manager.Comment("reaching state \'S188\'");
            int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS187ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS187ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS187ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS187ReadConfigChecker3)));
            if ((temp21 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label10;
            }
            if ((temp21 == 1)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS157();
                goto label10;
            }
            if ((temp21 == 2)) {
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label10;
            }
            if ((temp21 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS187ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S188");
        }
        
        private void AppInstanceIdTestCaseS187ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S188");
        }
        
        private void AppInstanceIdTestCaseS187ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S188");
        }
        
        private void AppInstanceIdTestCaseS187ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S188");
        }
        #endregion
        
        #region Test Starting in S195
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS195() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS195");
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp22;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp22);
            this.Manager.AddReturn(ReadConfigInfo, null, temp22);
            this.Manager.Comment("reaching state \'S196\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS195ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS195ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS195ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS195ReadConfigChecker3)));
            if ((temp23 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label11;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS157();
                goto label11;
            }
            if ((temp23 == 2)) {
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label11;
            }
            if ((temp23 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS195ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S196");
        }
        
        private void AppInstanceIdTestCaseS195ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S196");
        }
        
        private void AppInstanceIdTestCaseS195ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S196");
        }
        
        private void AppInstanceIdTestCaseS195ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S196");
        }
        #endregion
        
        #region Test Starting in S203
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS203() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS203");
            this.Manager.Comment("reaching state \'S203\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S204\'");
            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS203ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS203ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS203ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS203ReadConfigChecker3)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS208();
                goto label12;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label12;
            }
            if ((temp25 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label12;
            }
            if ((temp25 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS203ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S204");
        }
        
        private void AppInstanceIdTestCaseS208() {
            this.Manager.Comment("reaching state \'S208\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS203OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S209\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS203OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S210\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS203OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS203OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS203OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS203ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S204");
        }
        
        private void AppInstanceIdTestCaseS214() {
            this.Manager.Comment("reaching state \'S214\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS203OpenRequestChecker1)));
            this.Manager.Comment("reaching state \'S215\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS203OpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S216\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS203OpenResponseChecker1)));
            }
        }
        
        private void AppInstanceIdTestCaseS203OpenRequestChecker1() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS203OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS203ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S204");
        }
        
        private void AppInstanceIdTestCaseS203ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S204");
        }
        #endregion
        
        #region Test Starting in S217
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS217() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS217");
            this.Manager.Comment("reaching state \'S217\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp26;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp26);
            this.Manager.AddReturn(ReadConfigInfo, null, temp26);
            this.Manager.Comment("reaching state \'S218\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS217ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS217ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS217ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS217ReadConfigChecker3)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS208();
                goto label13;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label13;
            }
            if ((temp27 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label13;
            }
            if ((temp27 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS217ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S218");
        }
        
        private void AppInstanceIdTestCaseS217ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S218");
        }
        
        private void AppInstanceIdTestCaseS217ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S218");
        }
        
        private void AppInstanceIdTestCaseS217ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S218");
        }
        #endregion
        
        #region Test Starting in S225
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS225() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS225");
            this.Manager.Comment("reaching state \'S225\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S226\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS225ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS225ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS225ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS225ReadConfigChecker3)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS208();
                goto label14;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label14;
            }
            if ((temp29 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label14;
            }
            if ((temp29 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS225ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S226");
        }
        
        private void AppInstanceIdTestCaseS225ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S226");
        }
        
        private void AppInstanceIdTestCaseS225ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S226");
        }
        
        private void AppInstanceIdTestCaseS225ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S226");
        }
        #endregion
        
        #region Test Starting in S233
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS233() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS233");
            this.Manager.Comment("reaching state \'S233\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S234\'");
            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS233ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS233ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS233ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS233ReadConfigChecker3)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS208();
                goto label15;
            }
            if ((temp31 == 1)) {
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label15;
            }
            if ((temp31 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label15;
            }
            if ((temp31 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS233ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S234");
        }
        
        private void AppInstanceIdTestCaseS233ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S234");
        }
        
        private void AppInstanceIdTestCaseS233ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S234");
        }
        
        private void AppInstanceIdTestCaseS233ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S234");
        }
        #endregion
        
        #region Test Starting in S241
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS241() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS241");
            this.Manager.Comment("reaching state \'S241\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp32);
            this.Manager.AddReturn(ReadConfigInfo, null, temp32);
            this.Manager.Comment("reaching state \'S242\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS241ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS241ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS241ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS241ReadConfigChecker3)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS208();
                goto label16;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label16;
            }
            if ((temp33 == 2)) {
                AppInstanceIdTestCaseS34();
                goto label16;
            }
            if ((temp33 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS241ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S242");
        }
        
        private void AppInstanceIdTestCaseS241ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S242");
        }
        
        private void AppInstanceIdTestCaseS241ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S242");
        }
        
        private void AppInstanceIdTestCaseS241ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S242");
        }
        #endregion
        
        #region Test Starting in S249
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS249() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS249");
            this.Manager.Comment("reaching state \'S249\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp34);
            this.Manager.AddReturn(ReadConfigInfo, null, temp34);
            this.Manager.Comment("reaching state \'S250\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS249ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS249ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS249ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS249ReadConfigChecker3)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS208();
                goto label17;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label17;
            }
            if ((temp35 == 2)) {
                AppInstanceIdTestCaseS40();
                goto label17;
            }
            if ((temp35 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS249ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S250");
        }
        
        private void AppInstanceIdTestCaseS249ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S250");
        }
        
        private void AppInstanceIdTestCaseS257() {
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS249OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S258\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS249OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S259\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS249OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS249OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS249OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS249ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S250");
        }
        
        private void AppInstanceIdTestCaseS249ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S250");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS26() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp36);
            this.Manager.AddReturn(ReadConfigInfo, null, temp36);
            this.Manager.Comment("reaching state \'S27\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS26ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS26ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS26ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS26ReadConfigChecker3)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurableThenDiscon" +
                        "nect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,ReconnectDurable,Sam" +
                        "eShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label18;
            }
            if ((temp37 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label18;
            }
            if ((temp37 == 2)) {
                AppInstanceIdTestCaseS40();
                goto label18;
            }
            if ((temp37 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS26ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S27");
        }
        
        private void AppInstanceIdTestCaseS31() {
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS26OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S32\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS26OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S33\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS26OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS26OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS26OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS26ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S27");
        }
        
        private void AppInstanceIdTestCaseS26ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S27");
        }
        
        private void AppInstanceIdTestCaseS26ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S27");
        }
        #endregion
        
        #region Test Starting in S260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS260() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS260");
            this.Manager.Comment("reaching state \'S260\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp38);
            this.Manager.AddReturn(ReadConfigInfo, null, temp38);
            this.Manager.Comment("reaching state \'S261\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS260ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS260ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS260ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS260ReadConfigChecker3)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS5();
                goto label19;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label19;
            }
            if ((temp39 == 2)) {
                AppInstanceIdTestCaseS40();
                goto label19;
            }
            if ((temp39 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS260ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S261");
        }
        
        private void AppInstanceIdTestCaseS260ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S261");
        }
        
        private void AppInstanceIdTestCaseS260ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S261");
        }
        
        private void AppInstanceIdTestCaseS260ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S261");
        }
        #endregion
        
        #region Test Starting in S268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS268() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS268");
            this.Manager.Comment("reaching state \'S268\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp40;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp40);
            this.Manager.AddReturn(ReadConfigInfo, null, temp40);
            this.Manager.Comment("reaching state \'S269\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS268ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS268ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS268ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS268ReadConfigChecker3)));
            if ((temp41 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label20;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label20;
            }
            if ((temp41 == 2)) {
                AppInstanceIdTestCaseS40();
                goto label20;
            }
            if ((temp41 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS268ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S269");
        }
        
        private void AppInstanceIdTestCaseS268ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S269");
        }
        
        private void AppInstanceIdTestCaseS268ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S269");
        }
        
        private void AppInstanceIdTestCaseS268ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S269");
        }
        #endregion
        
        #region Test Starting in S273
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS273() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS273");
            this.Manager.Comment("reaching state \'S273\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp42);
            this.Manager.AddReturn(ReadConfigInfo, null, temp42);
            this.Manager.Comment("reaching state \'S274\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS273ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS273ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS273ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS273ReadConfigChecker3)));
            if ((temp43 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label21;
            }
            if ((temp43 == 1)) {
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label21;
            }
            if ((temp43 == 2)) {
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label21;
            }
            if ((temp43 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS273ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S274");
        }
        
        private void AppInstanceIdTestCaseS273ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S274");
        }
        
        private void AppInstanceIdTestCaseS273ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S274");
        }
        
        private void AppInstanceIdTestCaseS273ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S274");
        }
        #endregion
        
        #region Test Starting in S281
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS281() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS281");
            this.Manager.Comment("reaching state \'S281\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S282\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS281ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS281ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS281ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS281ReadConfigChecker3)));
            if ((temp45 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label22;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label22;
            }
            if ((temp45 == 2)) {
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label22;
            }
            if ((temp45 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS281ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S282");
        }
        
        private void AppInstanceIdTestCaseS281ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S282");
        }
        
        private void AppInstanceIdTestCaseS281ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S282");
        }
        
        private void AppInstanceIdTestCaseS281ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S282");
        }
        #endregion
        
        #region Test Starting in S289
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS289() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS289");
            this.Manager.Comment("reaching state \'S289\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp46);
            this.Manager.AddReturn(ReadConfigInfo, null, temp46);
            this.Manager.Comment("reaching state \'S290\'");
            int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS289ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS289ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS289ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS289ReadConfigChecker3)));
            if ((temp47 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label23;
            }
            if ((temp47 == 1)) {
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS146();
                goto label23;
            }
            if ((temp47 == 2)) {
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label23;
            }
            if ((temp47 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS289ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S290");
        }
        
        private void AppInstanceIdTestCaseS289ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S290");
        }
        
        private void AppInstanceIdTestCaseS289ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S290");
        }
        
        private void AppInstanceIdTestCaseS289ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S290");
        }
        #endregion
        
        #region Test Starting in S297
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS297() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS297");
            this.Manager.Comment("reaching state \'S297\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp48;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp48);
            this.Manager.AddReturn(ReadConfigInfo, null, temp48);
            this.Manager.Comment("reaching state \'S298\'");
            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS297ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS297ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS297ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS297ReadConfigChecker3)));
            if ((temp49 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label24;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS302();
                goto label24;
            }
            if ((temp49 == 2)) {
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label24;
            }
            if ((temp49 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS297ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S298");
        }
        
        private void AppInstanceIdTestCaseS297ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S298");
        }
        
        private void AppInstanceIdTestCaseS302() {
            this.Manager.Comment("reaching state \'S302\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS297OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S303\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS297OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S304\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS297OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS297OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS297OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S303");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        
        private void AppInstanceIdTestCaseS297ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S298");
        }
        
        private void AppInstanceIdTestCaseS297ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S298");
        }
        #endregion
        
        #region Test Starting in S308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS308() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS308");
            this.Manager.Comment("reaching state \'S308\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp50;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp50);
            this.Manager.AddReturn(ReadConfigInfo, null, temp50);
            this.Manager.Comment("reaching state \'S309\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS308ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS308ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS308ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS308ReadConfigChecker3)));
            if ((temp51 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label25;
            }
            if ((temp51 == 1)) {
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS302();
                goto label25;
            }
            if ((temp51 == 2)) {
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label25;
            }
            if ((temp51 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS308ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S309");
        }
        
        private void AppInstanceIdTestCaseS308ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S309");
        }
        
        private void AppInstanceIdTestCaseS308ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S309");
        }
        
        private void AppInstanceIdTestCaseS308ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S309");
        }
        #endregion
        
        #region Test Starting in S316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS316() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS316");
            this.Manager.Comment("reaching state \'S316\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp52;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp52);
            this.Manager.AddReturn(ReadConfigInfo, null, temp52);
            this.Manager.Comment("reaching state \'S317\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS316ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS316ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS316ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS316ReadConfigChecker3)));
            if ((temp53 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label26;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS302();
                goto label26;
            }
            if ((temp53 == 2)) {
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label26;
            }
            if ((temp53 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS316ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S317");
        }
        
        private void AppInstanceIdTestCaseS316ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S317");
        }
        
        private void AppInstanceIdTestCaseS316ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S317");
        }
        
        private void AppInstanceIdTestCaseS316ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S317");
        }
        #endregion
        
        #region Test Starting in S324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS324() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS324");
            this.Manager.Comment("reaching state \'S324\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S325\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS324ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS324ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS324ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS324ReadConfigChecker3)));
            if ((temp55 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label27;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS302();
                goto label27;
            }
            if ((temp55 == 2)) {
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS23();
                goto label27;
            }
            if ((temp55 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS324ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S325");
        }
        
        private void AppInstanceIdTestCaseS324ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S325");
        }
        
        private void AppInstanceIdTestCaseS324ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S325");
        }
        
        private void AppInstanceIdTestCaseS324ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S325");
        }
        #endregion
        
        #region Test Starting in S332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS332() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS332");
            this.Manager.Comment("reaching state \'S332\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp56;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp56);
            this.Manager.AddReturn(ReadConfigInfo, null, temp56);
            this.Manager.Comment("reaching state \'S333\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS332ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS332ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS332ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS332ReadConfigChecker3)));
            if ((temp57 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label28;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS302();
                goto label28;
            }
            if ((temp57 == 2)) {
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label28;
            }
            if ((temp57 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS332ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S333");
        }
        
        private void AppInstanceIdTestCaseS332ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S333");
        }
        
        private void AppInstanceIdTestCaseS332ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S333");
        }
        
        private void AppInstanceIdTestCaseS332ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S333");
        }
        #endregion
        
        #region Test Starting in S340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS340() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS340");
            this.Manager.Comment("reaching state \'S340\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp58;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp58);
            this.Manager.AddReturn(ReadConfigInfo, null, temp58);
            this.Manager.Comment("reaching state \'S341\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS340ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS340ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS340ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS340ReadConfigChecker3)));
            if ((temp59 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label29;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS146();
                goto label29;
            }
            if ((temp59 == 2)) {
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label29;
            }
            if ((temp59 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS340ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S341");
        }
        
        private void AppInstanceIdTestCaseS340ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S341");
        }
        
        private void AppInstanceIdTestCaseS340ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S341");
        }
        
        private void AppInstanceIdTestCaseS340ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S341");
        }
        #endregion
        
        #region Test Starting in S348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS348() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS348");
            this.Manager.Comment("reaching state \'S348\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp60;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp60);
            this.Manager.AddReturn(ReadConfigInfo, null, temp60);
            this.Manager.Comment("reaching state \'S349\'");
            int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS348ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS348ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS348ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS348ReadConfigChecker3)));
            if ((temp61 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label30;
            }
            if ((temp61 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label30;
            }
            if ((temp61 == 2)) {
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label30;
            }
            if ((temp61 == 3)) {
                AppInstanceIdTestCaseS40();
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS348ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S349");
        }
        
        private void AppInstanceIdTestCaseS348ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S349");
        }
        
        private void AppInstanceIdTestCaseS348ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S349");
        }
        
        private void AppInstanceIdTestCaseS348ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S349");
        }
        #endregion
        
        #region Test Starting in S353
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS353() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS353");
            this.Manager.Comment("reaching state \'S353\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp62;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp62);
            this.Manager.AddReturn(ReadConfigInfo, null, temp62);
            this.Manager.Comment("reaching state \'S354\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS353ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS353ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS353ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS353ReadConfigChecker3)));
            if ((temp63 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label31;
            }
            if ((temp63 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label31;
            }
            if ((temp63 == 2)) {
                this.Manager.Comment("reaching state \'S355\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S356\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S357\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label31;
            }
            if ((temp63 == 3)) {
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS353ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S354");
        }
        
        private void AppInstanceIdTestCaseS353ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S354");
        }
        
        private void AppInstanceIdTestCaseS353ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S354");
        }
        
        private void AppInstanceIdTestCaseS353ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S354");
        }
        #endregion
        
        #region Test Starting in S361
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS361() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS361");
            this.Manager.Comment("reaching state \'S361\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S362\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS361ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS361ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS361ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS361ReadConfigChecker3)));
            if ((temp65 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label32;
            }
            if ((temp65 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label32;
            }
            if ((temp65 == 2)) {
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label32;
            }
            if ((temp65 == 3)) {
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS361ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S362");
        }
        
        private void AppInstanceIdTestCaseS361ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S362");
        }
        
        private void AppInstanceIdTestCaseS361ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S362");
        }
        
        private void AppInstanceIdTestCaseS361ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S362");
        }
        #endregion
        
        #region Test Starting in S369
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS369() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS369");
            this.Manager.Comment("reaching state \'S369\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp66;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp66);
            this.Manager.AddReturn(ReadConfigInfo, null, temp66);
            this.Manager.Comment("reaching state \'S370\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS369ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS369ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS369ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS369ReadConfigChecker3)));
            if ((temp67 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label33;
            }
            if ((temp67 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label33;
            }
            if ((temp67 == 2)) {
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label33;
            }
            if ((temp67 == 3)) {
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS369ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S370");
        }
        
        private void AppInstanceIdTestCaseS369ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S370");
        }
        
        private void AppInstanceIdTestCaseS369ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S370");
        }
        
        private void AppInstanceIdTestCaseS369ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S370");
        }
        #endregion
        
        #region Test Starting in S377
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS377() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS377");
            this.Manager.Comment("reaching state \'S377\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp68;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp68);
            this.Manager.AddReturn(ReadConfigInfo, null, temp68);
            this.Manager.Comment("reaching state \'S378\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS377ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS377ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS377ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS377ReadConfigChecker3)));
            if ((temp69 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label34;
            }
            if ((temp69 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label34;
            }
            if ((temp69 == 2)) {
                this.Manager.Comment("reaching state \'S379\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label34;
            }
            if ((temp69 == 3)) {
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS377ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S378");
        }
        
        private void AppInstanceIdTestCaseS377ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S378");
        }
        
        private void AppInstanceIdTestCaseS377ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S378");
        }
        
        private void AppInstanceIdTestCaseS377ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S378");
        }
        #endregion
        
        #region Test Starting in S385
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS385() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS385");
            this.Manager.Comment("reaching state \'S385\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp70;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp70);
            this.Manager.AddReturn(ReadConfigInfo, null, temp70);
            this.Manager.Comment("reaching state \'S386\'");
            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS385ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS385ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS385ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS385ReadConfigChecker3)));
            if ((temp71 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label35;
            }
            if ((temp71 == 1)) {
                AppInstanceIdTestCaseS34();
                goto label35;
            }
            if ((temp71 == 2)) {
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS168();
                goto label35;
            }
            if ((temp71 == 3)) {
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS385ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S386");
        }
        
        private void AppInstanceIdTestCaseS385ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S386");
        }
        
        private void AppInstanceIdTestCaseS385ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S386");
        }
        
        private void AppInstanceIdTestCaseS385ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S386");
        }
        #endregion
        
        #region Test Starting in S393
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS393() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS393");
            this.Manager.Comment("reaching state \'S393\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp72;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp72);
            this.Manager.AddReturn(ReadConfigInfo, null, temp72);
            this.Manager.Comment("reaching state \'S394\'");
            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS393ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS393ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS393ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS393ReadConfigChecker3)));
            if ((temp73 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label36;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label36;
            }
            if ((temp73 == 2)) {
                this.Manager.Comment("reaching state \'S398\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S399\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,ReconnectDurable,Sam" +
                        "eShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label36;
            }
            if ((temp73 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS393ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S394");
        }
        
        private void AppInstanceIdTestCaseS393ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S394");
        }
        
        private void AppInstanceIdTestCaseS393ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S394");
        }
        
        private void AppInstanceIdTestCaseS393ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S394");
        }
        #endregion
        
        #region Test Starting in S401
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS401() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS401");
            this.Manager.Comment("reaching state \'S401\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp74;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp74);
            this.Manager.AddReturn(ReadConfigInfo, null, temp74);
            this.Manager.Comment("reaching state \'S402\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS401ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS401ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS401ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS401ReadConfigChecker3)));
            if ((temp75 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label37;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS17();
                goto label37;
            }
            if ((temp75 == 2)) {
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S407\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,DifferentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label37;
            }
            if ((temp75 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS401ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S402");
        }
        
        private void AppInstanceIdTestCaseS401ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S402");
        }
        
        private void AppInstanceIdTestCaseS401ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S402");
        }
        
        private void AppInstanceIdTestCaseS401ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S402");
        }
        #endregion
        
        #region Test Starting in S409
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS409() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS409");
            this.Manager.Comment("reaching state \'S409\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S410\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS409ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS409ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS409ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS409ReadConfigChecker3)));
            if ((temp77 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label38;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label38;
            }
            if ((temp77 == 2)) {
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S415\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,DifferentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label38;
            }
            if ((temp77 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS409ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S410");
        }
        
        private void AppInstanceIdTestCaseS409ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S410");
        }
        
        private void AppInstanceIdTestCaseS409ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S410");
        }
        
        private void AppInstanceIdTestCaseS409ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S410");
        }
        #endregion
        
        #region Test Starting in S417
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS417() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS417");
            this.Manager.Comment("reaching state \'S417\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp78);
            this.Manager.AddReturn(ReadConfigInfo, null, temp78);
            this.Manager.Comment("reaching state \'S418\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS417ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS417ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS417ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS417ReadConfigChecker3)));
            if ((temp79 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label39;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label39;
            }
            if ((temp79 == 2)) {
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S424\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label39;
            }
            if ((temp79 == 3)) {
                AppInstanceIdTestCaseS43();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS417ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S418");
        }
        
        private void AppInstanceIdTestCaseS417ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S418");
        }
        
        private void AppInstanceIdTestCaseS417ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S418");
        }
        
        private void AppInstanceIdTestCaseS417ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S418");
        }
        #endregion
        
        #region Test Starting in S425
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS425() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS425");
            this.Manager.Comment("reaching state \'S425\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp80;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp80);
            this.Manager.AddReturn(ReadConfigInfo, null, temp80);
            this.Manager.Comment("reaching state \'S426\'");
            int temp81 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS425ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS425ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS425ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS425ReadConfigChecker3)));
            if ((temp81 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label40;
            }
            if ((temp81 == 1)) {
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label40;
            }
            if ((temp81 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label40;
            }
            if ((temp81 == 3)) {
                this.Manager.Comment("reaching state \'S430\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S431\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S432\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS425ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S426");
        }
        
        private void AppInstanceIdTestCaseS425ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S426");
        }
        
        private void AppInstanceIdTestCaseS425ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S426");
        }
        
        private void AppInstanceIdTestCaseS425ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S426");
        }
        #endregion
        
        #region Test Starting in S433
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS433() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS433");
            this.Manager.Comment("reaching state \'S433\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp82;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp82);
            this.Manager.AddReturn(ReadConfigInfo, null, temp82);
            this.Manager.Comment("reaching state \'S434\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS433ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS433ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS433ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS433ReadConfigChecker3)));
            if ((temp83 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label41;
            }
            if ((temp83 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label41;
            }
            if ((temp83 == 2)) {
                this.Manager.Comment("reaching state \'S435\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S436\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S437\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label41;
            }
            if ((temp83 == 3)) {
                this.Manager.Comment("reaching state \'S438\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S439\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S440\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS433ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S434");
        }
        
        private void AppInstanceIdTestCaseS433ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S434");
        }
        
        private void AppInstanceIdTestCaseS433ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S434");
        }
        
        private void AppInstanceIdTestCaseS433ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S434");
        }
        #endregion
        
        #region Test Starting in S441
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS441() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS441");
            this.Manager.Comment("reaching state \'S441\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp84;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp84);
            this.Manager.AddReturn(ReadConfigInfo, null, temp84);
            this.Manager.Comment("reaching state \'S442\'");
            int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS441ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS441ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS441ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS441ReadConfigChecker3)));
            if ((temp85 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label42;
            }
            if ((temp85 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label42;
            }
            if ((temp85 == 2)) {
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label42;
            }
            if ((temp85 == 3)) {
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S448\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS441ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S442");
        }
        
        private void AppInstanceIdTestCaseS441ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S442");
        }
        
        private void AppInstanceIdTestCaseS441ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S442");
        }
        
        private void AppInstanceIdTestCaseS441ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S442");
        }
        #endregion
        
        #region Test Starting in S449
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS449() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS449");
            this.Manager.Comment("reaching state \'S449\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp86;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp86);
            this.Manager.AddReturn(ReadConfigInfo, null, temp86);
            this.Manager.Comment("reaching state \'S450\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS449ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS449ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS449ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS449ReadConfigChecker3)));
            if ((temp87 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label43;
            }
            if ((temp87 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label43;
            }
            if ((temp87 == 2)) {
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S453\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS113();
                goto label43;
            }
            if ((temp87 == 3)) {
                this.Manager.Comment("reaching state \'S454\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S455\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S456\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS449ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S450");
        }
        
        private void AppInstanceIdTestCaseS449ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S450");
        }
        
        private void AppInstanceIdTestCaseS449ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S450");
        }
        
        private void AppInstanceIdTestCaseS449ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S450");
        }
        #endregion
        
        #region Test Starting in S457
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS457() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS457");
            this.Manager.Comment("reaching state \'S457\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp88;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp88);
            this.Manager.AddReturn(ReadConfigInfo, null, temp88);
            this.Manager.Comment("reaching state \'S458\'");
            int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS457ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS457ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS457ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS457ReadConfigChecker3)));
            if ((temp89 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label44;
            }
            if ((temp89 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label44;
            }
            if ((temp89 == 2)) {
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S461\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label44;
            }
            if ((temp89 == 3)) {
                this.Manager.Comment("reaching state \'S462\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurableThenDiscon" +
                        "nect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S463\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S464\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,ReconnectD" +
                        "urable,SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS457ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S458");
        }
        
        private void AppInstanceIdTestCaseS457ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S458");
        }
        
        private void AppInstanceIdTestCaseS457ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S458");
        }
        
        private void AppInstanceIdTestCaseS457ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S458");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS46() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp90;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp90);
            this.Manager.AddReturn(ReadConfigInfo, null, temp90);
            this.Manager.Comment("reaching state \'S47\'");
            int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS46ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS46ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS46ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS46ReadConfigChecker3)));
            if ((temp91 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label45;
            }
            if ((temp91 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label45;
            }
            if ((temp91 == 2)) {
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label45;
            }
            if ((temp91 == 3)) {
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurableThenDiscon" +
                        "nect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,ReconnectD" +
                        "urable,SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS46ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S47");
        }
        
        private void AppInstanceIdTestCaseS46ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S47");
        }
        
        private void AppInstanceIdTestCaseS46ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S47");
        }
        
        private void AppInstanceIdTestCaseS46ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S47");
        }
        #endregion
        
        #region Test Starting in S465
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS465() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS465");
            this.Manager.Comment("reaching state \'S465\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp92;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp92);
            this.Manager.AddReturn(ReadConfigInfo, null, temp92);
            this.Manager.Comment("reaching state \'S466\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS465ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS465ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS465ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS465ReadConfigChecker3)));
            if ((temp93 == 0)) {
                AppInstanceIdTestCaseS116();
                goto label46;
            }
            if ((temp93 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label46;
            }
            if ((temp93 == 2)) {
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb21.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS214();
                goto label46;
            }
            if ((temp93 == 3)) {
                this.Manager.Comment("reaching state \'S470\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S471\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S472\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS465ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S466");
        }
        
        private void AppInstanceIdTestCaseS465ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S466");
        }
        
        private void AppInstanceIdTestCaseS465ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S466");
        }
        
        private void AppInstanceIdTestCaseS465ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S466");
        }
        #endregion
        
        #region Test Starting in S473
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS473() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS473");
            this.Manager.Comment("reaching state \'S473\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp94);
            this.Manager.AddReturn(ReadConfigInfo, null, temp94);
            this.Manager.Comment("reaching state \'S474\'");
            int temp95 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS473ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS473ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS473ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS473ReadConfigChecker3)));
            if ((temp95 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label47;
            }
            if ((temp95 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label47;
            }
            if ((temp95 == 2)) {
                this.Manager.Comment("reaching state \'S475\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S476\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S477\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS302();
                goto label47;
            }
            if ((temp95 == 3)) {
                this.Manager.Comment("reaching state \'S478\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S479\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S480\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS481();
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS473ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S474");
        }
        
        private void AppInstanceIdTestCaseS473ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S474");
        }
        
        private void AppInstanceIdTestCaseS473ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S474");
        }
        
        private void AppInstanceIdTestCaseS473ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S474");
        }
        
        private void AppInstanceIdTestCaseS481() {
            this.Manager.Comment("reaching state \'S481\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.OpenRequestInfo, null, new OpenRequestDelegate1(this.AppInstanceIdTestCaseS473OpenRequestChecker)));
            this.Manager.Comment("reaching state \'S482\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS473OpenResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S483\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(AppInstanceIdTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.AppInstanceIdTestCaseS473OpenResponseChecker)));
            }
        }
        
        private void AppInstanceIdTestCaseS473OpenRequestChecker() {
            this.Manager.Comment("checking step \'return OpenRequest\'");
        }
        
        private void AppInstanceIdTestCaseS473OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus status) {
            this.Manager.Comment("checking step \'event OpenResponse(OpenNotClosed)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.OpenStatus)(1)), status, "status of OpenResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open exists.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
        }
        #endregion
        
        #region Test Starting in S484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS484() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS484");
            this.Manager.Comment("reaching state \'S484\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp96;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp96);
            this.Manager.AddReturn(ReadConfigInfo, null, temp96);
            this.Manager.Comment("reaching state \'S485\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS484ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS484ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS484ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS484ReadConfigChecker3)));
            if ((temp97 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label48;
            }
            if ((temp97 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label48;
            }
            if ((temp97 == 2)) {
                this.Manager.Comment("reaching state \'S486\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S487\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S488\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label48;
            }
            if ((temp97 == 3)) {
                this.Manager.Comment("reaching state \'S489\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S490\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S491\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS481();
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS484ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S485");
        }
        
        private void AppInstanceIdTestCaseS484ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S485");
        }
        
        private void AppInstanceIdTestCaseS484ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S485");
        }
        
        private void AppInstanceIdTestCaseS484ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S485");
        }
        #endregion
        
        #region Test Starting in S492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS492() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS492");
            this.Manager.Comment("reaching state \'S492\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp98;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp98);
            this.Manager.AddReturn(ReadConfigInfo, null, temp98);
            this.Manager.Comment("reaching state \'S493\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS492ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS492ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS492ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS492ReadConfigChecker3)));
            if ((temp99 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label49;
            }
            if ((temp99 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label49;
            }
            if ((temp99 == 2)) {
                this.Manager.Comment("reaching state \'S494\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S495\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S496\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,SameShare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label49;
            }
            if ((temp99 == 3)) {
                this.Manager.Comment("reaching state \'S497\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S498\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS481();
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS492ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S493");
        }
        
        private void AppInstanceIdTestCaseS492ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S493");
        }
        
        private void AppInstanceIdTestCaseS492ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S493");
        }
        
        private void AppInstanceIdTestCaseS492ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S493");
        }
        #endregion
        
        #region Test Starting in S500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS500() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS500");
            this.Manager.Comment("reaching state \'S500\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp100);
            this.Manager.AddReturn(ReadConfigInfo, null, temp100);
            this.Manager.Comment("reaching state \'S501\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS500ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS500ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS500ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS500ReadConfigChecker3)));
            if ((temp101 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label50;
            }
            if ((temp101 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label50;
            }
            if ((temp101 == 2)) {
                this.Manager.Comment("reaching state \'S502\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S503\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,SameShare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS11();
                goto label50;
            }
            if ((temp101 == 3)) {
                this.Manager.Comment("reaching state \'S505\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S506\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S507\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS481();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS500ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S501");
        }
        
        private void AppInstanceIdTestCaseS500ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S501");
        }
        
        private void AppInstanceIdTestCaseS500ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S501");
        }
        
        private void AppInstanceIdTestCaseS500ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S501");
        }
        #endregion
        
        #region Test Starting in S508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS508() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS508");
            this.Manager.Comment("reaching state \'S508\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp102;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp102);
            this.Manager.AddReturn(ReadConfigInfo, null, temp102);
            this.Manager.Comment("reaching state \'S509\'");
            int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS508ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS508ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS508ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS508ReadConfigChecker3)));
            if ((temp103 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label51;
            }
            if ((temp103 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label51;
            }
            if ((temp103 == 2)) {
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S512\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label51;
            }
            if ((temp103 == 3)) {
                this.Manager.Comment("reaching state \'S513\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S514\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S515\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS481();
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS508ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S509");
        }
        
        private void AppInstanceIdTestCaseS508ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S509");
        }
        
        private void AppInstanceIdTestCaseS508ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S509");
        }
        
        private void AppInstanceIdTestCaseS508ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S509");
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS516() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS516");
            this.Manager.Comment("reaching state \'S516\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp104;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp104);
            this.Manager.AddReturn(ReadConfigInfo, null, temp104);
            this.Manager.Comment("reaching state \'S517\'");
            int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS516ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS516ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS516ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS516ReadConfigChecker3)));
            if ((temp105 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label52;
            }
            if ((temp105 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label52;
            }
            if ((temp105 == 2)) {
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label52;
            }
            if ((temp105 == 3)) {
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S522\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S523\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS481();
                goto label52;
            }
            throw new InvalidOperationException("never reached");
        label52:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS516ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S517");
        }
        
        private void AppInstanceIdTestCaseS516ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S517");
        }
        
        private void AppInstanceIdTestCaseS516ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S517");
        }
        
        private void AppInstanceIdTestCaseS516ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S517");
        }
        #endregion
        
        #region Test Starting in S524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS524() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS524");
            this.Manager.Comment("reaching state \'S524\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp106;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp106);
            this.Manager.AddReturn(ReadConfigInfo, null, temp106);
            this.Manager.Comment("reaching state \'S525\'");
            int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS524ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS524ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS524ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS524ReadConfigChecker3)));
            if ((temp107 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label53;
            }
            if ((temp107 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label53;
            }
            if ((temp107 == 2)) {
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS146();
                goto label53;
            }
            if ((temp107 == 3)) {
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS5();
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS524ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S525");
        }
        
        private void AppInstanceIdTestCaseS524ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S525");
        }
        
        private void AppInstanceIdTestCaseS524ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S525");
        }
        
        private void AppInstanceIdTestCaseS524ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S525");
        }
        #endregion
        
        #region Test Starting in S532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS532() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS532");
            this.Manager.Comment("reaching state \'S532\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp108;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp108);
            this.Manager.AddReturn(ReadConfigInfo, null, temp108);
            this.Manager.Comment("reaching state \'S533\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS532ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS532ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS532ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS532ReadConfigChecker3)));
            if ((temp109 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label54;
            }
            if ((temp109 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label54;
            }
            if ((temp109 == 2)) {
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S536\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS146();
                goto label54;
            }
            if ((temp109 == 3)) {
                this.Manager.Comment("reaching state \'S537\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS532ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S533");
        }
        
        private void AppInstanceIdTestCaseS532ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S533");
        }
        
        private void AppInstanceIdTestCaseS532ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S533");
        }
        
        private void AppInstanceIdTestCaseS532ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S533");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS54() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS54");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp110;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp110);
            this.Manager.AddReturn(ReadConfigInfo, null, temp110);
            this.Manager.Comment("reaching state \'S55\'");
            int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS54ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS54ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS54ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS54ReadConfigChecker3)));
            if ((temp111 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label55;
            }
            if ((temp111 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label55;
            }
            if ((temp111 == 2)) {
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS37();
                goto label55;
            }
            if ((temp111 == 3)) {
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurableThenDiscon" +
                        "nect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,DifferentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS54ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S55");
        }
        
        private void AppInstanceIdTestCaseS54ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S55");
        }
        
        private void AppInstanceIdTestCaseS54ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S55");
        }
        
        private void AppInstanceIdTestCaseS54ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S55");
        }
        #endregion
        
        #region Test Starting in S540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS540() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS540");
            this.Manager.Comment("reaching state \'S540\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp112;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp112);
            this.Manager.AddReturn(ReadConfigInfo, null, temp112);
            this.Manager.Comment("reaching state \'S541\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS540ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS540ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS540ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS540ReadConfigChecker3)));
            if ((temp113 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label56;
            }
            if ((temp113 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label56;
            }
            if ((temp113 == 2)) {
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S544\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS257();
                goto label56;
            }
            if ((temp113 == 3)) {
                this.Manager.Comment("reaching state \'S545\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S546\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S547\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is InvalidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS540ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S541");
        }
        
        private void AppInstanceIdTestCaseS540ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S541");
        }
        
        private void AppInstanceIdTestCaseS540ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S541");
        }
        
        private void AppInstanceIdTestCaseS540ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S541");
        }
        #endregion
        
        #region Test Starting in S548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS548() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS548");
            this.Manager.Comment("reaching state \'S548\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp114);
            this.Manager.AddReturn(ReadConfigInfo, null, temp114);
            this.Manager.Comment("reaching state \'S549\'");
            int temp115 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS548ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS548ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS548ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS548ReadConfigChecker3)));
            if ((temp115 == 0)) {
                AppInstanceIdTestCaseS40();
                goto label57;
            }
            if ((temp115 == 1)) {
                AppInstanceIdTestCaseS43();
                goto label57;
            }
            if ((temp115 == 2)) {
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb30.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S552\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS146();
                goto label57;
            }
            if ((temp115 == 3)) {
                this.Manager.Comment("reaching state \'S553\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S554\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label57;
            }
            throw new InvalidOperationException("never reached");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS548ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S549");
        }
        
        private void AppInstanceIdTestCaseS548ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S549");
        }
        
        private void AppInstanceIdTestCaseS548ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S549");
        }
        
        private void AppInstanceIdTestCaseS548ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S549");
        }
        #endregion
        
        #region Test Starting in S556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS556() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS556");
            this.Manager.Comment("reaching state \'S556\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp116;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp116);
            this.Manager.AddReturn(ReadConfigInfo, null, temp116);
            this.Manager.Comment("reaching state \'S557\'");
            int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS556ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS556ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS556ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS556ReadConfigChecker3)));
            if ((temp117 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label58;
            }
            if ((temp117 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label58;
            }
            if ((temp117 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label58;
            }
            if ((temp117 == 3)) {
                this.Manager.Comment("reaching state \'S558\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S559\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S560\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is NoAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS556ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S557");
        }
        
        private void AppInstanceIdTestCaseS556ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S557");
        }
        
        private void AppInstanceIdTestCaseS556ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S557");
        }
        
        private void AppInstanceIdTestCaseS556ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S557");
        }
        #endregion
        
        #region Test Starting in S561
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS561() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS561");
            this.Manager.Comment("reaching state \'S561\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp118;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp118);
            this.Manager.AddReturn(ReadConfigInfo, null, temp118);
            this.Manager.Comment("reaching state \'S562\'");
            int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS561ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS561ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS561ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS561ReadConfigChecker3)));
            if ((temp119 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label59;
            }
            if ((temp119 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label59;
            }
            if ((temp119 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label59;
            }
            if ((temp119 == 3)) {
                this.Manager.Comment("reaching state \'S563\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurableThenDiscon" +
                        "nect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S564\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,DifferentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS561ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S562");
        }
        
        private void AppInstanceIdTestCaseS561ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S562");
        }
        
        private void AppInstanceIdTestCaseS561ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S562");
        }
        
        private void AppInstanceIdTestCaseS561ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S562");
        }
        #endregion
        
        #region Test Starting in S566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS566() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS566");
            this.Manager.Comment("reaching state \'S566\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp120;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp120);
            this.Manager.AddReturn(ReadConfigInfo, null, temp120);
            this.Manager.Comment("reaching state \'S567\'");
            int temp121 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS566ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS566ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS566ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS566ReadConfigChecker3)));
            if ((temp121 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label60;
            }
            if ((temp121 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label60;
            }
            if ((temp121 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label60;
            }
            if ((temp121 == 3)) {
                this.Manager.Comment("reaching state \'S568\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S569\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S570\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,SameShare,InvalidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.InvalidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label60;
            }
            throw new InvalidOperationException("never reached");
        label60:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS566ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S567");
        }
        
        private void AppInstanceIdTestCaseS566ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S567");
        }
        
        private void AppInstanceIdTestCaseS566ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S567");
        }
        
        private void AppInstanceIdTestCaseS566ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S567");
        }
        #endregion
        
        #region Test Starting in S571
        [Microsoft.VisualStudio.TestTools.UnitTesting.Ignore]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS571() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS571");
            this.Manager.Comment("reaching state \'S571\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp122;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp122);
            this.Manager.AddReturn(ReadConfigInfo, null, temp122);
            this.Manager.Comment("reaching state \'S572\'");
            int temp123 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS571ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS571ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS571ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS571ReadConfigChecker3)));
            if ((temp123 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label61;
            }
            if ((temp123 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label61;
            }
            if ((temp123 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label61;
            }
            if ((temp123 == 3)) {
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS571ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S572");
        }
        
        private void AppInstanceIdTestCaseS571ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S572");
        }
        
        private void AppInstanceIdTestCaseS571ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S572");
        }
        
        private void AppInstanceIdTestCaseS571ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S572");
        }
        #endregion
        
        #region Test Starting in S576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS576() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS576");
            this.Manager.Comment("reaching state \'S576\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp124;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp124);
            this.Manager.AddReturn(ReadConfigInfo, null, temp124);
            this.Manager.Comment("reaching state \'S577\'");
            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS576ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS576ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS576ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS576ReadConfigChecker3)));
            if ((temp125 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label62;
            }
            if ((temp125 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label62;
            }
            if ((temp125 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label62;
            }
            if ((temp125 == 3)) {
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS5();
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS576ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S577");
        }
        
        private void AppInstanceIdTestCaseS576ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S577");
        }
        
        private void AppInstanceIdTestCaseS576ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S577");
        }
        
        private void AppInstanceIdTestCaseS576ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S577");
        }
        #endregion
        
        #region Test Starting in S581
        [Microsoft.VisualStudio.TestTools.UnitTesting.Ignore]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS581() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS581");
            this.Manager.Comment("reaching state \'S581\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp126;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp126);
            this.Manager.AddReturn(ReadConfigInfo, null, temp126);
            this.Manager.Comment("reaching state \'S582\'");
            int temp127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS581ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS581ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS581ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS581ReadConfigChecker3)));
            if ((temp127 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label63;
            }
            if ((temp127 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label63;
            }
            if ((temp127 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label63;
            }
            if ((temp127 == 3)) {
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,SameS" +
                        "hare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS581ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S582");
        }
        
        private void AppInstanceIdTestCaseS581ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S582");
        }
        
        private void AppInstanceIdTestCaseS581ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S582");
        }
        
        private void AppInstanceIdTestCaseS581ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S582");
        }
        #endregion
        
        #region Test Starting in S586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS586() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS586");
            this.Manager.Comment("reaching state \'S586\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp128;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp128);
            this.Manager.AddReturn(ReadConfigInfo, null, temp128);
            this.Manager.Comment("reaching state \'S587\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS586ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS586ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS586ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS586ReadConfigChecker3)));
            if ((temp129 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label64;
            }
            if ((temp129 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label64;
            }
            if ((temp129 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label64;
            }
            if ((temp129 == 3)) {
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,CreateDurableThenDisc" +
                        "onnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,SameShare,NoAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label64;
            }
            throw new InvalidOperationException("never reached");
        label64:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS586ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S587");
        }
        
        private void AppInstanceIdTestCaseS586ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S587");
        }
        
        private void AppInstanceIdTestCaseS586ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S587");
        }
        
        private void AppInstanceIdTestCaseS586ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S587");
        }
        #endregion
        
        #region Test Starting in S591
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS591() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS591");
            this.Manager.Comment("reaching state \'S591\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp130);
            this.Manager.AddReturn(ReadConfigInfo, null, temp130);
            this.Manager.Comment("reaching state \'S592\'");
            int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS591ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS591ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS591ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS591ReadConfigChecker3)));
            if ((temp131 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label65;
            }
            if ((temp131 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label65;
            }
            if ((temp131 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label65;
            }
            if ((temp131 == 3)) {
                this.Manager.Comment("reaching state \'S593\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,CreateDurableThenDisco" +
                        "nnect)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.CreateDurableThenDisconnect);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S594\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S595\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,ReconnectDurabl" +
                        "e,SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.ReconnectDurable, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.13: If the create request also includes the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context, the server MUST process the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context as specified in section 3.3.5.9.12, and this section MUST be skipped.""");
                this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 create context is included.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS31();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS591ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S592");
        }
        
        private void AppInstanceIdTestCaseS591ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S592");
        }
        
        private void AppInstanceIdTestCaseS591ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S592");
        }
        
        private void AppInstanceIdTestCaseS591ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S592");
        }
        #endregion
        
        #region Test Starting in S596
        [Microsoft.VisualStudio.TestTools.UnitTesting.Ignore]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS596() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS596");
            this.Manager.Comment("reaching state \'S596\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp132;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp132);
            this.Manager.AddReturn(ReadConfigInfo, null, temp132);
            this.Manager.Comment("reaching state \'S597\'");
            int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS596ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS596ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS596ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS596ReadConfigChecker3)));
            if ((temp133 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label66;
            }
            if ((temp133 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label66;
            }
            if ((temp133 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label66;
            }
            if ((temp133 == 3)) {
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S599\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S600\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS596ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S597");
        }
        
        private void AppInstanceIdTestCaseS596ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S597");
        }
        
        private void AppInstanceIdTestCaseS596ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S597");
        }
        
        private void AppInstanceIdTestCaseS596ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S597");
        }
        #endregion
        
        #region Test Starting in S601
        [Microsoft.VisualStudio.TestTools.UnitTesting.Ignore]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS601() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS601");
            this.Manager.Comment("reaching state \'S601\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp134;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp134);
            this.Manager.AddReturn(ReadConfigInfo, null, temp134);
            this.Manager.Comment("reaching state \'S602\'");
            int temp135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS601ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS601ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS601ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS601ReadConfigChecker3)));
            if ((temp135 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label67;
            }
            if ((temp135 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label67;
            }
            if ((temp135 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label67;
            }
            if ((temp135 == 3)) {
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS601ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S602");
        }
        
        private void AppInstanceIdTestCaseS601ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S602");
        }
        
        private void AppInstanceIdTestCaseS601ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S602");
        }
        
        private void AppInstanceIdTestCaseS601ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S602");
        }
        #endregion
        
        #region Test Starting in S606
        [Microsoft.VisualStudio.TestTools.UnitTesting.Ignore]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS606() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS606");
            this.Manager.Comment("reaching state \'S606\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp136;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp136);
            this.Manager.AddReturn(ReadConfigInfo, null, temp136);
            this.Manager.Comment("reaching state \'S607\'");
            int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS606ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS606ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS606ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS606ReadConfigChecker3)));
            if ((temp137 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label68;
            }
            if ((temp137 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label68;
            }
            if ((temp137 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label68;
            }
            if ((temp137 == 3)) {
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS606ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S607");
        }
        
        private void AppInstanceIdTestCaseS606ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S607");
        }
        
        private void AppInstanceIdTestCaseS606ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S607");
        }
        
        private void AppInstanceIdTestCaseS606ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S607");
        }
        #endregion
        
        #region Test Starting in S611
        [Microsoft.VisualStudio.TestTools.UnitTesting.Ignore]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS611() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS611");
            this.Manager.Comment("reaching state \'S611\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp138;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp138);
            this.Manager.AddReturn(ReadConfigInfo, null, temp138);
            this.Manager.Comment("reaching state \'S612\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS611ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS611ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS611ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS611ReadConfigChecker3)));
            if ((temp139 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label69;
            }
            if ((temp139 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label69;
            }
            if ((temp139 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label69;
            }
            if ((temp139 == 3)) {
                this.Manager.Comment("reaching state \'S613\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,NoContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S614\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS119();
                goto label69;
            }
            throw new InvalidOperationException("never reached");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS611ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S612");
        }
        
        private void AppInstanceIdTestCaseS611ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S612");
        }
        
        private void AppInstanceIdTestCaseS611ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S612");
        }
        
        private void AppInstanceIdTestCaseS611ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S612");
        }
        #endregion
        
        #region Test Starting in S616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS616() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS616");
            this.Manager.Comment("reaching state \'S616\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp140;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp140);
            this.Manager.AddReturn(ReadConfigInfo, null, temp140);
            this.Manager.Comment("reaching state \'S617\'");
            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS616ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS616ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS616ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS616ReadConfigChecker3)));
            if ((temp141 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label70;
            }
            if ((temp141 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label70;
            }
            if ((temp141 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label70;
            }
            if ((temp141 == 3)) {
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S619\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S620\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,OtherContext,Sa" +
                        "meShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS5();
                goto label70;
            }
            throw new InvalidOperationException("never reached");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS616ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S617");
        }
        
        private void AppInstanceIdTestCaseS616ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S617");
        }
        
        private void AppInstanceIdTestCaseS616ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S617");
        }
        
        private void AppInstanceIdTestCaseS616ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S617");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS62() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS62");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp142;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp142);
            this.Manager.AddReturn(ReadConfigInfo, null, temp142);
            this.Manager.Comment("reaching state \'S63\'");
            int temp143 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS62ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS62ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS62ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS62ReadConfigChecker3)));
            if ((temp143 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label71;
            }
            if ((temp143 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label71;
            }
            if ((temp143 == 2)) {
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label71;
            }
            if ((temp143 == 3)) {
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("executing step \'call OpenRequest(SameClientGuid,SamePathName,NoContext,SameShare," +
                        "ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is SameClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS62ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S63");
        }
        
        private void AppInstanceIdTestCaseS62ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S63");
        }
        
        private void AppInstanceIdTestCaseS62ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S63");
        }
        
        private void AppInstanceIdTestCaseS62ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S63");
        }
        #endregion
        
        #region Test Starting in S621
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS621() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS621");
            this.Manager.Comment("reaching state \'S621\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp144;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp144);
            this.Manager.AddReturn(ReadConfigInfo, null, temp144);
            this.Manager.Comment("reaching state \'S622\'");
            int temp145 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS621ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS621ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS621ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS621ReadConfigChecker3)));
            if ((temp145 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label72;
            }
            if ((temp145 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label72;
            }
            if ((temp145 == 2)) {
                AppInstanceIdTestCaseS43();
                goto label72;
            }
            if ((temp145 == 3)) {
                this.Manager.Comment("reaching state \'S623\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,AppInstanceIdIsZero,CreateDurable)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: Open.AppInstanceId MUST be set to AppInstanceId in the SMB2_C" +
                        "REATE_APP_INSTANCE_ID create context request if the create request includes the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 and SMB2_CREATE_APP_INSTANCE_ID create con" +
                        "texts.\"");
                this.Manager.Checkpoint("\"[TestInfo] The create request includes the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2" +
                        " and SMB2_CREATE_APP_INSTANCE_ID create contexts.\"");
                this.Manager.Comment("reaching state \'S624\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,CreateDurable,S" +
                        "ameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.13: The server MUST attempt to locate an Open in GlobalOpenTab" +
                        "le where:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tAppInstanceId in the request is equal to Open.AppInstanceId.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tTarget path name is equal to Open.PathName.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.TreeConnect.Share is equal to TreeConnect.Share.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.Session.Connection.ClientGuid is not equal to the current Connec" +
                        "tion.ClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] If an Open is found, the server MUST calculate the maximal access that the user, identified by Session.SecurityContext, has on the file being opened<277>. If the maximal access includes GENERIC_READ access, the server MUST close the open as specified in 3.3.4.17.""");
                this.Manager.Checkpoint("\"[TestInfo] The maximal access includes GENERIC_READ access. So open is closed.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS5();
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS621ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S622");
        }
        
        private void AppInstanceIdTestCaseS621ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S622");
        }
        
        private void AppInstanceIdTestCaseS621ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S622");
        }
        
        private void AppInstanceIdTestCaseS621ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S622");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS76() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS76");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp146;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp146);
            this.Manager.AddReturn(ReadConfigInfo, null, temp146);
            this.Manager.Comment("reaching state \'S77\'");
            int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS76ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS76ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS76ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS76ReadConfigChecker3)));
            if ((temp147 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label73;
            }
            if ((temp147 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label73;
            }
            if ((temp147 == 2)) {
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label73;
            }
            if ((temp147 == 3)) {
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S83\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,DifferentPathName,NoContext," +
                        "SameShare,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is DifferentPathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is SameShare.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS76ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S77");
        }
        
        private void AppInstanceIdTestCaseS76ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S77");
        }
        
        private void AppInstanceIdTestCaseS76ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S77");
        }
        
        private void AppInstanceIdTestCaseS76ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S77");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS84() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp148;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp148);
            this.Manager.AddReturn(ReadConfigInfo, null, temp148);
            this.Manager.Comment("reaching state \'S85\'");
            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS84ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS84ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS84ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS84ReadConfigChecker3)));
            if ((temp149 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label74;
            }
            if ((temp149 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label74;
            }
            if ((temp149 == 2)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label74;
            }
            if ((temp149 == 3)) {
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareDifferentLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType.DifferentShareDifferentLocal, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareDifferentLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label74;
            }
            throw new InvalidOperationException("never reached");
        label74:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS84ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S85");
        }
        
        private void AppInstanceIdTestCaseS84ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S85");
        }
        
        private void AppInstanceIdTestCaseS84ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S85");
        }
        
        private void AppInstanceIdTestCaseS84ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S85");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.AppInstanceId)]
        public void AppInstanceIdTestCaseS92() {
            this.Manager.BeginTest("AppInstanceIdTestCaseS92");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision temp150;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IAppInstanceIdAdapterInstance.ReadConfig(out temp150);
            this.Manager.AddReturn(ReadConfigInfo, null, temp150);
            this.Manager.Comment("reaching state \'S93\'");
            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS92ReadConfigChecker)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS92ReadConfigChecker1)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS92ReadConfigChecker2)), new ExpectedReturn(AppInstanceIdTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.AppInstanceIdTestCaseS92ReadConfigChecker3)));
            if ((temp151 == 0)) {
                AppInstanceIdTestCaseS34();
                goto label75;
            }
            if ((temp151 == 1)) {
                AppInstanceIdTestCaseS40();
                goto label75;
            }
            if ((temp151 == 2)) {
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect does not belong to SMB 3.x dialect family. So Open" +
                        ".AppInstanceId is not set.\"");
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[MS-SMB2] 2.2.13.2.13: The SMB2_CREATE_APP_INSTANCE_ID context is valid only for" +
                        " the SMB 3.x dialect family.\"");
                this.Manager.Checkpoint("\"[TestInfo] The dialect version of the server is Smb2002.\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS67();
                goto label75;
            }
            if ((temp151 == 3)) {
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,ValidAppInstanceId,OtherContext)\'");
                this.IAppInstanceIdAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType.OtherContext);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family, " +
                        "the server MUST initialize the following:\"");
                this.Manager.Checkpoint("\"[TestInfo] Server supports dialect Smb302.\"");
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("executing step \'call OpenRequest(DifferentClientGuid,SamePathName,NoContext,Diffe" +
                        "rentShareSameLocal,ValidAppInstanceId)\'");
                this.IAppInstanceIdAdapterInstance.OpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ClientGuidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.PathNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.CreateType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.ShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.AppInstanceId.AppInstanceIdType.ValidAppInstanceId);
                this.Manager.Checkpoint("\"[TestInfo] appInstanceIdType is ValidAppInstanceId.\"");
                this.Manager.Checkpoint("\"[TestInfo] pathNameType is SamePathName.\"");
                this.Manager.Checkpoint("\"[TestInfo] shareType is DifferentShareSameLocal.\"");
                this.Manager.Checkpoint("\"[TestInfo] clientGuidType is DifferentClientGuid.\"");
                this.Manager.Checkpoint("\"[TestInfo] All the above conditions do not match the requirement, so open will n" +
                        "ot be closed.\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(OpenRequestInfo, null);
                AppInstanceIdTestCaseS73();
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void AppInstanceIdTestCaseS92ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb30]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, dialectRevision, "dialectRevision of ReadConfig, state S93");
        }
        
        private void AppInstanceIdTestCaseS92ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb21]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, dialectRevision, "dialectRevision of ReadConfig, state S93");
        }
        
        private void AppInstanceIdTestCaseS92ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb2002]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, dialectRevision, "dialectRevision of ReadConfig, state S93");
        }
        
        private void AppInstanceIdTestCaseS92ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'return ReadConfig/[out Smb302]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, dialectRevision, "dialectRevision of ReadConfig, state S93");
        }
        #endregion
    }
}
