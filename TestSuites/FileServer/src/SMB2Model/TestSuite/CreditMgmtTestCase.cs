// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CreditMgmtTestCase : PtfTestClassBase {
        
        public CreditMgmtTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c);
        
        public delegate void CreditOperationResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c);
        
        public delegate void PreConstraintDelegate1();
        
        public delegate void ExpectDisconnectDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ICreditMgmtAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig).MakeByRefType());
        
        static System.Reflection.EventInfo CreditOperationResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ICreditMgmtAdapter), "CreditOperationResponse");
        
        static System.Reflection.EventInfo ExpectDisconnectInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ICreditMgmtAdapter), "ExpectDisconnect");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ICreditMgmtAdapter ICreditMgmtAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig> c1;
        
        private IVariable<int> creditResponse;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig> v2;
        
        private IVariable<int> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ICreditMgmtAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ICreditMgmtAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ICreditMgmtAdapter))));
            this.Manager.Subscribe(CreditOperationResponseInfo, this.ICreditMgmtAdapterInstance);
            this.Manager.Subscribe(ExpectDisconnectInfo, this.ICreditMgmtAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>("c1");
            this.creditResponse = this.Manager.CreateVariable<int>("creditResponse");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS0() {
            this.Manager.BeginTest("CreditMgmtTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS0ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS0ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS0ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS0ReadConfigChecker3)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)));
                if ((temp3 == 0)) {
                    this.Manager.Comment("reaching state \'S13\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S14\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S15\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S16\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S17\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker1)));
                    if ((temp1 == 0)) {
                        CreditMgmtTestCaseS18();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        CreditMgmtTestCaseS19();
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker1)));
                label0:
;
                    goto label2;
                }
                if ((temp3 == 1)) {
                    this.Manager.Comment("reaching state \'S3\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S4\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S5\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S6\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S7\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker6)));
                    if ((temp2 == 0)) {
                        CreditMgmtTestCaseS10();
                        goto label1;
                    }
                    if ((temp2 == 1)) {
                        CreditMgmtTestCaseS11();
                        goto label1;
                    }
                    if ((temp2 == 2)) {
                        CreditMgmtTestCaseS12();
                        goto label1;
                    }
                    if ((temp2 == 3)) {
                        CreditMgmtTestCaseS8();
                        goto label1;
                    }
                    if ((temp2 == 4)) {
                        CreditMgmtTestCaseS9();
                        goto label1;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker6)));
                label1:
;
                    goto label2;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
            label2:
;
                goto label10;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S20\'");
                int temp6 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S21\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S22\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S24\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S25\'");
                    int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker8)));
                    if ((temp4 == 0)) {
                        CreditMgmtTestCaseS26();
                        goto label3;
                    }
                    if ((temp4 == 1)) {
                        CreditMgmtTestCaseS27();
                        goto label3;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker8)));
                label3:
;
                    goto label5;
                }
                if ((temp6 == 1)) {
                    this.Manager.Comment("reaching state \'S28\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S29\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S30\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S32\'");
                    int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker13)));
                    if ((temp5 == 0)) {
                        CreditMgmtTestCaseS33();
                        goto label4;
                    }
                    if ((temp5 == 1)) {
                        CreditMgmtTestCaseS34();
                        goto label4;
                    }
                    if ((temp5 == 2)) {
                        CreditMgmtTestCaseS35();
                        goto label4;
                    }
                    if ((temp5 == 3)) {
                        CreditMgmtTestCaseS36();
                        goto label4;
                    }
                    if ((temp5 == 4)) {
                        CreditMgmtTestCaseS37();
                        goto label4;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker13)));
                label4:
;
                    goto label5;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S20\'.");
            label5:
;
                goto label10;
            }
            if ((temp11 == 2)) {
                this.Manager.Comment("reaching state \'S38\'");
                int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
                if ((temp9 == 0)) {
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S43\'");
                    int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker15)));
                    if ((temp7 == 0)) {
                        CreditMgmtTestCaseS44();
                        goto label6;
                    }
                    if ((temp7 == 1)) {
                        CreditMgmtTestCaseS45();
                        goto label6;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker15)));
                label6:
;
                    goto label8;
                }
                if ((temp9 == 1)) {
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S50\'");
                    int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker16)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker17)));
                    if ((temp8 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label7;
                    }
                    if ((temp8 == 1)) {
                        CreditMgmtTestCaseS52();
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker16)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker17)));
                label7:
;
                    goto label8;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S38\'.");
            label8:
;
                goto label10;
            }
            if ((temp11 == 3)) {
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                        "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S57\'");
                int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker18)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker19)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker20)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker21)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker22)));
                if ((temp10 == 0)) {
                    CreditMgmtTestCaseS58();
                    goto label9;
                }
                if ((temp10 == 1)) {
                    CreditMgmtTestCaseS59();
                    goto label9;
                }
                if ((temp10 == 2)) {
                    CreditMgmtTestCaseS60();
                    goto label9;
                }
                if ((temp10 == 3)) {
                    CreditMgmtTestCaseS61();
                    goto label9;
                }
                if ((temp10 == 4)) {
                    CreditMgmtTestCaseS62();
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker18)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker19)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker20)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker21)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS0CreditOperationResponseChecker22)));
            label9:
;
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S17");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S17");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S17");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS18() {
            this.Manager.Comment("reaching state \'S18\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S17");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S17");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S17");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS10() {
            this.Manager.Comment("reaching state \'S10\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S7");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S7");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S7");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS11() {
            this.Manager.Comment("reaching state \'S11\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS12() {
            this.Manager.Comment("reaching state \'S12\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
        }
        
        private void CreditMgmtTestCaseS8() {
            this.Manager.Comment("reaching state \'S8\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS9() {
            this.Manager.Comment("reaching state \'S9\'");
        }
        
        private void CreditMgmtTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S25");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S25");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S25");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S25");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S25");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S25");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS27() {
            this.Manager.Comment("reaching state \'S27\'");
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS33() {
            this.Manager.Comment("reaching state \'S33\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS34() {
            this.Manager.Comment("reaching state \'S34\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS35() {
            this.Manager.Comment("reaching state \'S35\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS36() {
            this.Manager.Comment("reaching state \'S36\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void CreditMgmtTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S43");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS44() {
            this.Manager.Comment("reaching state \'S44\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S43");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS45() {
            this.Manager.Comment("reaching state \'S45\'");
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S50");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S50");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S50");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S50");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S50");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S50");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
        }
        
        private void CreditMgmtTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS58() {
            this.Manager.Comment("reaching state \'S58\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS59() {
            this.Manager.Comment("reaching state \'S59\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS60() {
            this.Manager.Comment("reaching state \'S60\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S57");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS61() {
            this.Manager.Comment("reaching state \'S61\'");
        }
        
        private void CreditMgmtTestCaseS0CreditOperationResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S57");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S57");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S57");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS62() {
            this.Manager.Comment("reaching state \'S62\'");
        }
        #endregion
        
        #region Test Starting in S1011
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1011() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1011");
            this.Manager.Comment("reaching state \'S1011\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp12);
            this.Manager.AddReturn(ReadConfigInfo, null, temp12);
            this.Manager.Comment("reaching state \'S1012\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1011ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1011ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1011ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1011ReadConfigChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S1013\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S1014\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1015\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                        "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                this.Manager.Comment("reaching state \'S1016\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S1017\'");
                int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker4)));
                if ((temp13 == 0)) {
                    CreditMgmtTestCaseS58();
                    goto label11;
                }
                if ((temp13 == 1)) {
                    CreditMgmtTestCaseS59();
                    goto label11;
                }
                if ((temp13 == 2)) {
                    CreditMgmtTestCaseS60();
                    goto label11;
                }
                if ((temp13 == 3)) {
                    CreditMgmtTestCaseS61();
                    goto label11;
                }
                if ((temp13 == 4)) {
                    CreditMgmtTestCaseS62();
                    goto label11;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker4)));
            label11:
;
                goto label21;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S1018\'");
                int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S1019\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1020\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1021\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1022\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1023\'");
                    int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker6)));
                    if ((temp14 == 0)) {
                        CreditMgmtTestCaseS36();
                        goto label12;
                    }
                    if ((temp14 == 1)) {
                        CreditMgmtTestCaseS991();
                        goto label12;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker6)));
                label12:
;
                    goto label14;
                }
                if ((temp16 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label14;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1018\'.");
            label14:
;
                goto label21;
            }
            if ((temp23 == 2)) {
                CreditMgmtTestCaseS106();
                goto label21;
            }
            if ((temp23 == 3)) {
                CreditMgmtTestCaseS382();
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1011ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1012");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1017");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1017");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1017");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1017");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1017");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1017");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1017");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1017");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1012");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1023");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1023");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1023");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1023");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1023");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1023");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS991() {
            this.Manager.Comment("reaching state \'S991\'");
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS668() {
            this.Manager.Comment("reaching state \'S668\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
            this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
            this.Manager.Comment("reaching state \'S669\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S670\'");
            this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                    "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
            this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                    "dMid, creditCharge type is CreditChargeWithinBoundary\"");
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return CreditOperationRequest\'");
            this.Manager.Comment("reaching state \'S672\'");
            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker)));
            if ((temp15 == 0)) {
                this.Manager.Comment("reaching state \'S673\'");
                goto label13;
            }
            if ((temp15 == 1)) {
                CreditMgmtTestCaseS455();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker)));
        label13:
;
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S672");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S672");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS455() {
            this.Manager.Comment("reaching state \'S455\'");
        }
        
        private void CreditMgmtTestCaseS1011ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1012");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS106() {
            this.Manager.Comment("reaching state \'S106\'");
            int temp19 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
            if ((temp19 == 0)) {
                CreditMgmtTestCaseS107();
                goto label17;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                        "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                        "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                        "t\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                        "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                        "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S118\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker2)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S120\'");
                    goto label16;
                }
                if ((temp18 == 1)) {
                    CreditMgmtTestCaseS119();
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker2)));
            label16:
;
                goto label17;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S106\'.");
        label17:
;
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS107() {
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
            this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                    "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
            this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                    "dMid, creditCharge type is CreditChargeWithinBoundary\"");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("checking step \'return CreditOperationRequest\'");
            this.Manager.Comment("reaching state \'S111\'");
            int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker1)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S113\'");
                goto label15;
            }
            if ((temp17 == 1)) {
                CreditMgmtTestCaseS112();
                goto label15;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker1)));
        label15:
;
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S111");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S111");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS112() {
            this.Manager.Comment("reaching state \'S112\'");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S118");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S118");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS119() {
            this.Manager.Comment("reaching state \'S119\'");
        }
        
        private void CreditMgmtTestCaseS1011ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1012");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS382() {
            this.Manager.Comment("reaching state \'S382\'");
            int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                        "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                        "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                        "t\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                        "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                        "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S387\'");
                int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker3)));
                if ((temp20 == 0)) {
                    this.Manager.Comment("reaching state \'S389\'");
                    goto label18;
                }
                if ((temp20 == 1)) {
                    CreditMgmtTestCaseS388();
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker3)));
            label18:
;
                goto label20;
            }
            if ((temp22 == 1)) {
                CreditMgmtTestCaseS390();
                goto label20;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S382\'.");
        label20:
;
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S387");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S387");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S387");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS388() {
            this.Manager.Comment("reaching state \'S388\'");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS390() {
            this.Manager.Comment("reaching state \'S390\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
            this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
            this.Manager.Comment("reaching state \'S391\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S392\'");
            this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                    "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
            this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                    "dMid, creditCharge type is CreditChargeWithinBoundary\"");
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return CreditOperationRequest\'");
            this.Manager.Comment("reaching state \'S394\'");
            int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker4)));
            if ((temp21 == 0)) {
                this.Manager.Comment("reaching state \'S396\'");
                goto label19;
            }
            if ((temp21 == 1)) {
                CreditMgmtTestCaseS395();
                goto label19;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1011CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1011ExpectDisconnectChecker4)));
        label19:
;
        }
        
        private void CreditMgmtTestCaseS1011CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1011ExpectDisconnectChecker4() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS395() {
            this.Manager.Comment("reaching state \'S395\'");
        }
        #endregion
        
        #region Test Starting in S1024
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1024() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1024");
            this.Manager.Comment("reaching state \'S1024\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S1025\'");
            int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1024ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1024ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1024ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1024ReadConfigChecker3)));
            if ((temp28 == 0)) {
                this.Manager.Comment("reaching state \'S1026\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S1027\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1028\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                        "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Comment("reaching state \'S1029\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S1030\'");
                int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker4)));
                if ((temp25 == 0)) {
                    CreditMgmtTestCaseS58();
                    goto label22;
                }
                if ((temp25 == 1)) {
                    CreditMgmtTestCaseS59();
                    goto label22;
                }
                if ((temp25 == 2)) {
                    CreditMgmtTestCaseS60();
                    goto label22;
                }
                if ((temp25 == 3)) {
                    CreditMgmtTestCaseS61();
                    goto label22;
                }
                if ((temp25 == 4)) {
                    CreditMgmtTestCaseS62();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker4)));
            label22:
;
                goto label25;
            }
            if ((temp28 == 1)) {
                this.Manager.Comment("reaching state \'S1031\'");
                int temp27 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)));
                if ((temp27 == 0)) {
                    this.Manager.Comment("reaching state \'S1032\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1033\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1034\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1035\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1036\'");
                    int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker6)));
                    if ((temp26 == 0)) {
                        CreditMgmtTestCaseS36();
                        goto label23;
                    }
                    if ((temp26 == 1)) {
                        CreditMgmtTestCaseS991();
                        goto label23;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1024CreditOperationResponseChecker6)));
                label23:
;
                    goto label24;
                }
                if ((temp27 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label24;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1031\'.");
            label24:
;
                goto label25;
            }
            if ((temp28 == 2)) {
                CreditMgmtTestCaseS106();
                goto label25;
            }
            if ((temp28 == 3)) {
                CreditMgmtTestCaseS382();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1024ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1025");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1030");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1030");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1030");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1030");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1030");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1030");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1030");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1030");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1024ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1025");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1036");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1036");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1036");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1024CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1036");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1036");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1036");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1024ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1025");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1024ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1025");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1037
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1037() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1037");
            this.Manager.Comment("reaching state \'S1037\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp29;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp29);
            this.Manager.AddReturn(ReadConfigInfo, null, temp29);
            this.Manager.Comment("reaching state \'S1038\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1037ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1037ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1037ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1037ReadConfigChecker3)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S1039\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S1040\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1041\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                        "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                        "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                        "nnection\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                        "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                this.Manager.Comment("reaching state \'S1042\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S1043\'");
                int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1037ExpectDisconnectChecker2)));
                if ((temp30 == 0)) {
                    this.Manager.Comment("reaching state \'S1045\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1037ExpectDisconnectChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S1046\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1037ExpectDisconnectChecker)));
                    }
                    goto label26;
                }
                if ((temp30 == 1)) {
                    CreditMgmtTestCaseS930();
                    goto label26;
                }
                if ((temp30 == 2)) {
                    this.Manager.Comment("reaching state \'S1044\'");
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1037ExpectDisconnectChecker2)));
            label26:
;
                goto label29;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S1047\'");
                int temp32 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S1048\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1049\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1050\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1051\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1052\'");
                    int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker6)));
                    if ((temp31 == 0)) {
                        CreditMgmtTestCaseS33();
                        goto label27;
                    }
                    if ((temp31 == 1)) {
                        CreditMgmtTestCaseS34();
                        goto label27;
                    }
                    if ((temp31 == 2)) {
                        CreditMgmtTestCaseS35();
                        goto label27;
                    }
                    if ((temp31 == 3)) {
                        CreditMgmtTestCaseS36();
                        goto label27;
                    }
                    if ((temp31 == 4)) {
                        CreditMgmtTestCaseS37();
                        goto label27;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1037CreditOperationResponseChecker6)));
                label27:
;
                    goto label28;
                }
                if ((temp32 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label28;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1047\'.");
            label28:
;
                goto label29;
            }
            if ((temp33 == 2)) {
                CreditMgmtTestCaseS106();
                goto label29;
            }
            if ((temp33 == 3)) {
                CreditMgmtTestCaseS382();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1037ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1038");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1043");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1043");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1043");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1037ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1043");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1043");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1043");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS930() {
            this.Manager.Comment("reaching state \'S930\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1037ExpectDisconnectChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S931\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1037ExpectDisconnectChecker1)));
            }
        }
        
        private void CreditMgmtTestCaseS1037ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1037ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1037ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1038");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1037CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1037ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1038");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1037ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1038");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1053
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1053() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1053");
            this.Manager.Comment("reaching state \'S1053\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp34);
            this.Manager.AddReturn(ReadConfigInfo, null, temp34);
            this.Manager.Comment("reaching state \'S1054\'");
            int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1053ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1053ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1053ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1053ReadConfigChecker3)));
            if ((temp38 == 0)) {
                this.Manager.Comment("reaching state \'S1055\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S1056\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1057\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                        "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Comment("reaching state \'S1058\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S1059\'");
                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker4)));
                if ((temp35 == 0)) {
                    CreditMgmtTestCaseS58();
                    goto label30;
                }
                if ((temp35 == 1)) {
                    CreditMgmtTestCaseS59();
                    goto label30;
                }
                if ((temp35 == 2)) {
                    CreditMgmtTestCaseS60();
                    goto label30;
                }
                if ((temp35 == 3)) {
                    CreditMgmtTestCaseS61();
                    goto label30;
                }
                if ((temp35 == 4)) {
                    CreditMgmtTestCaseS62();
                    goto label30;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker4)));
            label30:
;
                goto label33;
            }
            if ((temp38 == 1)) {
                CreditMgmtTestCaseS106();
                goto label33;
            }
            if ((temp38 == 2)) {
                this.Manager.Comment("reaching state \'S1060\'");
                int temp37 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
                if ((temp37 == 0)) {
                    this.Manager.Comment("reaching state \'S1061\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1062\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1063\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1064\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1065\'");
                    int temp36 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker9)));
                    if ((temp36 == 0)) {
                        CreditMgmtTestCaseS33();
                        goto label31;
                    }
                    if ((temp36 == 1)) {
                        CreditMgmtTestCaseS34();
                        goto label31;
                    }
                    if ((temp36 == 2)) {
                        CreditMgmtTestCaseS35();
                        goto label31;
                    }
                    if ((temp36 == 3)) {
                        CreditMgmtTestCaseS36();
                        goto label31;
                    }
                    if ((temp36 == 4)) {
                        CreditMgmtTestCaseS37();
                        goto label31;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1053CreditOperationResponseChecker9)));
                label31:
;
                    goto label32;
                }
                if ((temp37 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label32;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1060\'.");
            label32:
;
                goto label33;
            }
            if ((temp38 == 3)) {
                CreditMgmtTestCaseS382();
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1053ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1054");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1059");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1059");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1059");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1059");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1054");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1053ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1054");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1065");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1065");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1065");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1065");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1053CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1065");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1065");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1053ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1054");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1066
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1066() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1066");
            this.Manager.Comment("reaching state \'S1066\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp39;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp39);
            this.Manager.AddReturn(ReadConfigInfo, null, temp39);
            this.Manager.Comment("reaching state \'S1067\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1066ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1066ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1066ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1066ReadConfigChecker3)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S1068\'");
                int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
                if ((temp41 == 0)) {
                    this.Manager.Comment("reaching state \'S1069\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1070\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1071\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1072\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1073\'");
                    int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker4)));
                    if ((temp40 == 0)) {
                        CreditMgmtTestCaseS33();
                        goto label34;
                    }
                    if ((temp40 == 1)) {
                        CreditMgmtTestCaseS34();
                        goto label34;
                    }
                    if ((temp40 == 2)) {
                        CreditMgmtTestCaseS35();
                        goto label34;
                    }
                    if ((temp40 == 3)) {
                        CreditMgmtTestCaseS36();
                        goto label34;
                    }
                    if ((temp40 == 4)) {
                        CreditMgmtTestCaseS37();
                        goto label34;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker4)));
                label34:
;
                    goto label35;
                }
                if ((temp41 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label35;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1068\'.");
            label35:
;
                goto label39;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S1074\'");
                int temp43 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)));
                if ((temp43 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label37;
                }
                if ((temp43 == 1)) {
                    this.Manager.Comment("reaching state \'S1075\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1076\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1077\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1078\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1079\'");
                    int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker6)));
                    if ((temp42 == 0)) {
                        CreditMgmtTestCaseS44();
                        goto label36;
                    }
                    if ((temp42 == 1)) {
                        CreditMgmtTestCaseS45();
                        goto label36;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker6)));
                label36:
;
                    goto label37;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1074\'.");
            label37:
;
                goto label39;
            }
            if ((temp45 == 2)) {
                CreditMgmtTestCaseS382();
                goto label39;
            }
            if ((temp45 == 3)) {
                CreditMgmtTestCaseS99();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1066ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1067");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1073");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1073");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1073");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1073");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1073");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1073");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1066ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1067");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1079");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1079");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1079");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1079");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1079");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1079");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1067");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS1066ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1067");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS99() {
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
            this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                    "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
            this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                    "dMid, creditCharge type is CreditChargeWithinBoundary\"");
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("checking step \'return CreditOperationRequest\'");
            this.Manager.Comment("reaching state \'S103\'");
            int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1066ExpectDisconnectChecker)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S105\'");
                goto label38;
            }
            if ((temp44 == 1)) {
                CreditMgmtTestCaseS104();
                goto label38;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1066CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1066ExpectDisconnectChecker)));
        label38:
;
        }
        
        private void CreditMgmtTestCaseS1066CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S103");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1066ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS104() {
            this.Manager.Comment("reaching state \'S104\'");
        }
        #endregion
        
        #region Test Starting in S1080
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1080() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1080");
            this.Manager.Comment("reaching state \'S1080\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp46);
            this.Manager.AddReturn(ReadConfigInfo, null, temp46);
            this.Manager.Comment("reaching state \'S1081\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1080ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1080ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1080ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1080ReadConfigChecker3)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S1082\'");
                int temp48 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
                if ((temp48 == 0)) {
                    this.Manager.Comment("reaching state \'S1083\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1084\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1085\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1086\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1087\'");
                    int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker4)));
                    if ((temp47 == 0)) {
                        CreditMgmtTestCaseS150();
                        goto label40;
                    }
                    if ((temp47 == 1)) {
                        CreditMgmtTestCaseS272();
                        goto label40;
                    }
                    if ((temp47 == 2)) {
                        CreditMgmtTestCaseS273();
                        goto label40;
                    }
                    if ((temp47 == 3)) {
                        CreditMgmtTestCaseS274();
                        goto label40;
                    }
                    if ((temp47 == 4)) {
                        CreditMgmtTestCaseS275();
                        goto label40;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker4)));
                label40:
;
                    goto label41;
                }
                if ((temp48 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label41;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1082\'.");
            label41:
;
                goto label44;
            }
            if ((temp51 == 1)) {
                this.Manager.Comment("reaching state \'S1088\'");
                int temp50 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
                if ((temp50 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label43;
                }
                if ((temp50 == 1)) {
                    this.Manager.Comment("reaching state \'S1089\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1090\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1091\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1092\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1093\'");
                    int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker9)));
                    if ((temp49 == 0)) {
                        CreditMgmtTestCaseS45();
                        goto label42;
                    }
                    if ((temp49 == 1)) {
                        CreditMgmtTestCaseS645();
                        goto label42;
                    }
                    if ((temp49 == 2)) {
                        CreditMgmtTestCaseS646();
                        goto label42;
                    }
                    if ((temp49 == 3)) {
                        CreditMgmtTestCaseS647();
                        goto label42;
                    }
                    if ((temp49 == 4)) {
                        CreditMgmtTestCaseS648();
                        goto label42;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1080CreditOperationResponseChecker9)));
                label42:
;
                    goto label43;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1088\'.");
            label43:
;
                goto label44;
            }
            if ((temp51 == 2)) {
                CreditMgmtTestCaseS382();
                goto label44;
            }
            if ((temp51 == 3)) {
                CreditMgmtTestCaseS99();
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1080ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1081");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS150() {
            this.Manager.Comment("reaching state \'S150\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS272() {
            this.Manager.Comment("reaching state \'S272\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS273() {
            this.Manager.Comment("reaching state \'S273\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS274() {
            this.Manager.Comment("reaching state \'S274\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS275() {
            this.Manager.Comment("reaching state \'S275\'");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1080ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1081");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS645() {
            this.Manager.Comment("reaching state \'S645\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS646() {
            this.Manager.Comment("reaching state \'S646\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS647() {
            this.Manager.Comment("reaching state \'S647\'");
        }
        
        private void CreditMgmtTestCaseS1080CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1093");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS648() {
            this.Manager.Comment("reaching state \'S648\'");
        }
        
        private void CreditMgmtTestCaseS1080ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1081");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS1080ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1081");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1094
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1094() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1094");
            this.Manager.Comment("reaching state \'S1094\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp52;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp52);
            this.Manager.AddReturn(ReadConfigInfo, null, temp52);
            this.Manager.Comment("reaching state \'S1095\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1094ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1094ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1094ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1094ReadConfigChecker3)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S1096\'");
                int temp54 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
                if ((temp54 == 0)) {
                    this.Manager.Comment("reaching state \'S1097\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1098\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1099\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1100\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1101\'");
                    int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker4)));
                    if ((temp53 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label45;
                    }
                    if ((temp53 == 1)) {
                        CreditMgmtTestCaseS548();
                        goto label45;
                    }
                    if ((temp53 == 2)) {
                        CreditMgmtTestCaseS549();
                        goto label45;
                    }
                    if ((temp53 == 3)) {
                        CreditMgmtTestCaseS550();
                        goto label45;
                    }
                    if ((temp53 == 4)) {
                        CreditMgmtTestCaseS551();
                        goto label45;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker4)));
                label45:
;
                    goto label46;
                }
                if ((temp54 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label46;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1096\'.");
            label46:
;
                goto label49;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S1102\'");
                int temp56 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)));
                if ((temp56 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label48;
                }
                if ((temp56 == 1)) {
                    this.Manager.Comment("reaching state \'S1103\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1104\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1105\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                            "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S1106\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1107\'");
                    int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1094ExpectDisconnectChecker1)));
                    if ((temp55 == 0)) {
                        CreditMgmtTestCaseS1108();
                        goto label47;
                    }
                    if ((temp55 == 1)) {
                        CreditMgmtTestCaseS119();
                        goto label47;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1094CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1094ExpectDisconnectChecker1)));
                label47:
;
                    goto label48;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1102\'.");
            label48:
;
                goto label49;
            }
            if ((temp57 == 2)) {
                CreditMgmtTestCaseS382();
                goto label49;
            }
            if ((temp57 == 3)) {
                CreditMgmtTestCaseS99();
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1094ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1095");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1094CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS490() {
            this.Manager.Comment("reaching state \'S490\'");
        }
        
        private void CreditMgmtTestCaseS1094CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS548() {
            this.Manager.Comment("reaching state \'S548\'");
        }
        
        private void CreditMgmtTestCaseS1094CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS549() {
            this.Manager.Comment("reaching state \'S549\'");
        }
        
        private void CreditMgmtTestCaseS1094CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS550() {
            this.Manager.Comment("reaching state \'S550\'");
        }
        
        private void CreditMgmtTestCaseS1094CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1101");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS551() {
            this.Manager.Comment("reaching state \'S551\'");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1094ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1095");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1094CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S1107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1108() {
            this.Manager.Comment("reaching state \'S1108\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1094ExpectDisconnectChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1109\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1094ExpectDisconnectChecker)));
            }
        }
        
        private void CreditMgmtTestCaseS1094ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1094ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1094ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1095");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS1094ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1095");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1110() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1110");
            this.Manager.Comment("reaching state \'S1110\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp58;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp58);
            this.Manager.AddReturn(ReadConfigInfo, null, temp58);
            this.Manager.Comment("reaching state \'S1111\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1110ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1110ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1110ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1110ReadConfigChecker3)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S1112\'");
                int temp60 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
                if ((temp60 == 0)) {
                    this.Manager.Comment("reaching state \'S1113\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1114\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1115\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1116\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1117\'");
                    int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker4)));
                    if ((temp59 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label50;
                    }
                    if ((temp59 == 1)) {
                        CreditMgmtTestCaseS827();
                        goto label50;
                    }
                    if ((temp59 == 2)) {
                        CreditMgmtTestCaseS828();
                        goto label50;
                    }
                    if ((temp59 == 3)) {
                        CreditMgmtTestCaseS829();
                        goto label50;
                    }
                    if ((temp59 == 4)) {
                        CreditMgmtTestCaseS830();
                        goto label50;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker4)));
                label50:
;
                    goto label51;
                }
                if ((temp60 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label51;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1112\'.");
            label51:
;
                goto label54;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S1118\'");
                int temp62 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
                if ((temp62 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label53;
                }
                if ((temp62 == 1)) {
                    this.Manager.Comment("reaching state \'S1119\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1120\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1121\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1122\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1123\'");
                    int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker9)));
                    if ((temp61 == 0)) {
                        CreditMgmtTestCaseS45();
                        goto label52;
                    }
                    if ((temp61 == 1)) {
                        CreditMgmtTestCaseS645();
                        goto label52;
                    }
                    if ((temp61 == 2)) {
                        CreditMgmtTestCaseS646();
                        goto label52;
                    }
                    if ((temp61 == 3)) {
                        CreditMgmtTestCaseS647();
                        goto label52;
                    }
                    if ((temp61 == 4)) {
                        CreditMgmtTestCaseS648();
                        goto label52;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1110CreditOperationResponseChecker9)));
                label52:
;
                    goto label53;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1118\'.");
            label53:
;
                goto label54;
            }
            if ((temp63 == 2)) {
                CreditMgmtTestCaseS382();
                goto label54;
            }
            if ((temp63 == 3)) {
                CreditMgmtTestCaseS99();
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1110ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1117");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1117");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1117");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS769() {
            this.Manager.Comment("reaching state \'S769\'");
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS827() {
            this.Manager.Comment("reaching state \'S827\'");
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS828() {
            this.Manager.Comment("reaching state \'S828\'");
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS829() {
            this.Manager.Comment("reaching state \'S829\'");
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS830() {
            this.Manager.Comment("reaching state \'S830\'");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1110ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1110CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1110ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS1110ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1124() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1124");
            this.Manager.Comment("reaching state \'S1124\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S1125\'");
            int temp72 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1124ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1124ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1124ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1124ReadConfigChecker3)));
            if ((temp72 == 0)) {
                this.Manager.Comment("reaching state \'S1126\'");
                int temp66 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
                if ((temp66 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label56;
                }
                if ((temp66 == 1)) {
                    this.Manager.Comment("reaching state \'S1127\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1128\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1129\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Unav" +
                            "ailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S1130\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1131\'");
                    int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker)));
                    if ((temp65 == 0)) {
                        CreditMgmtTestCaseS1108();
                        goto label55;
                    }
                    if ((temp65 == 1)) {
                        this.Manager.Comment("reaching state \'S1132\'");
                        goto label55;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker)));
                label55:
;
                    goto label56;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1126\'.");
            label56:
;
                goto label62;
            }
            if ((temp72 == 1)) {
                this.Manager.Comment("reaching state \'S1133\'");
                int temp69 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
                if ((temp69 == 0)) {
                    this.Manager.Comment("reaching state \'S1134\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1135\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1136\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S1137\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1138\'");
                    int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker2)));
                    if ((temp67 == 0)) {
                        CreditMgmtTestCaseS1140();
                        goto label57;
                    }
                    if ((temp67 == 1)) {
                        this.Manager.Comment("reaching state \'S1139\'");
                        goto label57;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker2)));
                label57:
;
                    goto label59;
                }
                if ((temp69 == 1)) {
                    this.Manager.Comment("reaching state \'S1142\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1143\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1144\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1145\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1146\'");
                    int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker6)));
                    if ((temp68 == 0)) {
                        CreditMgmtTestCaseS10();
                        goto label58;
                    }
                    if ((temp68 == 1)) {
                        CreditMgmtTestCaseS11();
                        goto label58;
                    }
                    if ((temp68 == 2)) {
                        CreditMgmtTestCaseS12();
                        goto label58;
                    }
                    if ((temp68 == 3)) {
                        CreditMgmtTestCaseS8();
                        goto label58;
                    }
                    if ((temp68 == 4)) {
                        CreditMgmtTestCaseS9();
                        goto label58;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker6)));
                label58:
;
                    goto label59;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1133\'.");
            label59:
;
                goto label62;
            }
            if ((temp72 == 2)) {
                CreditMgmtTestCaseS667();
                goto label62;
            }
            if ((temp72 == 3)) {
                CreditMgmtTestCaseS99();
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1124ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S1131");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1131");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1124ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S1138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1140() {
            this.Manager.Comment("reaching state \'S1140\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S1141\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker1)));
            }
        }
        
        private void CreditMgmtTestCaseS1124ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1124ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1146");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1146");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1146");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS667() {
            this.Manager.Comment("reaching state \'S667\'");
            int temp71 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
            if ((temp71 == 0)) {
                CreditMgmtTestCaseS668();
                goto label61;
            }
            if ((temp71 == 1)) {
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                        "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                        "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                        "t\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                        "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                        "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S678\'");
                int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker3)));
                if ((temp70 == 0)) {
                    this.Manager.Comment("reaching state \'S680\'");
                    goto label60;
                }
                if ((temp70 == 1)) {
                    CreditMgmtTestCaseS679();
                    goto label60;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1124CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1124ExpectDisconnectChecker3)));
            label60:
;
                goto label61;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S667\'.");
        label61:
;
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1124CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S678");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S678");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S678");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1124ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS679() {
            this.Manager.Comment("reaching state \'S679\'");
        }
        
        private void CreditMgmtTestCaseS1124ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1147
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1147() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1147");
            this.Manager.Comment("reaching state \'S1147\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp73;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp73);
            this.Manager.AddReturn(ReadConfigInfo, null, temp73);
            this.Manager.Comment("reaching state \'S1148\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1147ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1147ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1147ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1147ReadConfigChecker3)));
            if ((temp79 == 0)) {
                this.Manager.Comment("reaching state \'S1149\'");
                int temp75 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)));
                if ((temp75 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label64;
                }
                if ((temp75 == 1)) {
                    this.Manager.Comment("reaching state \'S1150\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1151\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1152\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Vali" +
                            "dMid, creditCharge type is CreditChargeExceedBoundary\"");
                    this.Manager.Comment("reaching state \'S1153\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1154\'");
                    int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1147ExpectDisconnectChecker)));
                    if ((temp74 == 0)) {
                        CreditMgmtTestCaseS1108();
                        goto label63;
                    }
                    if ((temp74 == 1)) {
                        this.Manager.Comment("reaching state \'S1155\'");
                        goto label63;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1147ExpectDisconnectChecker)));
                label63:
;
                    goto label64;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1149\'.");
            label64:
;
                goto label68;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S1156\'");
                int temp78 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
                if ((temp78 == 0)) {
                    this.Manager.Comment("reaching state \'S1157\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1158\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1159\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S1160\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1161\'");
                    int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1147ExpectDisconnectChecker1)));
                    if ((temp76 == 0)) {
                        CreditMgmtTestCaseS1140();
                        goto label65;
                    }
                    if ((temp76 == 1)) {
                        this.Manager.Comment("reaching state \'S1162\'");
                        goto label65;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1147ExpectDisconnectChecker1)));
                label65:
;
                    goto label67;
                }
                if ((temp78 == 1)) {
                    this.Manager.Comment("reaching state \'S1163\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1164\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1165\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1166\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1167\'");
                    int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker3)));
                    if ((temp77 == 0)) {
                        CreditMgmtTestCaseS129();
                        goto label66;
                    }
                    if ((temp77 == 1)) {
                        CreditMgmtTestCaseS130();
                        goto label66;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1147CreditOperationResponseChecker3)));
                label66:
;
                    goto label67;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1156\'.");
            label67:
;
                goto label68;
            }
            if ((temp79 == 2)) {
                CreditMgmtTestCaseS667();
                goto label68;
            }
            if ((temp79 == 3)) {
                CreditMgmtTestCaseS99();
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1147ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1147CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S1154");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1147ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1147ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1147CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S1161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS1147ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1147CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1167");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1167");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1167");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS129() {
            this.Manager.Comment("reaching state \'S129\'");
        }
        
        private void CreditMgmtTestCaseS1147CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1167");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1167");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1167");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS130() {
            this.Manager.Comment("reaching state \'S130\'");
        }
        
        private void CreditMgmtTestCaseS1147ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1147ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1168() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1168");
            this.Manager.Comment("reaching state \'S1168\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp80;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp80);
            this.Manager.AddReturn(ReadConfigInfo, null, temp80);
            this.Manager.Comment("reaching state \'S1169\'");
            int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1168ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1168ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1168ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1168ReadConfigChecker3)));
            if ((temp85 == 0)) {
                this.Manager.Comment("reaching state \'S1170\'");
                int temp82 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)));
                if ((temp82 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label70;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S1171\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1172\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1173\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1174\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1175\'");
                    int temp81 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker1)));
                    if ((temp81 == 0)) {
                        CreditMgmtTestCaseS44();
                        goto label69;
                    }
                    if ((temp81 == 1)) {
                        CreditMgmtTestCaseS45();
                        goto label69;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker1)));
                label69:
;
                    goto label70;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1170\'.");
            label70:
;
                goto label73;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S1176\'");
                int temp84 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
                if ((temp84 == 0)) {
                    this.Manager.Comment("reaching state \'S1177\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1178\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1179\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1180\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1181\'");
                    int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker3)));
                    if ((temp83 == 0)) {
                        CreditMgmtTestCaseS18();
                        goto label71;
                    }
                    if ((temp83 == 1)) {
                        CreditMgmtTestCaseS19();
                        goto label71;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1168CreditOperationResponseChecker3)));
                label71:
;
                    goto label72;
                }
                if ((temp84 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label72;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1176\'.");
            label72:
;
                goto label73;
            }
            if ((temp85 == 2)) {
                CreditMgmtTestCaseS667();
                goto label73;
            }
            if ((temp85 == 3)) {
                CreditMgmtTestCaseS99();
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1168ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1169");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1168CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S1175");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1168CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S1175");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1168ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1169");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1168CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1181");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1181");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1181");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1168CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1181");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1181");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1181");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1168ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1169");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1168ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1169");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1182() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1182");
            this.Manager.Comment("reaching state \'S1182\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp86;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp86);
            this.Manager.AddReturn(ReadConfigInfo, null, temp86);
            this.Manager.Comment("reaching state \'S1183\'");
            int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1182ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1182ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1182ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1182ReadConfigChecker3)));
            if ((temp91 == 0)) {
                this.Manager.Comment("reaching state \'S1184\'");
                int temp88 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)));
                if ((temp88 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label75;
                }
                if ((temp88 == 1)) {
                    this.Manager.Comment("reaching state \'S1185\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1186\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1187\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1188\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1189\'");
                    int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker4)));
                    if ((temp87 == 0)) {
                        CreditMgmtTestCaseS45();
                        goto label74;
                    }
                    if ((temp87 == 1)) {
                        CreditMgmtTestCaseS645();
                        goto label74;
                    }
                    if ((temp87 == 2)) {
                        CreditMgmtTestCaseS646();
                        goto label74;
                    }
                    if ((temp87 == 3)) {
                        CreditMgmtTestCaseS647();
                        goto label74;
                    }
                    if ((temp87 == 4)) {
                        CreditMgmtTestCaseS648();
                        goto label74;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker4)));
                label74:
;
                    goto label75;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1184\'.");
            label75:
;
                goto label78;
            }
            if ((temp91 == 1)) {
                this.Manager.Comment("reaching state \'S1190\'");
                int temp90 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
                if ((temp90 == 0)) {
                    this.Manager.Comment("reaching state \'S1191\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1192\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1193\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S1194\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1195\'");
                    int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1182ExpectDisconnectChecker1)));
                    if ((temp89 == 0)) {
                        CreditMgmtTestCaseS1140();
                        goto label76;
                    }
                    if ((temp89 == 1)) {
                        this.Manager.Comment("reaching state \'S1197\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1182ExpectDisconnectChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1198\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1182ExpectDisconnectChecker)));
                        }
                        goto label76;
                    }
                    if ((temp89 == 2)) {
                        this.Manager.Comment("reaching state \'S1196\'");
                        goto label76;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1182CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS1182ExpectDisconnectChecker1)));
                label76:
;
                    goto label77;
                }
                if ((temp90 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label77;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1190\'.");
            label77:
;
                goto label78;
            }
            if ((temp91 == 2)) {
                CreditMgmtTestCaseS667();
                goto label78;
            }
            if ((temp91 == 3)) {
                CreditMgmtTestCaseS99();
                goto label78;
            }
            throw new InvalidOperationException("never reached");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1182ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1183");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker48() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1183");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1195");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1195");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1195");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1195");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1195");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1195");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1182ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS1182ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1182ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1183");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1182ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1183");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1199
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1199() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1199");
            this.Manager.Comment("reaching state \'S1199\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp92;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp92);
            this.Manager.AddReturn(ReadConfigInfo, null, temp92);
            this.Manager.Comment("reaching state \'S1200\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1199ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1199ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1199ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1199ReadConfigChecker3)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S1201\'");
                int temp94 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)));
                if ((temp94 == 0)) {
                    CreditMgmtTestCaseS107();
                    goto label80;
                }
                if ((temp94 == 1)) {
                    this.Manager.Comment("reaching state \'S1202\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1203\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1204\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1205\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1206\'");
                    int temp93 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker4)));
                    if ((temp93 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label79;
                    }
                    if ((temp93 == 1)) {
                        CreditMgmtTestCaseS475();
                        goto label79;
                    }
                    if ((temp93 == 2)) {
                        CreditMgmtTestCaseS476();
                        goto label79;
                    }
                    if ((temp93 == 3)) {
                        CreditMgmtTestCaseS477();
                        goto label79;
                    }
                    if ((temp93 == 4)) {
                        CreditMgmtTestCaseS478();
                        goto label79;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker4)));
                label79:
;
                    goto label80;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1201\'.");
            label80:
;
                goto label83;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S1207\'");
                int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S1208\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1209\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1210\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1211\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1212\'");
                    int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker9)));
                    if ((temp95 == 0)) {
                        CreditMgmtTestCaseS1213();
                        goto label81;
                    }
                    if ((temp95 == 1)) {
                        CreditMgmtTestCaseS1214();
                        goto label81;
                    }
                    if ((temp95 == 2)) {
                        CreditMgmtTestCaseS1215();
                        goto label81;
                    }
                    if ((temp95 == 3)) {
                        CreditMgmtTestCaseS1216();
                        goto label81;
                    }
                    if ((temp95 == 4)) {
                        CreditMgmtTestCaseS19();
                        goto label81;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1199CreditOperationResponseChecker9)));
                label81:
;
                    goto label82;
                }
                if ((temp96 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label82;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1207\'.");
            label82:
;
                goto label83;
            }
            if ((temp97 == 2)) {
                CreditMgmtTestCaseS667();
                goto label83;
            }
            if ((temp97 == 3)) {
                CreditMgmtTestCaseS99();
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1199ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1206");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1206");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS364() {
            this.Manager.Comment("reaching state \'S364\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS475() {
            this.Manager.Comment("reaching state \'S475\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS476() {
            this.Manager.Comment("reaching state \'S476\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS477() {
            this.Manager.Comment("reaching state \'S477\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS478() {
            this.Manager.Comment("reaching state \'S478\'");
        }
        
        private void CreditMgmtTestCaseS1199ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1213() {
            this.Manager.Comment("reaching state \'S1213\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1214() {
            this.Manager.Comment("reaching state \'S1214\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1215() {
            this.Manager.Comment("reaching state \'S1215\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1216() {
            this.Manager.Comment("reaching state \'S1216\'");
        }
        
        private void CreditMgmtTestCaseS1199CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1212");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1212");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1212");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1199ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1199ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S121
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS121() {
            this.Manager.BeginTest("CreditMgmtTestCaseS121");
            this.Manager.Comment("reaching state \'S121\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp98;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp98);
            this.Manager.AddReturn(ReadConfigInfo, null, temp98);
            this.Manager.Comment("reaching state \'S122\'");
            int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS121ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS121ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS121ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS121ReadConfigChecker3)));
            if ((temp105 == 0)) {
                CreditMgmtTestCaseS106();
                goto label90;
            }
            if ((temp105 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                int temp101 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)));
                if ((temp101 == 0)) {
                    this.Manager.Comment("reaching state \'S124\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S125\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S126\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S127\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S128\'");
                    int temp99 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker1)));
                    if ((temp99 == 0)) {
                        CreditMgmtTestCaseS129();
                        goto label84;
                    }
                    if ((temp99 == 1)) {
                        CreditMgmtTestCaseS130();
                        goto label84;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker1)));
                label84:
;
                    goto label86;
                }
                if ((temp101 == 1)) {
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S133\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeSetZero,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Unav" +
                            "ailableMid, creditCharge type is CreditChargeSetZero\"");
                    this.Manager.Comment("reaching state \'S134\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S135\'");
                    int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker1)));
                    if ((temp100 == 0)) {
                        CreditMgmtTestCaseS79();
                        goto label85;
                    }
                    if ((temp100 == 1)) {
                        this.Manager.Comment("reaching state \'S136\'");
                        goto label85;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker1)));
                label85:
;
                    goto label86;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S123\'.");
            label86:
;
                goto label90;
            }
            if ((temp105 == 2)) {
                this.Manager.Comment("reaching state \'S137\'");
                int temp104 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
                if ((temp104 == 0)) {
                    this.Manager.Comment("reaching state \'S138\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S139\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S140\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S141\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S142\'");
                    int temp102 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker3)));
                    if ((temp102 == 0)) {
                        CreditMgmtTestCaseS88();
                        goto label87;
                    }
                    if ((temp102 == 1)) {
                        this.Manager.Comment("reaching state \'S143\'");
                        goto label87;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker3)));
                label87:
;
                    goto label89;
                }
                if ((temp104 == 1)) {
                    this.Manager.Comment("reaching state \'S144\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S145\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S146\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S147\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S148\'");
                    int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker5)));
                    if ((temp103 == 0)) {
                        CreditMgmtTestCaseS149();
                        goto label88;
                    }
                    if ((temp103 == 1)) {
                        CreditMgmtTestCaseS150();
                        goto label88;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS121CreditOperationResponseChecker5)));
                label88:
;
                    goto label89;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S137\'.");
            label89:
;
                goto label90;
            }
            if ((temp105 == 3)) {
                CreditMgmtTestCaseS99();
                goto label90;
            }
            throw new InvalidOperationException("never reached");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS121ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S122");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS121ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S122");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS121CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S128");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S128");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S128");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS121CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S128");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S128");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S128");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS121CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S135");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS79() {
            this.Manager.Comment("reaching state \'S79\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S80\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker)));
            }
        }
        
        private void CreditMgmtTestCaseS121ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS121ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS121ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S122");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS121CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S142");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S142");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS88() {
            this.Manager.Comment("reaching state \'S88\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S89\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS121ExpectDisconnectChecker2)));
            }
        }
        
        private void CreditMgmtTestCaseS121ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS121ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS121CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S148");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS149() {
            this.Manager.Comment("reaching state \'S149\'");
        }
        
        private void CreditMgmtTestCaseS121CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S148");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS121ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S122");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1217
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1217() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1217");
            this.Manager.Comment("reaching state \'S1217\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp106;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp106);
            this.Manager.AddReturn(ReadConfigInfo, null, temp106);
            this.Manager.Comment("reaching state \'S1218\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1217ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1217ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1217ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1217ReadConfigChecker3)));
            if ((temp109 == 0)) {
                CreditMgmtTestCaseS106();
                goto label93;
            }
            if ((temp109 == 1)) {
                this.Manager.Comment("reaching state \'S1219\'");
                int temp108 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)));
                if ((temp108 == 0)) {
                    this.Manager.Comment("reaching state \'S1220\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1221\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1222\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1223\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1224\'");
                    int temp107 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1217CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1217CreditOperationResponseChecker1)));
                    if ((temp107 == 0)) {
                        CreditMgmtTestCaseS18();
                        goto label91;
                    }
                    if ((temp107 == 1)) {
                        CreditMgmtTestCaseS19();
                        goto label91;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1217CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1217CreditOperationResponseChecker1)));
                label91:
;
                    goto label92;
                }
                if ((temp108 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label92;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1219\'.");
            label92:
;
                goto label93;
            }
            if ((temp109 == 2)) {
                CreditMgmtTestCaseS667();
                goto label93;
            }
            if ((temp109 == 3)) {
                CreditMgmtTestCaseS99();
                goto label93;
            }
            throw new InvalidOperationException("never reached");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1217ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1217ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1217CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1224");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1224");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1224");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1217CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1224");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1224");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1224");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1217ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1217ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1225
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1225() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1225");
            this.Manager.Comment("reaching state \'S1225\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp110;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp110);
            this.Manager.AddReturn(ReadConfigInfo, null, temp110);
            this.Manager.Comment("reaching state \'S1226\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1225ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1225ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1225ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1225ReadConfigChecker3)));
            if ((temp113 == 0)) {
                CreditMgmtTestCaseS106();
                goto label96;
            }
            if ((temp113 == 1)) {
                this.Manager.Comment("reaching state \'S1227\'");
                int temp112 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
                if ((temp112 == 0)) {
                    this.Manager.Comment("reaching state \'S1228\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1229\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1230\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1231\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1232\'");
                    int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker4)));
                    if ((temp111 == 0)) {
                        CreditMgmtTestCaseS1213();
                        goto label94;
                    }
                    if ((temp111 == 1)) {
                        CreditMgmtTestCaseS1214();
                        goto label94;
                    }
                    if ((temp111 == 2)) {
                        CreditMgmtTestCaseS1215();
                        goto label94;
                    }
                    if ((temp111 == 3)) {
                        CreditMgmtTestCaseS1216();
                        goto label94;
                    }
                    if ((temp111 == 4)) {
                        CreditMgmtTestCaseS19();
                        goto label94;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1225CreditOperationResponseChecker4)));
                label94:
;
                    goto label95;
                }
                if ((temp112 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label95;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1227\'.");
            label95:
;
                goto label96;
            }
            if ((temp113 == 2)) {
                CreditMgmtTestCaseS667();
                goto label96;
            }
            if ((temp113 == 3)) {
                CreditMgmtTestCaseS99();
                goto label96;
            }
            throw new InvalidOperationException("never reached");
        label96:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1225ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1225ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1225CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1225CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1225CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1225CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1232");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1225CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1232");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1232");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1232");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker63() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1225ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1225ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1233
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1233() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1233");
            this.Manager.Comment("reaching state \'S1233\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp114);
            this.Manager.AddReturn(ReadConfigInfo, null, temp114);
            this.Manager.Comment("reaching state \'S1234\'");
            int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1233ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1233ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1233ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1233ReadConfigChecker3)));
            if ((temp117 == 0)) {
                CreditMgmtTestCaseS106();
                goto label99;
            }
            if ((temp117 == 1)) {
                this.Manager.Comment("reaching state \'S1235\'");
                int temp116 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)));
                if ((temp116 == 0)) {
                    this.Manager.Comment("reaching state \'S1236\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1237\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1238\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1239\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1240\'");
                    int temp115 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker4)));
                    if ((temp115 == 0)) {
                        CreditMgmtTestCaseS1213();
                        goto label97;
                    }
                    if ((temp115 == 1)) {
                        CreditMgmtTestCaseS1214();
                        goto label97;
                    }
                    if ((temp115 == 2)) {
                        CreditMgmtTestCaseS1215();
                        goto label97;
                    }
                    if ((temp115 == 3)) {
                        CreditMgmtTestCaseS1216();
                        goto label97;
                    }
                    if ((temp115 == 4)) {
                        CreditMgmtTestCaseS19();
                        goto label97;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1233CreditOperationResponseChecker4)));
                label97:
;
                    goto label98;
                }
                if ((temp116 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label98;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1235\'.");
            label98:
;
                goto label99;
            }
            if ((temp117 == 2)) {
                CreditMgmtTestCaseS667();
                goto label99;
            }
            if ((temp117 == 3)) {
                CreditMgmtTestCaseS99();
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1233ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1234");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1233ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1234");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1233CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1233CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1233CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1233CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1233CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1240");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1240");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1240");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1233ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1234");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1233ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1234");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1241
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1241() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1241");
            this.Manager.Comment("reaching state \'S1241\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp118;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp118);
            this.Manager.AddReturn(ReadConfigInfo, null, temp118);
            this.Manager.Comment("reaching state \'S1242\'");
            int temp121 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1241ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1241ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1241ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1241ReadConfigChecker3)));
            if ((temp121 == 0)) {
                CreditMgmtTestCaseS106();
                goto label102;
            }
            if ((temp121 == 1)) {
                this.Manager.Comment("reaching state \'S1243\'");
                int temp120 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
                if ((temp120 == 0)) {
                    this.Manager.Comment("reaching state \'S1244\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S1245\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1246\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S1247\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1248\'");
                    int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker4)));
                    if ((temp119 == 0)) {
                        CreditMgmtTestCaseS1213();
                        goto label100;
                    }
                    if ((temp119 == 1)) {
                        CreditMgmtTestCaseS1214();
                        goto label100;
                    }
                    if ((temp119 == 2)) {
                        CreditMgmtTestCaseS1215();
                        goto label100;
                    }
                    if ((temp119 == 3)) {
                        CreditMgmtTestCaseS1216();
                        goto label100;
                    }
                    if ((temp119 == 4)) {
                        CreditMgmtTestCaseS19();
                        goto label100;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1241CreditOperationResponseChecker4)));
                label100:
;
                    goto label101;
                }
                if ((temp120 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label101;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1243\'.");
            label101:
;
                goto label102;
            }
            if ((temp121 == 2)) {
                CreditMgmtTestCaseS667();
                goto label102;
            }
            if ((temp121 == 3)) {
                CreditMgmtTestCaseS99();
                goto label102;
            }
            throw new InvalidOperationException("never reached");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1241ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1242");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1241ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1242");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1241CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1241CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1241CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1241CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1248");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS1241CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1248");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1248");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1241ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1242");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1241ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1242");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1249
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1249() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1249");
            this.Manager.Comment("reaching state \'S1249\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp122;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp122);
            this.Manager.AddReturn(ReadConfigInfo, null, temp122);
            this.Manager.Comment("reaching state \'S1250\'");
            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1249ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1249ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1249ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1249ReadConfigChecker3)));
            if ((temp125 == 0)) {
                CreditMgmtTestCaseS106();
                goto label105;
            }
            if ((temp125 == 1)) {
                this.Manager.Comment("reaching state \'S1251\'");
                int temp124 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)));
                if ((temp124 == 0)) {
                    this.Manager.Comment("reaching state \'S1252\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1253\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1254\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1255\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1256\'");
                    int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker4)));
                    if ((temp123 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label103;
                    }
                    if ((temp123 == 1)) {
                        CreditMgmtTestCaseS230();
                        goto label103;
                    }
                    if ((temp123 == 2)) {
                        CreditMgmtTestCaseS231();
                        goto label103;
                    }
                    if ((temp123 == 3)) {
                        CreditMgmtTestCaseS232();
                        goto label103;
                    }
                    if ((temp123 == 4)) {
                        CreditMgmtTestCaseS233();
                        goto label103;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1249CreditOperationResponseChecker4)));
                label103:
;
                    goto label104;
                }
                if ((temp124 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label104;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1251\'.");
            label104:
;
                goto label105;
            }
            if ((temp125 == 2)) {
                CreditMgmtTestCaseS667();
                goto label105;
            }
            if ((temp125 == 3)) {
                CreditMgmtTestCaseS99();
                goto label105;
            }
            throw new InvalidOperationException("never reached");
        label105:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1249ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1249ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1249CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS167() {
            this.Manager.Comment("reaching state \'S167\'");
        }
        
        private void CreditMgmtTestCaseS1249CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS230() {
            this.Manager.Comment("reaching state \'S230\'");
        }
        
        private void CreditMgmtTestCaseS1249CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS231() {
            this.Manager.Comment("reaching state \'S231\'");
        }
        
        private void CreditMgmtTestCaseS1249CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS232() {
            this.Manager.Comment("reaching state \'S232\'");
        }
        
        private void CreditMgmtTestCaseS1249CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1256");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS233() {
            this.Manager.Comment("reaching state \'S233\'");
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1249ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1249ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1257
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS1257() {
            this.Manager.BeginTest("CreditMgmtTestCaseS1257");
            this.Manager.Comment("reaching state \'S1257\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp126;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp126);
            this.Manager.AddReturn(ReadConfigInfo, null, temp126);
            this.Manager.Comment("reaching state \'S1258\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1257ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1257ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1257ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS1257ReadConfigChecker3)));
            if ((temp129 == 0)) {
                CreditMgmtTestCaseS106();
                goto label108;
            }
            if ((temp129 == 1)) {
                this.Manager.Comment("reaching state \'S1259\'");
                int temp128 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
                if ((temp128 == 0)) {
                    this.Manager.Comment("reaching state \'S1260\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1261\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1262\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S1263\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1264\'");
                    int temp127 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker4)));
                    if ((temp127 == 0)) {
                        CreditMgmtTestCaseS656();
                        goto label106;
                    }
                    if ((temp127 == 1)) {
                        CreditMgmtTestCaseS809();
                        goto label106;
                    }
                    if ((temp127 == 2)) {
                        CreditMgmtTestCaseS810();
                        goto label106;
                    }
                    if ((temp127 == 3)) {
                        CreditMgmtTestCaseS811();
                        goto label106;
                    }
                    if ((temp127 == 4)) {
                        CreditMgmtTestCaseS812();
                        goto label106;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS1257CreditOperationResponseChecker4)));
                label106:
;
                    goto label107;
                }
                if ((temp128 == 1)) {
                    CreditMgmtTestCaseS390();
                    goto label107;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1259\'.");
            label107:
;
                goto label108;
            }
            if ((temp129 == 2)) {
                CreditMgmtTestCaseS667();
                goto label108;
            }
            if ((temp129 == 3)) {
                CreditMgmtTestCaseS99();
                goto label108;
            }
            throw new InvalidOperationException("never reached");
        label108:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS1257ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1258");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS1257ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1258");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS1257CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS656() {
            this.Manager.Comment("reaching state \'S656\'");
        }
        
        private void CreditMgmtTestCaseS1257CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS809() {
            this.Manager.Comment("reaching state \'S809\'");
        }
        
        private void CreditMgmtTestCaseS1257CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS810() {
            this.Manager.Comment("reaching state \'S810\'");
        }
        
        private void CreditMgmtTestCaseS1257CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS811() {
            this.Manager.Comment("reaching state \'S811\'");
        }
        
        private void CreditMgmtTestCaseS1257CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS812() {
            this.Manager.Comment("reaching state \'S812\'");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS1257ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1258");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS1257ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1258");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S151
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS151() {
            this.Manager.BeginTest("CreditMgmtTestCaseS151");
            this.Manager.Comment("reaching state \'S151\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp130);
            this.Manager.AddReturn(ReadConfigInfo, null, temp130);
            this.Manager.Comment("reaching state \'S152\'");
            int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS151ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS151ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS151ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS151ReadConfigChecker3)));
            if ((temp137 == 0)) {
                CreditMgmtTestCaseS106();
                goto label115;
            }
            if ((temp137 == 1)) {
                this.Manager.Comment("reaching state \'S153\'");
                int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)));
                if ((temp133 == 0)) {
                    this.Manager.Comment("reaching state \'S154\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S156\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeSetZero\"");
                    this.Manager.Comment("reaching state \'S157\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S158\'");
                    int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS151ExpectDisconnectChecker2)));
                    if ((temp131 == 0)) {
                        this.Manager.Comment("reaching state \'S159\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS151ExpectDisconnectChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S160\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS151ExpectDisconnectChecker)));
                        }
                        goto label109;
                    }
                    if ((temp131 == 1)) {
                        CreditMgmtTestCaseS72();
                        goto label109;
                    }
                    if ((temp131 == 2)) {
                        this.Manager.Comment("reaching state \'S161\'");
                        goto label109;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS151ExpectDisconnectChecker2)));
                label109:
;
                    goto label111;
                }
                if ((temp133 == 1)) {
                    this.Manager.Comment("reaching state \'S162\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S163\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S164\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S165\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S166\'");
                    int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker3)));
                    if ((temp132 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label110;
                    }
                    if ((temp132 == 1)) {
                        CreditMgmtTestCaseS168();
                        goto label110;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker3)));
                label110:
;
                    goto label111;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S153\'.");
            label111:
;
                goto label115;
            }
            if ((temp137 == 2)) {
                this.Manager.Comment("reaching state \'S169\'");
                int temp136 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
                if ((temp136 == 0)) {
                    this.Manager.Comment("reaching state \'S170\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S171\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S172\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S173\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S174\'");
                    int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker8)));
                    if ((temp134 == 0)) {
                        CreditMgmtTestCaseS175();
                        goto label112;
                    }
                    if ((temp134 == 1)) {
                        CreditMgmtTestCaseS176();
                        goto label112;
                    }
                    if ((temp134 == 2)) {
                        CreditMgmtTestCaseS177();
                        goto label112;
                    }
                    if ((temp134 == 3)) {
                        CreditMgmtTestCaseS178();
                        goto label112;
                    }
                    if ((temp134 == 4)) {
                        CreditMgmtTestCaseS179();
                        goto label112;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker8)));
                label112:
;
                    goto label114;
                }
                if ((temp136 == 1)) {
                    this.Manager.Comment("reaching state \'S180\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S181\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S182\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S183\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S184\'");
                    int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker10)));
                    if ((temp135 == 0)) {
                        CreditMgmtTestCaseS149();
                        goto label113;
                    }
                    if ((temp135 == 1)) {
                        CreditMgmtTestCaseS150();
                        goto label113;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS151CreditOperationResponseChecker10)));
                label113:
;
                    goto label114;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S169\'.");
            label114:
;
                goto label115;
            }
            if ((temp137 == 3)) {
                CreditMgmtTestCaseS99();
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS151ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS151ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S158");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S158");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S158");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS151ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S158");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S158");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S158");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS72() {
            this.Manager.Comment("reaching state \'S72\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS151ExpectDisconnectChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S73\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS151ExpectDisconnectChecker1)));
            }
        }
        
        private void CreditMgmtTestCaseS151ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS151ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S166");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S166");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS168() {
            this.Manager.Comment("reaching state \'S168\'");
        }
        
        private void CreditMgmtTestCaseS151ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS175() {
            this.Manager.Comment("reaching state \'S175\'");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS176() {
            this.Manager.Comment("reaching state \'S176\'");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS177() {
            this.Manager.Comment("reaching state \'S177\'");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S174");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S174");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S174");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS178() {
            this.Manager.Comment("reaching state \'S178\'");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S174");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS179() {
            this.Manager.Comment("reaching state \'S179\'");
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S184");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S184");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS151CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S184");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S184");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS151ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S185
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS185() {
            this.Manager.BeginTest("CreditMgmtTestCaseS185");
            this.Manager.Comment("reaching state \'S185\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp138;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp138);
            this.Manager.AddReturn(ReadConfigInfo, null, temp138);
            this.Manager.Comment("reaching state \'S186\'");
            int temp145 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS185ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS185ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS185ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS185ReadConfigChecker3)));
            if ((temp145 == 0)) {
                CreditMgmtTestCaseS106();
                goto label122;
            }
            if ((temp145 == 1)) {
                this.Manager.Comment("reaching state \'S187\'");
                int temp141 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)));
                if ((temp141 == 0)) {
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S189\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S190\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S191\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S192\'");
                    int temp139 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker4)));
                    if ((temp139 == 0)) {
                        CreditMgmtTestCaseS130();
                        goto label116;
                    }
                    if ((temp139 == 1)) {
                        CreditMgmtTestCaseS193();
                        goto label116;
                    }
                    if ((temp139 == 2)) {
                        CreditMgmtTestCaseS194();
                        goto label116;
                    }
                    if ((temp139 == 3)) {
                        CreditMgmtTestCaseS195();
                        goto label116;
                    }
                    if ((temp139 == 4)) {
                        CreditMgmtTestCaseS196();
                        goto label116;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker4)));
                label116:
;
                    goto label118;
                }
                if ((temp141 == 1)) {
                    this.Manager.Comment("reaching state \'S197\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S198\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Vali" +
                            "dMid, creditCharge type is CreditChargeExceedBoundary\"");
                    this.Manager.Comment("reaching state \'S200\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S201\'");
                    int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS185ExpectDisconnectChecker)));
                    if ((temp140 == 0)) {
                        CreditMgmtTestCaseS79();
                        goto label117;
                    }
                    if ((temp140 == 1)) {
                        this.Manager.Comment("reaching state \'S202\'");
                        goto label117;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS185ExpectDisconnectChecker)));
                label117:
;
                    goto label118;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S187\'.");
            label118:
;
                goto label122;
            }
            if ((temp145 == 2)) {
                this.Manager.Comment("reaching state \'S203\'");
                int temp144 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
                if ((temp144 == 0)) {
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S206\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S208\'");
                    int temp142 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker7)));
                    if ((temp142 == 0)) {
                        CreditMgmtTestCaseS178();
                        goto label119;
                    }
                    if ((temp142 == 1)) {
                        CreditMgmtTestCaseS209();
                        goto label119;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker7)));
                label119:
;
                    goto label121;
                }
                if ((temp144 == 1)) {
                    this.Manager.Comment("reaching state \'S210\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                            "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S213\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S214\'");
                    int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS185ExpectDisconnectChecker2)));
                    if ((temp143 == 0)) {
                        CreditMgmtTestCaseS97();
                        goto label120;
                    }
                    if ((temp143 == 1)) {
                        this.Manager.Comment("reaching state \'S215\'");
                        goto label120;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS185CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS185ExpectDisconnectChecker2)));
                label120:
;
                    goto label121;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S203\'.");
            label121:
;
                goto label122;
            }
            if ((temp145 == 3)) {
                CreditMgmtTestCaseS99();
                goto label122;
            }
            throw new InvalidOperationException("never reached");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS185ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS185ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S192");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S192");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S192");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS193() {
            this.Manager.Comment("reaching state \'S193\'");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS194() {
            this.Manager.Comment("reaching state \'S194\'");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS195() {
            this.Manager.Comment("reaching state \'S195\'");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS196() {
            this.Manager.Comment("reaching state \'S196\'");
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS185ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS185ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker78() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S208");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S208");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S208");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S208");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S208");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S208");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS209() {
            this.Manager.Comment("reaching state \'S209\'");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS185CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S214");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS97() {
            this.Manager.Comment("reaching state \'S97\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS185ExpectDisconnectChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S98\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS185ExpectDisconnectChecker1)));
            }
        }
        
        private void CreditMgmtTestCaseS185ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS185ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS185ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS216() {
            this.Manager.BeginTest("CreditMgmtTestCaseS216");
            this.Manager.Comment("reaching state \'S216\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp146;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp146);
            this.Manager.AddReturn(ReadConfigInfo, null, temp146);
            this.Manager.Comment("reaching state \'S217\'");
            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS216ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS216ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS216ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS216ReadConfigChecker3)));
            if ((temp153 == 0)) {
                CreditMgmtTestCaseS106();
                goto label129;
            }
            if ((temp153 == 1)) {
                this.Manager.Comment("reaching state \'S218\'");
                int temp149 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)));
                if ((temp149 == 0)) {
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S221\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S223\'");
                    int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS216ExpectDisconnectChecker)));
                    if ((temp147 == 0)) {
                        CreditMgmtTestCaseS72();
                        goto label123;
                    }
                    if ((temp147 == 1)) {
                        this.Manager.Comment("reaching state \'S224\'");
                        goto label123;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS216ExpectDisconnectChecker)));
                label123:
;
                    goto label125;
                }
                if ((temp149 == 1)) {
                    this.Manager.Comment("reaching state \'S225\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S226\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S227\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S228\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S229\'");
                    int temp148 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker5)));
                    if ((temp148 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label124;
                    }
                    if ((temp148 == 1)) {
                        CreditMgmtTestCaseS230();
                        goto label124;
                    }
                    if ((temp148 == 2)) {
                        CreditMgmtTestCaseS231();
                        goto label124;
                    }
                    if ((temp148 == 3)) {
                        CreditMgmtTestCaseS232();
                        goto label124;
                    }
                    if ((temp148 == 4)) {
                        CreditMgmtTestCaseS233();
                        goto label124;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker5)));
                label124:
;
                    goto label125;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S218\'.");
            label125:
;
                goto label129;
            }
            if ((temp153 == 2)) {
                this.Manager.Comment("reaching state \'S234\'");
                int temp152 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
                if ((temp152 == 0)) {
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S236\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S237\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S238\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S239\'");
                    int temp150 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS216ExpectDisconnectChecker2)));
                    if ((temp150 == 0)) {
                        this.Manager.Comment("reaching state \'S241\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS216ExpectDisconnectChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S242\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS216ExpectDisconnectChecker1)));
                        }
                        goto label126;
                    }
                    if ((temp150 == 1)) {
                        CreditMgmtTestCaseS88();
                        goto label126;
                    }
                    if ((temp150 == 2)) {
                        this.Manager.Comment("reaching state \'S240\'");
                        goto label126;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS216ExpectDisconnectChecker2)));
                label126:
;
                    goto label128;
                }
                if ((temp152 == 1)) {
                    this.Manager.Comment("reaching state \'S243\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S244\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S245\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S246\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S247\'");
                    int temp151 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker9)));
                    if ((temp151 == 0)) {
                        CreditMgmtTestCaseS149();
                        goto label127;
                    }
                    if ((temp151 == 1)) {
                        CreditMgmtTestCaseS150();
                        goto label127;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS216CreditOperationResponseChecker9)));
                label127:
;
                    goto label128;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S234\'.");
            label128:
;
                goto label129;
            }
            if ((temp153 == 3)) {
                CreditMgmtTestCaseS99();
                goto label129;
            }
            throw new InvalidOperationException("never reached");
        label129:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS216ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S217");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS216ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S217");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S223");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S223");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS216ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker81() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S217");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S239");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S239");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S239");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S239");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S239");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S239");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S247");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S247");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S247");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S247");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS216ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S217");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS248() {
            this.Manager.BeginTest("CreditMgmtTestCaseS248");
            this.Manager.Comment("reaching state \'S248\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp154;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp154);
            this.Manager.AddReturn(ReadConfigInfo, null, temp154);
            this.Manager.Comment("reaching state \'S249\'");
            int temp161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS248ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS248ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS248ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS248ReadConfigChecker3)));
            if ((temp161 == 0)) {
                CreditMgmtTestCaseS106();
                goto label136;
            }
            if ((temp161 == 1)) {
                this.Manager.Comment("reaching state \'S250\'");
                int temp157 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)));
                if ((temp157 == 0)) {
                    this.Manager.Comment("reaching state \'S251\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S252\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S253\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S254\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S255\'");
                    int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker4)));
                    if ((temp155 == 0)) {
                        CreditMgmtTestCaseS130();
                        goto label130;
                    }
                    if ((temp155 == 1)) {
                        CreditMgmtTestCaseS193();
                        goto label130;
                    }
                    if ((temp155 == 2)) {
                        CreditMgmtTestCaseS194();
                        goto label130;
                    }
                    if ((temp155 == 3)) {
                        CreditMgmtTestCaseS195();
                        goto label130;
                    }
                    if ((temp155 == 4)) {
                        CreditMgmtTestCaseS196();
                        goto label130;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker4)));
                label130:
;
                    goto label132;
                }
                if ((temp157 == 1)) {
                    this.Manager.Comment("reaching state \'S256\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S257\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S258\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S259\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S260\'");
                    int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker6)));
                    if ((temp156 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label131;
                    }
                    if ((temp156 == 1)) {
                        CreditMgmtTestCaseS168();
                        goto label131;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker6)));
                label131:
;
                    goto label132;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S250\'.");
            label132:
;
                goto label136;
            }
            if ((temp161 == 2)) {
                this.Manager.Comment("reaching state \'S261\'");
                int temp160 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
                if ((temp160 == 0)) {
                    this.Manager.Comment("reaching state \'S262\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S263\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S266\'");
                    int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker8)));
                    if ((temp158 == 0)) {
                        CreditMgmtTestCaseS178();
                        goto label133;
                    }
                    if ((temp158 == 1)) {
                        CreditMgmtTestCaseS209();
                        goto label133;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker8)));
                label133:
;
                    goto label135;
                }
                if ((temp160 == 1)) {
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S268\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S269\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S270\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S271\'");
                    int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker13)));
                    if ((temp159 == 0)) {
                        CreditMgmtTestCaseS150();
                        goto label134;
                    }
                    if ((temp159 == 1)) {
                        CreditMgmtTestCaseS272();
                        goto label134;
                    }
                    if ((temp159 == 2)) {
                        CreditMgmtTestCaseS273();
                        goto label134;
                    }
                    if ((temp159 == 3)) {
                        CreditMgmtTestCaseS274();
                        goto label134;
                    }
                    if ((temp159 == 4)) {
                        CreditMgmtTestCaseS275();
                        goto label134;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS248CreditOperationResponseChecker13)));
                label134:
;
                    goto label135;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S261\'.");
            label135:
;
                goto label136;
            }
            if ((temp161 == 3)) {
                CreditMgmtTestCaseS99();
                goto label136;
            }
            throw new InvalidOperationException("never reached");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS248ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S249");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS248ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S249");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S255");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S255");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S255");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S260");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S260");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S249");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S266");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S266");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S266");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S266");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S266");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S266");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S271");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS248ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S249");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS276() {
            this.Manager.BeginTest("CreditMgmtTestCaseS276");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp162;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp162);
            this.Manager.AddReturn(ReadConfigInfo, null, temp162);
            this.Manager.Comment("reaching state \'S277\'");
            int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS276ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS276ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS276ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS276ReadConfigChecker3)));
            if ((temp169 == 0)) {
                CreditMgmtTestCaseS106();
                goto label143;
            }
            if ((temp169 == 1)) {
                this.Manager.Comment("reaching state \'S278\'");
                int temp165 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)));
                if ((temp165 == 0)) {
                    this.Manager.Comment("reaching state \'S279\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S280\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S281\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S282\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S283\'");
                    int temp163 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker1)));
                    if ((temp163 == 0)) {
                        CreditMgmtTestCaseS129();
                        goto label137;
                    }
                    if ((temp163 == 1)) {
                        CreditMgmtTestCaseS130();
                        goto label137;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker1)));
                label137:
;
                    goto label139;
                }
                if ((temp165 == 1)) {
                    this.Manager.Comment("reaching state \'S284\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S285\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S286\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S287\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S288\'");
                    int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker6)));
                    if ((temp164 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label138;
                    }
                    if ((temp164 == 1)) {
                        CreditMgmtTestCaseS230();
                        goto label138;
                    }
                    if ((temp164 == 2)) {
                        CreditMgmtTestCaseS231();
                        goto label138;
                    }
                    if ((temp164 == 3)) {
                        CreditMgmtTestCaseS232();
                        goto label138;
                    }
                    if ((temp164 == 4)) {
                        CreditMgmtTestCaseS233();
                        goto label138;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker6)));
                label138:
;
                    goto label139;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S278\'.");
            label139:
;
                goto label143;
            }
            if ((temp169 == 2)) {
                this.Manager.Comment("reaching state \'S289\'");
                int temp168 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
                if ((temp168 == 0)) {
                    this.Manager.Comment("reaching state \'S290\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S291\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S292\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S293\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S294\'");
                    int temp166 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker11)));
                    if ((temp166 == 0)) {
                        CreditMgmtTestCaseS175();
                        goto label140;
                    }
                    if ((temp166 == 1)) {
                        CreditMgmtTestCaseS176();
                        goto label140;
                    }
                    if ((temp166 == 2)) {
                        CreditMgmtTestCaseS177();
                        goto label140;
                    }
                    if ((temp166 == 3)) {
                        CreditMgmtTestCaseS178();
                        goto label140;
                    }
                    if ((temp166 == 4)) {
                        CreditMgmtTestCaseS179();
                        goto label140;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker11)));
                label140:
;
                    goto label142;
                }
                if ((temp168 == 1)) {
                    this.Manager.Comment("reaching state \'S295\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S296\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S297\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S298\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S299\'");
                    int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker16)));
                    if ((temp167 == 0)) {
                        CreditMgmtTestCaseS150();
                        goto label141;
                    }
                    if ((temp167 == 1)) {
                        CreditMgmtTestCaseS272();
                        goto label141;
                    }
                    if ((temp167 == 2)) {
                        CreditMgmtTestCaseS273();
                        goto label141;
                    }
                    if ((temp167 == 3)) {
                        CreditMgmtTestCaseS274();
                        goto label141;
                    }
                    if ((temp167 == 4)) {
                        CreditMgmtTestCaseS275();
                        goto label141;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS276CreditOperationResponseChecker16)));
                label141:
;
                    goto label142;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S289\'.");
            label142:
;
                goto label143;
            }
            if ((temp169 == 3)) {
                CreditMgmtTestCaseS99();
                goto label143;
            }
            throw new InvalidOperationException("never reached");
        label143:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS276ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS276ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S283");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S283");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S283");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S283");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S283");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S283");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S294");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S294");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S294");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276CreditOperationResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS276ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS300() {
            this.Manager.BeginTest("CreditMgmtTestCaseS300");
            this.Manager.Comment("reaching state \'S300\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp170;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp170);
            this.Manager.AddReturn(ReadConfigInfo, null, temp170);
            this.Manager.Comment("reaching state \'S301\'");
            int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS300ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS300ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS300ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS300ReadConfigChecker3)));
            if ((temp177 == 0)) {
                CreditMgmtTestCaseS106();
                goto label150;
            }
            if ((temp177 == 1)) {
                this.Manager.Comment("reaching state \'S302\'");
                int temp173 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)));
                if ((temp173 == 0)) {
                    this.Manager.Comment("reaching state \'S303\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S304\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S305\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S306\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S307\'");
                    int temp171 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker4)));
                    if ((temp171 == 0)) {
                        CreditMgmtTestCaseS130();
                        goto label144;
                    }
                    if ((temp171 == 1)) {
                        CreditMgmtTestCaseS193();
                        goto label144;
                    }
                    if ((temp171 == 2)) {
                        CreditMgmtTestCaseS194();
                        goto label144;
                    }
                    if ((temp171 == 3)) {
                        CreditMgmtTestCaseS195();
                        goto label144;
                    }
                    if ((temp171 == 4)) {
                        CreditMgmtTestCaseS196();
                        goto label144;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker4)));
                label144:
;
                    goto label146;
                }
                if ((temp173 == 1)) {
                    this.Manager.Comment("reaching state \'S308\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S309\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S310\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S311\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S312\'");
                    int temp172 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker6)));
                    if ((temp172 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label145;
                    }
                    if ((temp172 == 1)) {
                        CreditMgmtTestCaseS168();
                        goto label145;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker6)));
                label145:
;
                    goto label146;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S302\'.");
            label146:
;
                goto label150;
            }
            if ((temp177 == 2)) {
                this.Manager.Comment("reaching state \'S313\'");
                int temp176 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)));
                if ((temp176 == 0)) {
                    this.Manager.Comment("reaching state \'S314\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S315\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S316\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S317\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S318\'");
                    int temp174 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker8)));
                    if ((temp174 == 0)) {
                        CreditMgmtTestCaseS178();
                        goto label147;
                    }
                    if ((temp174 == 1)) {
                        CreditMgmtTestCaseS209();
                        goto label147;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker8)));
                label147:
;
                    goto label149;
                }
                if ((temp176 == 1)) {
                    this.Manager.Comment("reaching state \'S319\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S320\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S321\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Unav" +
                            "ailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S322\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S323\'");
                    int temp175 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS300ExpectDisconnectChecker)));
                    if ((temp175 == 0)) {
                        CreditMgmtTestCaseS97();
                        goto label148;
                    }
                    if ((temp175 == 1)) {
                        this.Manager.Comment("reaching state \'S324\'");
                        goto label148;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS300CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS300ExpectDisconnectChecker)));
                label148:
;
                    goto label149;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S313\'.");
            label149:
;
                goto label150;
            }
            if ((temp177 == 3)) {
                CreditMgmtTestCaseS99();
                goto label150;
            }
            throw new InvalidOperationException("never reached");
        label150:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS300ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S301");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS300ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S301");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S307");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S307");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S307");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S312");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S312");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S312");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S312");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S312");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S312");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S301");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S318");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S318");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S318");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S318");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS300CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S323");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS300ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS300ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S301");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S325
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS325() {
            this.Manager.BeginTest("CreditMgmtTestCaseS325");
            this.Manager.Comment("reaching state \'S325\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp178;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp178);
            this.Manager.AddReturn(ReadConfigInfo, null, temp178);
            this.Manager.Comment("reaching state \'S326\'");
            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS325ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS325ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS325ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS325ReadConfigChecker3)));
            if ((temp185 == 0)) {
                CreditMgmtTestCaseS106();
                goto label157;
            }
            if ((temp185 == 1)) {
                this.Manager.Comment("reaching state \'S327\'");
                int temp181 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)));
                if ((temp181 == 0)) {
                    this.Manager.Comment("reaching state \'S328\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S329\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S330\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S331\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S332\'");
                    int temp179 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker1)));
                    if ((temp179 == 0)) {
                        CreditMgmtTestCaseS129();
                        goto label151;
                    }
                    if ((temp179 == 1)) {
                        CreditMgmtTestCaseS130();
                        goto label151;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker1)));
                label151:
;
                    goto label153;
                }
                if ((temp181 == 1)) {
                    this.Manager.Comment("reaching state \'S333\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S334\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S335\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S336\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S337\'");
                    int temp180 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker6)));
                    if ((temp180 == 0)) {
                        CreditMgmtTestCaseS167();
                        goto label152;
                    }
                    if ((temp180 == 1)) {
                        CreditMgmtTestCaseS230();
                        goto label152;
                    }
                    if ((temp180 == 2)) {
                        CreditMgmtTestCaseS231();
                        goto label152;
                    }
                    if ((temp180 == 3)) {
                        CreditMgmtTestCaseS232();
                        goto label152;
                    }
                    if ((temp180 == 4)) {
                        CreditMgmtTestCaseS233();
                        goto label152;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker6)));
                label152:
;
                    goto label153;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S327\'.");
            label153:
;
                goto label157;
            }
            if ((temp185 == 2)) {
                this.Manager.Comment("reaching state \'S338\'");
                int temp184 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
                if ((temp184 == 0)) {
                    this.Manager.Comment("reaching state \'S339\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S340\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S341\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S342\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S343\'");
                    int temp182 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker8)));
                    if ((temp182 == 0)) {
                        CreditMgmtTestCaseS178();
                        goto label154;
                    }
                    if ((temp182 == 1)) {
                        CreditMgmtTestCaseS209();
                        goto label154;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker8)));
                label154:
;
                    goto label156;
                }
                if ((temp184 == 1)) {
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S347\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S348\'");
                    int temp183 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker13)));
                    if ((temp183 == 0)) {
                        CreditMgmtTestCaseS150();
                        goto label155;
                    }
                    if ((temp183 == 1)) {
                        CreditMgmtTestCaseS272();
                        goto label155;
                    }
                    if ((temp183 == 2)) {
                        CreditMgmtTestCaseS273();
                        goto label155;
                    }
                    if ((temp183 == 3)) {
                        CreditMgmtTestCaseS274();
                        goto label155;
                    }
                    if ((temp183 == 4)) {
                        CreditMgmtTestCaseS275();
                        goto label155;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS325CreditOperationResponseChecker13)));
                label155:
;
                    goto label156;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S338\'.");
            label156:
;
                goto label157;
            }
            if ((temp185 == 3)) {
                CreditMgmtTestCaseS99();
                goto label157;
            }
            throw new InvalidOperationException("never reached");
        label157:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS325ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S326");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS325ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S326");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S332");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S332");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S332");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S332");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S326");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S343");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S343");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S343");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S343");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S343");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S343");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS325ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S326");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S349
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS349() {
            this.Manager.BeginTest("CreditMgmtTestCaseS349");
            this.Manager.Comment("reaching state \'S349\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp186;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp186);
            this.Manager.AddReturn(ReadConfigInfo, null, temp186);
            this.Manager.Comment("reaching state \'S350\'");
            int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS349ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS349ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS349ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS349ReadConfigChecker3)));
            if ((temp193 == 0)) {
                this.Manager.Comment("reaching state \'S351\'");
                int temp189 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)));
                if ((temp189 == 0)) {
                    this.Manager.Comment("reaching state \'S352\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S354\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S355\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S356\'");
                    int temp187 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker1)));
                    if ((temp187 == 0)) {
                        CreditMgmtTestCaseS357();
                        goto label158;
                    }
                    if ((temp187 == 1)) {
                        CreditMgmtTestCaseS112();
                        goto label158;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker1)));
                label158:
;
                    goto label160;
                }
                if ((temp189 == 1)) {
                    this.Manager.Comment("reaching state \'S359\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S360\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S361\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S362\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S363\'");
                    int temp188 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker2)));
                    if ((temp188 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label159;
                    }
                    if ((temp188 == 1)) {
                        CreditMgmtTestCaseS365();
                        goto label159;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker2)));
                label159:
;
                    goto label160;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S351\'.");
            label160:
;
                goto label164;
            }
            if ((temp193 == 1)) {
                this.Manager.Comment("reaching state \'S366\'");
                int temp192 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
                if ((temp192 == 0)) {
                    this.Manager.Comment("reaching state \'S367\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S368\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S369\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S370\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S371\'");
                    int temp190 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker4)));
                    if ((temp190 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label161;
                    }
                    if ((temp190 == 1)) {
                        CreditMgmtTestCaseS373();
                        goto label161;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker4)));
                label161:
;
                    goto label163;
                }
                if ((temp192 == 1)) {
                    this.Manager.Comment("reaching state \'S374\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S375\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S376\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                            "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S378\'");
                    int temp191 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker3)));
                    if ((temp191 == 0)) {
                        CreditMgmtTestCaseS380();
                        goto label162;
                    }
                    if ((temp191 == 1)) {
                        this.Manager.Comment("reaching state \'S379\'");
                        goto label162;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS349CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker3)));
                label162:
;
                    goto label163;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S366\'.");
            label163:
;
                goto label164;
            }
            if ((temp193 == 2)) {
                CreditMgmtTestCaseS382();
                goto label164;
            }
            if ((temp193 == 3)) {
                CreditMgmtTestCaseS99();
                goto label164;
            }
            throw new InvalidOperationException("never reached");
        label164:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS349ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S350");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS349CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S356");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S356");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS357() {
            this.Manager.Comment("reaching state \'S357\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S358\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker)));
            }
        }
        
        private void CreditMgmtTestCaseS349ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS349ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS349CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S363");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S363");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S363");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS349CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S363");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S363");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S363");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS365() {
            this.Manager.Comment("reaching state \'S365\'");
        }
        
        private void CreditMgmtTestCaseS349ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S350");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS349CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S371");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S371");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S371");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS372() {
            this.Manager.Comment("reaching state \'S372\'");
        }
        
        private void CreditMgmtTestCaseS349CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S371");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S371");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S371");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS373() {
            this.Manager.Comment("reaching state \'S373\'");
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS349CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S378");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S378");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS380() {
            this.Manager.Comment("reaching state \'S380\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S381\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS349ExpectDisconnectChecker2)));
            }
        }
        
        private void CreditMgmtTestCaseS349ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS349ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS349ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S350");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS349ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S350");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S397
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS397() {
            this.Manager.BeginTest("CreditMgmtTestCaseS397");
            this.Manager.Comment("reaching state \'S397\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp194;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp194);
            this.Manager.AddReturn(ReadConfigInfo, null, temp194);
            this.Manager.Comment("reaching state \'S398\'");
            int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS397ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS397ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS397ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS397ReadConfigChecker3)));
            if ((temp201 == 0)) {
                CreditMgmtTestCaseS382();
                goto label171;
            }
            if ((temp201 == 1)) {
                this.Manager.Comment("reaching state \'S399\'");
                int temp197 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)));
                if ((temp197 == 0)) {
                    this.Manager.Comment("reaching state \'S400\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S401\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S402\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S404\'");
                    int temp195 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker1)));
                    if ((temp195 == 0)) {
                        CreditMgmtTestCaseS357();
                        goto label165;
                    }
                    if ((temp195 == 1)) {
                        this.Manager.Comment("reaching state \'S405\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S406\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker)));
                        }
                        goto label165;
                    }
                    if ((temp195 == 2)) {
                        this.Manager.Comment("reaching state \'S407\'");
                        goto label165;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker1)));
                label165:
;
                    goto label167;
                }
                if ((temp197 == 1)) {
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S409\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S410\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S411\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S412\'");
                    int temp196 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker4)));
                    if ((temp196 == 0)) {
                        this.Manager.Comment("reaching state \'S414\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S415\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker2)));
                        }
                        goto label166;
                    }
                    if ((temp196 == 1)) {
                        CreditMgmtTestCaseS416();
                        goto label166;
                    }
                    if ((temp196 == 2)) {
                        this.Manager.Comment("reaching state \'S413\'");
                        goto label166;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker4)));
                label166:
;
                    goto label167;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S399\'.");
            label167:
;
                goto label171;
            }
            if ((temp201 == 2)) {
                this.Manager.Comment("reaching state \'S418\'");
                int temp200 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
                if ((temp200 == 0)) {
                    this.Manager.Comment("reaching state \'S419\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S420\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S421\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S422\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S423\'");
                    int temp198 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker7)));
                    if ((temp198 == 0)) {
                        CreditMgmtTestCaseS425();
                        goto label168;
                    }
                    if ((temp198 == 1)) {
                        this.Manager.Comment("reaching state \'S427\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S428\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker6)));
                        }
                        goto label168;
                    }
                    if ((temp198 == 2)) {
                        this.Manager.Comment("reaching state \'S424\'");
                        goto label168;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker7)));
                label168:
;
                    goto label170;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S429\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S430\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S431\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Unav" +
                            "ailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S432\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S433\'");
                    int temp199 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker8)));
                    if ((temp199 == 0)) {
                        CreditMgmtTestCaseS380();
                        goto label169;
                    }
                    if ((temp199 == 1)) {
                        this.Manager.Comment("reaching state \'S434\'");
                        goto label169;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS397CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker8)));
                label169:
;
                    goto label170;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S418\'.");
            label170:
;
                goto label171;
            }
            if ((temp201 == 3)) {
                CreditMgmtTestCaseS99();
                goto label171;
            }
            throw new InvalidOperationException("never reached");
        label171:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS397ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S398");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS397ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S398");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S404");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S404");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S404");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S404");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S404");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S404");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S412");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S412");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S412");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S412");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S412");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S412");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS416() {
            this.Manager.Comment("reaching state \'S416\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S417\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker3)));
            }
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker4() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S398");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S423");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S423");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S423");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS425() {
            this.Manager.Comment("reaching state \'S425\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker5))) != -1)) {
                this.Manager.Comment("reaching state \'S426\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS397ExpectDisconnectChecker5)));
            }
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker5() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S423");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S423");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S423");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker6() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker7() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS397CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S433");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S433");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S433");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS397ExpectDisconnectChecker8() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS397ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S398");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S435
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS435() {
            this.Manager.BeginTest("CreditMgmtTestCaseS435");
            this.Manager.Comment("reaching state \'S435\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp202;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp202);
            this.Manager.AddReturn(ReadConfigInfo, null, temp202);
            this.Manager.Comment("reaching state \'S436\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS435ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS435ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS435ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS435ReadConfigChecker3)));
            if ((temp209 == 0)) {
                CreditMgmtTestCaseS382();
                goto label178;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S437\'");
                int temp205 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)));
                if ((temp205 == 0)) {
                    this.Manager.Comment("reaching state \'S438\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S439\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S440\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S441\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S442\'");
                    int temp203 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS435ExpectDisconnectChecker)));
                    if ((temp203 == 0)) {
                        CreditMgmtTestCaseS357();
                        goto label172;
                    }
                    if ((temp203 == 1)) {
                        this.Manager.Comment("reaching state \'S443\'");
                        goto label172;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS435ExpectDisconnectChecker)));
                label172:
;
                    goto label174;
                }
                if ((temp205 == 1)) {
                    this.Manager.Comment("reaching state \'S444\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S445\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S446\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S447\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S448\'");
                    int temp204 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker2)));
                    if ((temp204 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label173;
                    }
                    if ((temp204 == 1)) {
                        CreditMgmtTestCaseS365();
                        goto label173;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker2)));
                label173:
;
                    goto label174;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S437\'.");
            label174:
;
                goto label178;
            }
            if ((temp209 == 2)) {
                this.Manager.Comment("reaching state \'S449\'");
                int temp208 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
                if ((temp208 == 0)) {
                    this.Manager.Comment("reaching state \'S450\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S451\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S452\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S453\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S454\'");
                    int temp206 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS435ExpectDisconnectChecker1)));
                    if ((temp206 == 0)) {
                        CreditMgmtTestCaseS425();
                        goto label175;
                    }
                    if ((temp206 == 1)) {
                        CreditMgmtTestCaseS455();
                        goto label175;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS435ExpectDisconnectChecker1)));
                label175:
;
                    goto label177;
                }
                if ((temp208 == 1)) {
                    this.Manager.Comment("reaching state \'S456\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S457\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S458\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Vali" +
                            "dMid, creditCharge type is CreditChargeExceedBoundary\"");
                    this.Manager.Comment("reaching state \'S459\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S460\'");
                    int temp207 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS435ExpectDisconnectChecker2)));
                    if ((temp207 == 0)) {
                        CreditMgmtTestCaseS380();
                        goto label176;
                    }
                    if ((temp207 == 1)) {
                        this.Manager.Comment("reaching state \'S461\'");
                        goto label176;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS435CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS435ExpectDisconnectChecker2)));
                label176:
;
                    goto label177;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S449\'.");
            label177:
;
                goto label178;
            }
            if ((temp209 == 3)) {
                CreditMgmtTestCaseS99();
                goto label178;
            }
            throw new InvalidOperationException("never reached");
        label178:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS435ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS435ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS435CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S442");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S442");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S442");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS435ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS435CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S448");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S448");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S448");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS435CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S448");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S448");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S448");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS435ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS435CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S454");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S454");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S454");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS435ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS435CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S460");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S460");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S460");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS435ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS435ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS462() {
            this.Manager.BeginTest("CreditMgmtTestCaseS462");
            this.Manager.Comment("reaching state \'S462\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp210;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp210);
            this.Manager.AddReturn(ReadConfigInfo, null, temp210);
            this.Manager.Comment("reaching state \'S463\'");
            int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS462ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS462ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS462ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS462ReadConfigChecker3)));
            if ((temp217 == 0)) {
                CreditMgmtTestCaseS382();
                goto label185;
            }
            if ((temp217 == 1)) {
                this.Manager.Comment("reaching state \'S464\'");
                int temp213 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)));
                if ((temp213 == 0)) {
                    this.Manager.Comment("reaching state \'S465\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S466\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S467\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S468\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S469\'");
                    int temp211 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker1)));
                    if ((temp211 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label179;
                    }
                    if ((temp211 == 1)) {
                        CreditMgmtTestCaseS52();
                        goto label179;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker1)));
                label179:
;
                    goto label181;
                }
                if ((temp213 == 1)) {
                    this.Manager.Comment("reaching state \'S470\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S471\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S472\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S473\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S474\'");
                    int temp212 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker6)));
                    if ((temp212 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label180;
                    }
                    if ((temp212 == 1)) {
                        CreditMgmtTestCaseS475();
                        goto label180;
                    }
                    if ((temp212 == 2)) {
                        CreditMgmtTestCaseS476();
                        goto label180;
                    }
                    if ((temp212 == 3)) {
                        CreditMgmtTestCaseS477();
                        goto label180;
                    }
                    if ((temp212 == 4)) {
                        CreditMgmtTestCaseS478();
                        goto label180;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker6)));
                label180:
;
                    goto label181;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S464\'.");
            label181:
;
                goto label185;
            }
            if ((temp217 == 2)) {
                this.Manager.Comment("reaching state \'S479\'");
                int temp216 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
                if ((temp216 == 0)) {
                    this.Manager.Comment("reaching state \'S480\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S481\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S482\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S483\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S484\'");
                    int temp214 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker8)));
                    if ((temp214 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label182;
                    }
                    if ((temp214 == 1)) {
                        CreditMgmtTestCaseS373();
                        goto label182;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker8)));
                label182:
;
                    goto label184;
                }
                if ((temp216 == 1)) {
                    this.Manager.Comment("reaching state \'S485\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S486\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S487\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S488\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S489\'");
                    int temp215 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker10)));
                    if ((temp215 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label183;
                    }
                    if ((temp215 == 1)) {
                        CreditMgmtTestCaseS491();
                        goto label183;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS462CreditOperationResponseChecker10)));
                label183:
;
                    goto label184;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S479\'.");
            label184:
;
                goto label185;
            }
            if ((temp217 == 3)) {
                CreditMgmtTestCaseS99();
                goto label185;
            }
            throw new InvalidOperationException("never reached");
        label185:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS462ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS462ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S469");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S469");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S469");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S469");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S469");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S469");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S474");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S474");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S474");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S474");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker114() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S484");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S484");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S484");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S484");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S489");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS462CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S489");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS491() {
            this.Manager.Comment("reaching state \'S491\'");
        }
        
        private void CreditMgmtTestCaseS462ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS492() {
            this.Manager.BeginTest("CreditMgmtTestCaseS492");
            this.Manager.Comment("reaching state \'S492\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp218;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp218);
            this.Manager.AddReturn(ReadConfigInfo, null, temp218);
            this.Manager.Comment("reaching state \'S493\'");
            int temp225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS492ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS492ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS492ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS492ReadConfigChecker3)));
            if ((temp225 == 0)) {
                CreditMgmtTestCaseS382();
                goto label192;
            }
            if ((temp225 == 1)) {
                this.Manager.Comment("reaching state \'S494\'");
                int temp221 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)));
                if ((temp221 == 0)) {
                    this.Manager.Comment("reaching state \'S495\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S496\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S497\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S498\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S499\'");
                    int temp219 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker1)));
                    if ((temp219 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label186;
                    }
                    if ((temp219 == 1)) {
                        CreditMgmtTestCaseS52();
                        goto label186;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker1)));
                label186:
;
                    goto label188;
                }
                if ((temp221 == 1)) {
                    this.Manager.Comment("reaching state \'S500\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S501\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S502\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S503\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S504\'");
                    int temp220 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker3)));
                    if ((temp220 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label187;
                    }
                    if ((temp220 == 1)) {
                        CreditMgmtTestCaseS365();
                        goto label187;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker3)));
                label187:
;
                    goto label188;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S494\'.");
            label188:
;
                goto label192;
            }
            if ((temp225 == 2)) {
                this.Manager.Comment("reaching state \'S505\'");
                int temp224 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
                if ((temp224 == 0)) {
                    this.Manager.Comment("reaching state \'S506\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S507\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S508\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S509\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S510\'");
                    int temp222 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker8)));
                    if ((temp222 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label189;
                    }
                    if ((temp222 == 1)) {
                        CreditMgmtTestCaseS511();
                        goto label189;
                    }
                    if ((temp222 == 2)) {
                        CreditMgmtTestCaseS512();
                        goto label189;
                    }
                    if ((temp222 == 3)) {
                        CreditMgmtTestCaseS513();
                        goto label189;
                    }
                    if ((temp222 == 4)) {
                        CreditMgmtTestCaseS514();
                        goto label189;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker8)));
                label189:
;
                    goto label191;
                }
                if ((temp224 == 1)) {
                    this.Manager.Comment("reaching state \'S515\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S516\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S517\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S518\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S519\'");
                    int temp223 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker10)));
                    if ((temp223 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label190;
                    }
                    if ((temp223 == 1)) {
                        CreditMgmtTestCaseS491();
                        goto label190;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS492CreditOperationResponseChecker10)));
                label190:
;
                    goto label191;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S505\'.");
            label191:
;
                goto label192;
            }
            if ((temp225 == 3)) {
                CreditMgmtTestCaseS99();
                goto label192;
            }
            throw new InvalidOperationException("never reached");
        label192:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS492ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS492ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S499");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S499");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S499");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S499");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S499");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S499");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S504");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S504");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S504");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S504");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S504");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S504");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS492ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker118() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S510");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S510");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S510");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS511() {
            this.Manager.Comment("reaching state \'S511\'");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS512() {
            this.Manager.Comment("reaching state \'S512\'");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS513() {
            this.Manager.Comment("reaching state \'S513\'");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S510");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS514() {
            this.Manager.Comment("reaching state \'S514\'");
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S519");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S519");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS492CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S519");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S519");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS492ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS520() {
            this.Manager.BeginTest("CreditMgmtTestCaseS520");
            this.Manager.Comment("reaching state \'S520\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp226;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp226);
            this.Manager.AddReturn(ReadConfigInfo, null, temp226);
            this.Manager.Comment("reaching state \'S521\'");
            int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS520ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS520ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS520ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS520ReadConfigChecker3)));
            if ((temp233 == 0)) {
                CreditMgmtTestCaseS382();
                goto label199;
            }
            if ((temp233 == 1)) {
                this.Manager.Comment("reaching state \'S522\'");
                int temp229 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)));
                if ((temp229 == 0)) {
                    this.Manager.Comment("reaching state \'S523\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S524\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S525\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S526\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S527\'");
                    int temp227 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker4)));
                    if ((temp227 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label193;
                    }
                    if ((temp227 == 1)) {
                        CreditMgmtTestCaseS528();
                        goto label193;
                    }
                    if ((temp227 == 2)) {
                        CreditMgmtTestCaseS529();
                        goto label193;
                    }
                    if ((temp227 == 3)) {
                        CreditMgmtTestCaseS530();
                        goto label193;
                    }
                    if ((temp227 == 4)) {
                        CreditMgmtTestCaseS531();
                        goto label193;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker4)));
                label193:
;
                    goto label195;
                }
                if ((temp229 == 1)) {
                    this.Manager.Comment("reaching state \'S532\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S533\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S534\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S535\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S536\'");
                    int temp228 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker9)));
                    if ((temp228 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label194;
                    }
                    if ((temp228 == 1)) {
                        CreditMgmtTestCaseS475();
                        goto label194;
                    }
                    if ((temp228 == 2)) {
                        CreditMgmtTestCaseS476();
                        goto label194;
                    }
                    if ((temp228 == 3)) {
                        CreditMgmtTestCaseS477();
                        goto label194;
                    }
                    if ((temp228 == 4)) {
                        CreditMgmtTestCaseS478();
                        goto label194;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker9)));
                label194:
;
                    goto label195;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S522\'.");
            label195:
;
                goto label199;
            }
            if ((temp233 == 2)) {
                this.Manager.Comment("reaching state \'S537\'");
                int temp232 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
                if ((temp232 == 0)) {
                    this.Manager.Comment("reaching state \'S538\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S539\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S540\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S541\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S542\'");
                    int temp230 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker11)));
                    if ((temp230 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label196;
                    }
                    if ((temp230 == 1)) {
                        CreditMgmtTestCaseS373();
                        goto label196;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker11)));
                label196:
;
                    goto label198;
                }
                if ((temp232 == 1)) {
                    this.Manager.Comment("reaching state \'S543\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S544\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S545\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S546\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S547\'");
                    int temp231 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker16)));
                    if ((temp231 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label197;
                    }
                    if ((temp231 == 1)) {
                        CreditMgmtTestCaseS548();
                        goto label197;
                    }
                    if ((temp231 == 2)) {
                        CreditMgmtTestCaseS549();
                        goto label197;
                    }
                    if ((temp231 == 3)) {
                        CreditMgmtTestCaseS550();
                        goto label197;
                    }
                    if ((temp231 == 4)) {
                        CreditMgmtTestCaseS551();
                        goto label197;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS520CreditOperationResponseChecker16)));
                label197:
;
                    goto label198;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S537\'.");
            label198:
;
                goto label199;
            }
            if ((temp233 == 3)) {
                CreditMgmtTestCaseS99();
                goto label199;
            }
            throw new InvalidOperationException("never reached");
        label199:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS520ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S521");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS520ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S521");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S527");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S527");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S527");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS528() {
            this.Manager.Comment("reaching state \'S528\'");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS529() {
            this.Manager.Comment("reaching state \'S529\'");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS530() {
            this.Manager.Comment("reaching state \'S530\'");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S527");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS531() {
            this.Manager.Comment("reaching state \'S531\'");
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S536");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S536");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S536");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S521");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S542");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S542");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S542");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S542");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S542");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S542");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520CreditOperationResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS520ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S521");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS552() {
            this.Manager.BeginTest("CreditMgmtTestCaseS552");
            this.Manager.Comment("reaching state \'S552\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp234;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp234);
            this.Manager.AddReturn(ReadConfigInfo, null, temp234);
            this.Manager.Comment("reaching state \'S553\'");
            int temp241 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS552ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS552ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS552ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS552ReadConfigChecker3)));
            if ((temp241 == 0)) {
                CreditMgmtTestCaseS382();
                goto label206;
            }
            if ((temp241 == 1)) {
                this.Manager.Comment("reaching state \'S554\'");
                int temp237 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)));
                if ((temp237 == 0)) {
                    this.Manager.Comment("reaching state \'S555\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S556\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S557\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S559\'");
                    int temp235 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker4)));
                    if ((temp235 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label200;
                    }
                    if ((temp235 == 1)) {
                        CreditMgmtTestCaseS528();
                        goto label200;
                    }
                    if ((temp235 == 2)) {
                        CreditMgmtTestCaseS529();
                        goto label200;
                    }
                    if ((temp235 == 3)) {
                        CreditMgmtTestCaseS530();
                        goto label200;
                    }
                    if ((temp235 == 4)) {
                        CreditMgmtTestCaseS531();
                        goto label200;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker4)));
                label200:
;
                    goto label202;
                }
                if ((temp237 == 1)) {
                    this.Manager.Comment("reaching state \'S560\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S561\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S562\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S563\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S564\'");
                    int temp236 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS552ExpectDisconnectChecker)));
                    if ((temp236 == 0)) {
                        CreditMgmtTestCaseS416();
                        goto label201;
                    }
                    if ((temp236 == 1)) {
                        this.Manager.Comment("reaching state \'S565\'");
                        goto label201;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS552ExpectDisconnectChecker)));
                label201:
;
                    goto label202;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S554\'.");
            label202:
;
                goto label206;
            }
            if ((temp241 == 2)) {
                this.Manager.Comment("reaching state \'S566\'");
                int temp240 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
                if ((temp240 == 0)) {
                    this.Manager.Comment("reaching state \'S567\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S568\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S571\'");
                    int temp238 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS552ExpectDisconnectChecker1)));
                    if ((temp238 == 0)) {
                        CreditMgmtTestCaseS425();
                        goto label203;
                    }
                    if ((temp238 == 1)) {
                        this.Manager.Comment("reaching state \'S572\'");
                        goto label203;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS552ExpectDisconnectChecker1)));
                label203:
;
                    goto label205;
                }
                if ((temp240 == 1)) {
                    this.Manager.Comment("reaching state \'S573\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S574\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S575\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S576\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S577\'");
                    int temp239 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker8)));
                    if ((temp239 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label204;
                    }
                    if ((temp239 == 1)) {
                        CreditMgmtTestCaseS491();
                        goto label204;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS552CreditOperationResponseChecker8)));
                label204:
;
                    goto label205;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S566\'.");
            label205:
;
                goto label206;
            }
            if ((temp241 == 3)) {
                CreditMgmtTestCaseS99();
                goto label206;
            }
            throw new InvalidOperationException("never reached");
        label206:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS552ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S553");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS552ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S553");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S559");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S559");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S559");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S559");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S564");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S564");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S564");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS552ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS552ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S553");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S571");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S571");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S571");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS552ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S577");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S577");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS552CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S577");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S577");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS552ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S553");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS578() {
            this.Manager.BeginTest("CreditMgmtTestCaseS578");
            this.Manager.Comment("reaching state \'S578\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp242;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp242);
            this.Manager.AddReturn(ReadConfigInfo, null, temp242);
            this.Manager.Comment("reaching state \'S579\'");
            int temp249 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS578ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS578ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS578ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS578ReadConfigChecker3)));
            if ((temp249 == 0)) {
                CreditMgmtTestCaseS382();
                goto label213;
            }
            if ((temp249 == 1)) {
                this.Manager.Comment("reaching state \'S580\'");
                int temp245 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)));
                if ((temp245 == 0)) {
                    this.Manager.Comment("reaching state \'S581\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S582\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S583\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S584\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S585\'");
                    int temp243 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker1)));
                    if ((temp243 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label207;
                    }
                    if ((temp243 == 1)) {
                        CreditMgmtTestCaseS52();
                        goto label207;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker1)));
                label207:
;
                    goto label209;
                }
                if ((temp245 == 1)) {
                    this.Manager.Comment("reaching state \'S586\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S587\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S588\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S589\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S590\'");
                    int temp244 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker6)));
                    if ((temp244 == 0)) {
                        CreditMgmtTestCaseS364();
                        goto label208;
                    }
                    if ((temp244 == 1)) {
                        CreditMgmtTestCaseS475();
                        goto label208;
                    }
                    if ((temp244 == 2)) {
                        CreditMgmtTestCaseS476();
                        goto label208;
                    }
                    if ((temp244 == 3)) {
                        CreditMgmtTestCaseS477();
                        goto label208;
                    }
                    if ((temp244 == 4)) {
                        CreditMgmtTestCaseS478();
                        goto label208;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker6)));
                label208:
;
                    goto label209;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S580\'.");
            label209:
;
                goto label213;
            }
            if ((temp249 == 2)) {
                this.Manager.Comment("reaching state \'S591\'");
                int temp248 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)));
                if ((temp248 == 0)) {
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S594\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S595\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S596\'");
                    int temp246 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker11)));
                    if ((temp246 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label210;
                    }
                    if ((temp246 == 1)) {
                        CreditMgmtTestCaseS511();
                        goto label210;
                    }
                    if ((temp246 == 2)) {
                        CreditMgmtTestCaseS512();
                        goto label210;
                    }
                    if ((temp246 == 3)) {
                        CreditMgmtTestCaseS513();
                        goto label210;
                    }
                    if ((temp246 == 4)) {
                        CreditMgmtTestCaseS514();
                        goto label210;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker11)));
                label210:
;
                    goto label212;
                }
                if ((temp248 == 1)) {
                    this.Manager.Comment("reaching state \'S597\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S598\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S599\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S600\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S601\'");
                    int temp247 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker16)));
                    if ((temp247 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label211;
                    }
                    if ((temp247 == 1)) {
                        CreditMgmtTestCaseS548();
                        goto label211;
                    }
                    if ((temp247 == 2)) {
                        CreditMgmtTestCaseS549();
                        goto label211;
                    }
                    if ((temp247 == 3)) {
                        CreditMgmtTestCaseS550();
                        goto label211;
                    }
                    if ((temp247 == 4)) {
                        CreditMgmtTestCaseS551();
                        goto label211;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS578CreditOperationResponseChecker16)));
                label211:
;
                    goto label212;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S591\'.");
            label212:
;
                goto label213;
            }
            if ((temp249 == 3)) {
                CreditMgmtTestCaseS99();
                goto label213;
            }
            throw new InvalidOperationException("never reached");
        label213:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS578ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS578ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S585");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S585");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S585");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S585");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S585");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S585");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker129() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S590");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S590");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S590");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S596");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S596");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578CreditOperationResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS578ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS602() {
            this.Manager.BeginTest("CreditMgmtTestCaseS602");
            this.Manager.Comment("reaching state \'S602\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp250;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp250);
            this.Manager.AddReturn(ReadConfigInfo, null, temp250);
            this.Manager.Comment("reaching state \'S603\'");
            int temp257 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS602ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS602ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS602ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS602ReadConfigChecker3)));
            if ((temp257 == 0)) {
                CreditMgmtTestCaseS382();
                goto label220;
            }
            if ((temp257 == 1)) {
                this.Manager.Comment("reaching state \'S604\'");
                int temp253 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)));
                if ((temp253 == 0)) {
                    this.Manager.Comment("reaching state \'S605\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S606\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S607\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S608\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S609\'");
                    int temp251 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker1)));
                    if ((temp251 == 0)) {
                        CreditMgmtTestCaseS51();
                        goto label214;
                    }
                    if ((temp251 == 1)) {
                        CreditMgmtTestCaseS52();
                        goto label214;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker1)));
                label214:
;
                    goto label216;
                }
                if ((temp253 == 1)) {
                    this.Manager.Comment("reaching state \'S610\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S611\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S612\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S613\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S614\'");
                    int temp252 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS602ExpectDisconnectChecker)));
                    if ((temp252 == 0)) {
                        CreditMgmtTestCaseS416();
                        goto label215;
                    }
                    if ((temp252 == 1)) {
                        this.Manager.Comment("reaching state \'S615\'");
                        goto label215;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS602ExpectDisconnectChecker)));
                label215:
;
                    goto label216;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S604\'.");
            label216:
;
                goto label220;
            }
            if ((temp257 == 2)) {
                this.Manager.Comment("reaching state \'S616\'");
                int temp256 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
                if ((temp256 == 0)) {
                    this.Manager.Comment("reaching state \'S617\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S618\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S619\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S620\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S621\'");
                    int temp254 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker4)));
                    if ((temp254 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label217;
                    }
                    if ((temp254 == 1)) {
                        CreditMgmtTestCaseS373();
                        goto label217;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker4)));
                label217:
;
                    goto label219;
                }
                if ((temp256 == 1)) {
                    this.Manager.Comment("reaching state \'S622\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302 and server implementation supports multicred" +
                            "it\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S623\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S624\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S625\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S626\'");
                    int temp255 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker9)));
                    if ((temp255 == 0)) {
                        CreditMgmtTestCaseS490();
                        goto label218;
                    }
                    if ((temp255 == 1)) {
                        CreditMgmtTestCaseS548();
                        goto label218;
                    }
                    if ((temp255 == 2)) {
                        CreditMgmtTestCaseS549();
                        goto label218;
                    }
                    if ((temp255 == 3)) {
                        CreditMgmtTestCaseS550();
                        goto label218;
                    }
                    if ((temp255 == 4)) {
                        CreditMgmtTestCaseS551();
                        goto label218;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS602CreditOperationResponseChecker9)));
                label218:
;
                    goto label219;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S616\'.");
            label219:
;
                goto label220;
            }
            if ((temp257 == 3)) {
                CreditMgmtTestCaseS99();
                goto label220;
            }
            throw new InvalidOperationException("never reached");
        label220:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS602ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS602ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S609");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S609");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S609");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S609");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S609");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S609");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S614");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S614");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S614");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS602ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS602ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S621");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S621");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S621");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S621");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S621");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S621");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS602ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S627
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS627() {
            this.Manager.BeginTest("CreditMgmtTestCaseS627");
            this.Manager.Comment("reaching state \'S627\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp258;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp258);
            this.Manager.AddReturn(ReadConfigInfo, null, temp258);
            this.Manager.Comment("reaching state \'S628\'");
            int temp265 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS627ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS627ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS627ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS627ReadConfigChecker3)));
            if ((temp265 == 0)) {
                this.Manager.Comment("reaching state \'S629\'");
                int temp261 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)));
                if ((temp261 == 0)) {
                    this.Manager.Comment("reaching state \'S630\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S631\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S632\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S633\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S634\'");
                    int temp259 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker4)));
                    if ((temp259 == 0)) {
                        this.Manager.Comment("reaching state \'S635\'");
                        goto label221;
                    }
                    if ((temp259 == 1)) {
                        this.Manager.Comment("reaching state \'S636\'");
                        goto label221;
                    }
                    if ((temp259 == 2)) {
                        this.Manager.Comment("reaching state \'S637\'");
                        goto label221;
                    }
                    if ((temp259 == 3)) {
                        this.Manager.Comment("reaching state \'S638\'");
                        goto label221;
                    }
                    if ((temp259 == 4)) {
                        this.Manager.Comment("reaching state \'S639\'");
                        goto label221;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker4)));
                label221:
;
                    goto label223;
                }
                if ((temp261 == 1)) {
                    this.Manager.Comment("reaching state \'S640\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S641\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S642\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S643\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S644\'");
                    int temp260 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker9)));
                    if ((temp260 == 0)) {
                        CreditMgmtTestCaseS45();
                        goto label222;
                    }
                    if ((temp260 == 1)) {
                        CreditMgmtTestCaseS645();
                        goto label222;
                    }
                    if ((temp260 == 2)) {
                        CreditMgmtTestCaseS646();
                        goto label222;
                    }
                    if ((temp260 == 3)) {
                        CreditMgmtTestCaseS647();
                        goto label222;
                    }
                    if ((temp260 == 4)) {
                        CreditMgmtTestCaseS648();
                        goto label222;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker9)));
                label222:
;
                    goto label223;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S629\'.");
            label223:
;
                goto label227;
            }
            if ((temp265 == 1)) {
                this.Manager.Comment("reaching state \'S649\'");
                int temp264 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
                if ((temp264 == 0)) {
                    this.Manager.Comment("reaching state \'S650\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S651\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S652\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S653\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S654\'");
                    int temp262 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker11)));
                    if ((temp262 == 0)) {
                        CreditMgmtTestCaseS655();
                        goto label224;
                    }
                    if ((temp262 == 1)) {
                        CreditMgmtTestCaseS656();
                        goto label224;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker11)));
                label224:
;
                    goto label226;
                }
                if ((temp264 == 1)) {
                    this.Manager.Comment("reaching state \'S657\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S658\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S659\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S660\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S661\'");
                    int temp263 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker16)));
                    if ((temp263 == 0)) {
                        this.Manager.Comment("reaching state \'S662\'");
                        goto label225;
                    }
                    if ((temp263 == 1)) {
                        this.Manager.Comment("reaching state \'S663\'");
                        goto label225;
                    }
                    if ((temp263 == 2)) {
                        this.Manager.Comment("reaching state \'S664\'");
                        goto label225;
                    }
                    if ((temp263 == 3)) {
                        this.Manager.Comment("reaching state \'S665\'");
                        goto label225;
                    }
                    if ((temp263 == 4)) {
                        this.Manager.Comment("reaching state \'S666\'");
                        goto label225;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker14)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS627CreditOperationResponseChecker16)));
                label225:
;
                    goto label226;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S649\'.");
            label226:
;
                goto label227;
            }
            if ((temp265 == 2)) {
                CreditMgmtTestCaseS667();
                goto label227;
            }
            if ((temp265 == 3)) {
                CreditMgmtTestCaseS99();
                goto label227;
            }
            throw new InvalidOperationException("never reached");
        label227:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS627ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S628");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S634");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S634");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S634");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S634");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S644");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S628");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S654");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S654");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S654");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS655() {
            this.Manager.Comment("reaching state \'S655\'");
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S654");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S654");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S654");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S661");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S661");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S661");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627CreditOperationResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S661");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS627ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S628");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void CreditMgmtTestCaseS627ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S628");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S63
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS63() {
            this.Manager.BeginTest("CreditMgmtTestCaseS63");
            this.Manager.Comment("reaching state \'S63\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp266;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp266);
            this.Manager.AddReturn(ReadConfigInfo, null, temp266);
            this.Manager.Comment("reaching state \'S64\'");
            int temp273 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS63ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS63ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS63ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS63ReadConfigChecker3)));
            if ((temp273 == 0)) {
                CreditMgmtTestCaseS106();
                goto label234;
            }
            if ((temp273 == 1)) {
                this.Manager.Comment("reaching state \'S65\'");
                int temp269 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker141)));
                if ((temp269 == 0)) {
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S67\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S70\'");
                    int temp267 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker)));
                    if ((temp267 == 0)) {
                        CreditMgmtTestCaseS72();
                        goto label228;
                    }
                    if ((temp267 == 1)) {
                        this.Manager.Comment("reaching state \'S71\'");
                        goto label228;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker)));
                label228:
;
                    goto label230;
                }
                if ((temp269 == 1)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S75\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S76\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                            "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S77\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S78\'");
                    int temp268 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker1)));
                    if ((temp268 == 0)) {
                        CreditMgmtTestCaseS79();
                        goto label229;
                    }
                    if ((temp268 == 1)) {
                        this.Manager.Comment("reaching state \'S81\'");
                        goto label229;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker1)));
                label229:
;
                    goto label230;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S65\'.");
            label230:
;
                goto label234;
            }
            if ((temp273 == 2)) {
                this.Manager.Comment("reaching state \'S82\'");
                int temp272 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker142)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker143)));
                if ((temp272 == 0)) {
                    this.Manager.Comment("reaching state \'S83\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S84\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S86\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S87\'");
                    int temp270 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker2)));
                    if ((temp270 == 0)) {
                        CreditMgmtTestCaseS88();
                        goto label231;
                    }
                    if ((temp270 == 1)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        goto label231;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker2)));
                label231:
;
                    goto label233;
                }
                if ((temp272 == 1)) {
                    this.Manager.Comment("reaching state \'S91\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S92\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S93\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Vali" +
                            "dMid, creditCharge type is CreditChargeExceedBoundary\"");
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S95\'");
                    int temp271 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker3)));
                    if ((temp271 == 0)) {
                        CreditMgmtTestCaseS97();
                        goto label232;
                    }
                    if ((temp271 == 1)) {
                        this.Manager.Comment("reaching state \'S96\'");
                        goto label232;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS63CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS63ExpectDisconnectChecker3)));
                label232:
;
                    goto label233;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S82\'.");
            label233:
;
                goto label234;
            }
            if ((temp273 == 3)) {
                CreditMgmtTestCaseS99();
                goto label234;
            }
            throw new InvalidOperationException("never reached");
        label234:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS63ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S64");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS63ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S64");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS63CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S70");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS63ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker141() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS63CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S78");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS63ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS63ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S64");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker142() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS63CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S87");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S87");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS63ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker143() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS63CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS63ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS63ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S64");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S681
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS681() {
            this.Manager.BeginTest("CreditMgmtTestCaseS681");
            this.Manager.Comment("reaching state \'S681\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp274;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp274);
            this.Manager.AddReturn(ReadConfigInfo, null, temp274);
            this.Manager.Comment("reaching state \'S682\'");
            int temp281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS681ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS681ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS681ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS681ReadConfigChecker3)));
            if ((temp281 == 0)) {
                CreditMgmtTestCaseS106();
                goto label241;
            }
            if ((temp281 == 1)) {
                this.Manager.Comment("reaching state \'S683\'");
                int temp277 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker144)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker145)));
                if ((temp277 == 0)) {
                    this.Manager.Comment("reaching state \'S684\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S685\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S686\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                            "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S687\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S688\'");
                    int temp275 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker1)));
                    if ((temp275 == 0)) {
                        CreditMgmtTestCaseS689();
                        goto label235;
                    }
                    if ((temp275 == 1)) {
                        CreditMgmtTestCaseS388();
                        goto label235;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker1)));
                label235:
;
                    goto label237;
                }
                if ((temp277 == 1)) {
                    this.Manager.Comment("reaching state \'S691\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S692\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S693\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S694\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S695\'");
                    int temp276 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker3)));
                    if ((temp276 == 0)) {
                        CreditMgmtTestCaseS696();
                        goto label236;
                    }
                    if ((temp276 == 1)) {
                        CreditMgmtTestCaseS395();
                        goto label236;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker3)));
                label236:
;
                    goto label237;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S683\'.");
            label237:
;
                goto label241;
            }
            if ((temp281 == 2)) {
                this.Manager.Comment("reaching state \'S698\'");
                int temp280 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker146)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker147)));
                if ((temp280 == 0)) {
                    this.Manager.Comment("reaching state \'S699\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S700\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S701\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S702\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S703\'");
                    int temp278 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker5)));
                    if ((temp278 == 0)) {
                        CreditMgmtTestCaseS705();
                        goto label238;
                    }
                    if ((temp278 == 1)) {
                        this.Manager.Comment("reaching state \'S704\'");
                        goto label238;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker5)));
                label238:
;
                    goto label240;
                }
                if ((temp280 == 1)) {
                    this.Manager.Comment("reaching state \'S707\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S708\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S709\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S710\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S711\'");
                    int temp279 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker8)));
                    if ((temp279 == 0)) {
                        CreditMgmtTestCaseS712();
                        goto label239;
                    }
                    if ((temp279 == 1)) {
                        this.Manager.Comment("reaching state \'S714\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker7))) != -1)) {
                            this.Manager.Comment("reaching state \'S715\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker7)));
                        }
                        goto label239;
                    }
                    if ((temp279 == 2)) {
                        this.Manager.Comment("reaching state \'S716\'");
                        goto label239;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS681CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker8)));
                label239:
;
                    goto label240;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S698\'.");
            label240:
;
                goto label241;
            }
            if ((temp281 == 3)) {
                CreditMgmtTestCaseS99();
                goto label241;
            }
            throw new InvalidOperationException("never reached");
        label241:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS681ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S682");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS681ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S682");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker144() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS681CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S688");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S688");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS689() {
            this.Manager.Comment("reaching state \'S689\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S690\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker)));
            }
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker145() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS681CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S695");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S695");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S695");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS696() {
            this.Manager.Comment("reaching state \'S696\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S697\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker2)));
            }
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker3() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S682");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker146() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS681CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S703");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S703");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS705() {
            this.Manager.Comment("reaching state \'S705\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker4))) != -1)) {
                this.Manager.Comment("reaching state \'S706\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker4)));
            }
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker4() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker5() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker147() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS681CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S711");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S711");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S711");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS712() {
            this.Manager.Comment("reaching state \'S712\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker6))) != -1)) {
                this.Manager.Comment("reaching state \'S713\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS681ExpectDisconnectChecker6)));
            }
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker6() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S711");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S711");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S711");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker7() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681ExpectDisconnectChecker8() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS681ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S682");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S717
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS717() {
            this.Manager.BeginTest("CreditMgmtTestCaseS717");
            this.Manager.Comment("reaching state \'S717\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp282;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp282);
            this.Manager.AddReturn(ReadConfigInfo, null, temp282);
            this.Manager.Comment("reaching state \'S718\'");
            int temp289 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS717ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS717ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS717ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS717ReadConfigChecker3)));
            if ((temp289 == 0)) {
                CreditMgmtTestCaseS106();
                goto label248;
            }
            if ((temp289 == 1)) {
                this.Manager.Comment("reaching state \'S719\'");
                int temp285 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker148)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker149)));
                if ((temp285 == 0)) {
                    this.Manager.Comment("reaching state \'S720\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S721\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S722\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Unav" +
                            "ailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S723\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S724\'");
                    int temp283 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS717ExpectDisconnectChecker)));
                    if ((temp283 == 0)) {
                        CreditMgmtTestCaseS689();
                        goto label242;
                    }
                    if ((temp283 == 1)) {
                        this.Manager.Comment("reaching state \'S725\'");
                        goto label242;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS717ExpectDisconnectChecker)));
                label242:
;
                    goto label244;
                }
                if ((temp285 == 1)) {
                    this.Manager.Comment("reaching state \'S726\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S727\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S728\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S729\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S730\'");
                    int temp284 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS717ExpectDisconnectChecker1)));
                    if ((temp284 == 0)) {
                        CreditMgmtTestCaseS696();
                        goto label243;
                    }
                    if ((temp284 == 1)) {
                        this.Manager.Comment("reaching state \'S731\'");
                        goto label243;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS717ExpectDisconnectChecker1)));
                label243:
;
                    goto label244;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S719\'.");
            label244:
;
                goto label248;
            }
            if ((temp289 == 2)) {
                this.Manager.Comment("reaching state \'S732\'");
                int temp288 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker150)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker151)));
                if ((temp288 == 0)) {
                    this.Manager.Comment("reaching state \'S733\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S734\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S735\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S736\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S737\'");
                    int temp286 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS717ExpectDisconnectChecker2)));
                    if ((temp286 == 0)) {
                        CreditMgmtTestCaseS705();
                        goto label245;
                    }
                    if ((temp286 == 1)) {
                        this.Manager.Comment("reaching state \'S738\'");
                        goto label245;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS717ExpectDisconnectChecker2)));
                label245:
;
                    goto label247;
                }
                if ((temp288 == 1)) {
                    this.Manager.Comment("reaching state \'S739\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S740\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S741\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S742\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S743\'");
                    int temp287 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker7)));
                    if ((temp287 == 0)) {
                        CreditMgmtTestCaseS27();
                        goto label246;
                    }
                    if ((temp287 == 1)) {
                        CreditMgmtTestCaseS744();
                        goto label246;
                    }
                    if ((temp287 == 2)) {
                        CreditMgmtTestCaseS745();
                        goto label246;
                    }
                    if ((temp287 == 3)) {
                        CreditMgmtTestCaseS746();
                        goto label246;
                    }
                    if ((temp287 == 4)) {
                        CreditMgmtTestCaseS747();
                        goto label246;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS717CreditOperationResponseChecker7)));
                label246:
;
                    goto label247;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S732\'.");
            label247:
;
                goto label248;
            }
            if ((temp289 == 3)) {
                CreditMgmtTestCaseS99();
                goto label248;
            }
            throw new InvalidOperationException("never reached");
        label248:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS717ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S718");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS717ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S718");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker148() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S724");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S724");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S724");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS717ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker149() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S730");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S730");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S730");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS717ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS717ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S718");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker150() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S737");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S737");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S737");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS717ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker151() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S743");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S743");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S743");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS744() {
            this.Manager.Comment("reaching state \'S744\'");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS745() {
            this.Manager.Comment("reaching state \'S745\'");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS746() {
            this.Manager.Comment("reaching state \'S746\'");
        }
        
        private void CreditMgmtTestCaseS717CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S743");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS747() {
            this.Manager.Comment("reaching state \'S747\'");
        }
        
        private void CreditMgmtTestCaseS717ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S718");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S748
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS748() {
            this.Manager.BeginTest("CreditMgmtTestCaseS748");
            this.Manager.Comment("reaching state \'S748\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp290;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp290);
            this.Manager.AddReturn(ReadConfigInfo, null, temp290);
            this.Manager.Comment("reaching state \'S749\'");
            int temp297 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS748ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS748ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS748ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS748ReadConfigChecker3)));
            if ((temp297 == 0)) {
                CreditMgmtTestCaseS106();
                goto label255;
            }
            if ((temp297 == 1)) {
                this.Manager.Comment("reaching state \'S750\'");
                int temp293 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker152)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker153)));
                if ((temp293 == 0)) {
                    this.Manager.Comment("reaching state \'S751\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S752\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S753\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Vali" +
                            "dMid, creditCharge type is CreditChargeExceedBoundary\"");
                    this.Manager.Comment("reaching state \'S754\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S755\'");
                    int temp291 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS748ExpectDisconnectChecker)));
                    if ((temp291 == 0)) {
                        CreditMgmtTestCaseS689();
                        goto label249;
                    }
                    if ((temp291 == 1)) {
                        this.Manager.Comment("reaching state \'S756\'");
                        goto label249;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS748ExpectDisconnectChecker)));
                label249:
;
                    goto label251;
                }
                if ((temp293 == 1)) {
                    this.Manager.Comment("reaching state \'S757\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S758\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S759\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S760\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S761\'");
                    int temp292 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker2)));
                    if ((temp292 == 0)) {
                        CreditMgmtTestCaseS11();
                        goto label250;
                    }
                    if ((temp292 == 1)) {
                        CreditMgmtTestCaseS762();
                        goto label250;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker2)));
                label250:
;
                    goto label251;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S750\'.");
            label251:
;
                goto label255;
            }
            if ((temp297 == 2)) {
                this.Manager.Comment("reaching state \'S763\'");
                int temp296 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker154)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker155)));
                if ((temp296 == 0)) {
                    this.Manager.Comment("reaching state \'S764\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S765\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S766\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S767\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S768\'");
                    int temp294 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker4)));
                    if ((temp294 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label252;
                    }
                    if ((temp294 == 1)) {
                        CreditMgmtTestCaseS770();
                        goto label252;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker4)));
                label252:
;
                    goto label254;
                }
                if ((temp296 == 1)) {
                    this.Manager.Comment("reaching state \'S771\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S772\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S773\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S774\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S775\'");
                    int temp295 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker6)));
                    if ((temp295 == 0)) {
                        CreditMgmtTestCaseS26();
                        goto label253;
                    }
                    if ((temp295 == 1)) {
                        CreditMgmtTestCaseS27();
                        goto label253;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS748CreditOperationResponseChecker6)));
                label253:
;
                    goto label254;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S763\'.");
            label254:
;
                goto label255;
            }
            if ((temp297 == 3)) {
                CreditMgmtTestCaseS99();
                goto label255;
            }
            throw new InvalidOperationException("never reached");
        label255:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS748ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S749");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS748ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S749");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker152() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S755");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S755");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S755");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS748ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker153() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S761");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S761");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S761");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S761");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S761");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S761");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS762() {
            this.Manager.Comment("reaching state \'S762\'");
        }
        
        private void CreditMgmtTestCaseS748ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S749");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker154() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S768");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S768");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S768");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS770() {
            this.Manager.Comment("reaching state \'S770\'");
        }
        
        private void PreConstraintChecker155() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S775");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S775");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S775");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS748CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S775");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S775");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S775");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS748ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S749");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS776() {
            this.Manager.BeginTest("CreditMgmtTestCaseS776");
            this.Manager.Comment("reaching state \'S776\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp298;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp298);
            this.Manager.AddReturn(ReadConfigInfo, null, temp298);
            this.Manager.Comment("reaching state \'S777\'");
            int temp305 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS776ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS776ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS776ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS776ReadConfigChecker3)));
            if ((temp305 == 0)) {
                CreditMgmtTestCaseS106();
                goto label262;
            }
            if ((temp305 == 1)) {
                this.Manager.Comment("reaching state \'S778\'");
                int temp301 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker156)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker157)));
                if ((temp301 == 0)) {
                    this.Manager.Comment("reaching state \'S779\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S780\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S781\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S782\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S783\'");
                    int temp299 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker1)));
                    if ((temp299 == 0)) {
                        CreditMgmtTestCaseS655();
                        goto label256;
                    }
                    if ((temp299 == 1)) {
                        CreditMgmtTestCaseS656();
                        goto label256;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker1)));
                label256:
;
                    goto label258;
                }
                if ((temp301 == 1)) {
                    this.Manager.Comment("reaching state \'S784\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S785\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S786\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S787\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S788\'");
                    int temp300 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker6)));
                    if ((temp300 == 0)) {
                        CreditMgmtTestCaseS10();
                        goto label257;
                    }
                    if ((temp300 == 1)) {
                        CreditMgmtTestCaseS11();
                        goto label257;
                    }
                    if ((temp300 == 2)) {
                        CreditMgmtTestCaseS12();
                        goto label257;
                    }
                    if ((temp300 == 3)) {
                        CreditMgmtTestCaseS8();
                        goto label257;
                    }
                    if ((temp300 == 4)) {
                        CreditMgmtTestCaseS9();
                        goto label257;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker6)));
                label257:
;
                    goto label258;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S778\'.");
            label258:
;
                goto label262;
            }
            if ((temp305 == 2)) {
                this.Manager.Comment("reaching state \'S789\'");
                int temp304 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker158)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker159)));
                if ((temp304 == 0)) {
                    this.Manager.Comment("reaching state \'S790\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S791\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S792\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S793\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S794\'");
                    int temp302 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker8)));
                    if ((temp302 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label259;
                    }
                    if ((temp302 == 1)) {
                        CreditMgmtTestCaseS770();
                        goto label259;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker8)));
                label259:
;
                    goto label261;
                }
                if ((temp304 == 1)) {
                    this.Manager.Comment("reaching state \'S795\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S796\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S797\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                            "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S798\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S799\'");
                    int temp303 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS776ExpectDisconnectChecker)));
                    if ((temp303 == 0)) {
                        CreditMgmtTestCaseS712();
                        goto label260;
                    }
                    if ((temp303 == 1)) {
                        this.Manager.Comment("reaching state \'S800\'");
                        goto label260;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS776CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS776ExpectDisconnectChecker)));
                label260:
;
                    goto label261;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S789\'.");
            label261:
;
                goto label262;
            }
            if ((temp305 == 3)) {
                CreditMgmtTestCaseS99();
                goto label262;
            }
            throw new InvalidOperationException("never reached");
        label262:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS776ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS776ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker156() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S783");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S783");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S783");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S783");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S783");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S783");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker157() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S788");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S788");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S788");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S788");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S788");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S788");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S788");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S788");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker158() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S794");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S794");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S794");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S794");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S794");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S794");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker159() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS776CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S799");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S799");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S799");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS776ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS776ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S801
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS801() {
            this.Manager.BeginTest("CreditMgmtTestCaseS801");
            this.Manager.Comment("reaching state \'S801\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp306;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp306);
            this.Manager.AddReturn(ReadConfigInfo, null, temp306);
            this.Manager.Comment("reaching state \'S802\'");
            int temp313 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS801ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS801ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS801ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS801ReadConfigChecker3)));
            if ((temp313 == 0)) {
                CreditMgmtTestCaseS106();
                goto label269;
            }
            if ((temp313 == 1)) {
                this.Manager.Comment("reaching state \'S803\'");
                int temp309 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker160)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker161)));
                if ((temp309 == 0)) {
                    this.Manager.Comment("reaching state \'S804\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S805\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S806\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S807\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S808\'");
                    int temp307 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker4)));
                    if ((temp307 == 0)) {
                        CreditMgmtTestCaseS656();
                        goto label263;
                    }
                    if ((temp307 == 1)) {
                        CreditMgmtTestCaseS809();
                        goto label263;
                    }
                    if ((temp307 == 2)) {
                        CreditMgmtTestCaseS810();
                        goto label263;
                    }
                    if ((temp307 == 3)) {
                        CreditMgmtTestCaseS811();
                        goto label263;
                    }
                    if ((temp307 == 4)) {
                        CreditMgmtTestCaseS812();
                        goto label263;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker4)));
                label263:
;
                    goto label265;
                }
                if ((temp309 == 1)) {
                    this.Manager.Comment("reaching state \'S813\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S814\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S815\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeSetZero\"");
                    this.Manager.Comment("reaching state \'S816\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S817\'");
                    int temp308 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS801ExpectDisconnectChecker1)));
                    if ((temp308 == 0)) {
                        CreditMgmtTestCaseS696();
                        goto label264;
                    }
                    if ((temp308 == 1)) {
                        this.Manager.Comment("reaching state \'S818\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS801ExpectDisconnectChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S819\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS801ExpectDisconnectChecker)));
                        }
                        goto label264;
                    }
                    if ((temp308 == 2)) {
                        this.Manager.Comment("reaching state \'S820\'");
                        goto label264;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS801ExpectDisconnectChecker1)));
                label264:
;
                    goto label265;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S803\'.");
            label265:
;
                goto label269;
            }
            if ((temp313 == 2)) {
                this.Manager.Comment("reaching state \'S821\'");
                int temp312 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker162)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker163)));
                if ((temp312 == 0)) {
                    this.Manager.Comment("reaching state \'S822\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S823\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S824\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S825\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S826\'");
                    int temp310 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker11)));
                    if ((temp310 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label266;
                    }
                    if ((temp310 == 1)) {
                        CreditMgmtTestCaseS827();
                        goto label266;
                    }
                    if ((temp310 == 2)) {
                        CreditMgmtTestCaseS828();
                        goto label266;
                    }
                    if ((temp310 == 3)) {
                        CreditMgmtTestCaseS829();
                        goto label266;
                    }
                    if ((temp310 == 4)) {
                        CreditMgmtTestCaseS830();
                        goto label266;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker11)));
                label266:
;
                    goto label268;
                }
                if ((temp312 == 1)) {
                    this.Manager.Comment("reaching state \'S831\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S832\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S833\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S834\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S835\'");
                    int temp311 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker13)));
                    if ((temp311 == 0)) {
                        CreditMgmtTestCaseS26();
                        goto label267;
                    }
                    if ((temp311 == 1)) {
                        CreditMgmtTestCaseS27();
                        goto label267;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS801CreditOperationResponseChecker13)));
                label267:
;
                    goto label268;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S821\'.");
            label268:
;
                goto label269;
            }
            if ((temp313 == 3)) {
                CreditMgmtTestCaseS99();
                goto label269;
            }
            throw new InvalidOperationException("never reached");
        label269:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS801ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S802");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS801ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S802");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker160() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker161() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S817");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S817");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S817");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S817");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S817");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S817");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS801ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS801ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S802");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker162() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S826");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S826");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S826");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S826");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker163() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S835");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S835");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S835");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S835");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S835");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S835");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS801ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S802");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S836
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS836() {
            this.Manager.BeginTest("CreditMgmtTestCaseS836");
            this.Manager.Comment("reaching state \'S836\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp314;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp314);
            this.Manager.AddReturn(ReadConfigInfo, null, temp314);
            this.Manager.Comment("reaching state \'S837\'");
            int temp321 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS836ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS836ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS836ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS836ReadConfigChecker3)));
            if ((temp321 == 0)) {
                CreditMgmtTestCaseS106();
                goto label276;
            }
            if ((temp321 == 1)) {
                this.Manager.Comment("reaching state \'S838\'");
                int temp317 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker164)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker165)));
                if ((temp317 == 0)) {
                    this.Manager.Comment("reaching state \'S839\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S840\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S841\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S842\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S843\'");
                    int temp315 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker1)));
                    if ((temp315 == 0)) {
                        CreditMgmtTestCaseS655();
                        goto label270;
                    }
                    if ((temp315 == 1)) {
                        CreditMgmtTestCaseS656();
                        goto label270;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker1)));
                label270:
;
                    goto label272;
                }
                if ((temp317 == 1)) {
                    this.Manager.Comment("reaching state \'S844\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S845\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S846\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S847\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S848\'");
                    int temp316 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker3)));
                    if ((temp316 == 0)) {
                        CreditMgmtTestCaseS11();
                        goto label271;
                    }
                    if ((temp316 == 1)) {
                        CreditMgmtTestCaseS762();
                        goto label271;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker3)));
                label271:
;
                    goto label272;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S838\'.");
            label272:
;
                goto label276;
            }
            if ((temp321 == 2)) {
                this.Manager.Comment("reaching state \'S849\'");
                int temp320 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker166)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker167)));
                if ((temp320 == 0)) {
                    this.Manager.Comment("reaching state \'S850\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S851\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S852\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S853\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S854\'");
                    int temp318 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker5)));
                    if ((temp318 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label273;
                    }
                    if ((temp318 == 1)) {
                        CreditMgmtTestCaseS770();
                        goto label273;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker5)));
                label273:
;
                    goto label275;
                }
                if ((temp320 == 1)) {
                    this.Manager.Comment("reaching state \'S855\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S856\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S857\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                            "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S858\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S859\'");
                    int temp319 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS836ExpectDisconnectChecker)));
                    if ((temp319 == 0)) {
                        CreditMgmtTestCaseS712();
                        goto label274;
                    }
                    if ((temp319 == 1)) {
                        this.Manager.Comment("reaching state \'S860\'");
                        goto label274;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS836CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS836ExpectDisconnectChecker)));
                label274:
;
                    goto label275;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S849\'.");
            label275:
;
                goto label276;
            }
            if ((temp321 == 3)) {
                CreditMgmtTestCaseS99();
                goto label276;
            }
            throw new InvalidOperationException("never reached");
        label276:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS836ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S837");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS836ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S837");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker164() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S843");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S843");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S843");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S843");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker165() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S848");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S848");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S848");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S848");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S848");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S848");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS836ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S837");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker166() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S854");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S854");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S854");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S854");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S854");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S854");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker167() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS836CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S859");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S859");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S859");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS836ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS836ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S837");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S861
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS861() {
            this.Manager.BeginTest("CreditMgmtTestCaseS861");
            this.Manager.Comment("reaching state \'S861\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp322;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp322);
            this.Manager.AddReturn(ReadConfigInfo, null, temp322);
            this.Manager.Comment("reaching state \'S862\'");
            int temp329 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS861ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS861ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS861ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS861ReadConfigChecker3)));
            if ((temp329 == 0)) {
                CreditMgmtTestCaseS106();
                goto label283;
            }
            if ((temp329 == 1)) {
                this.Manager.Comment("reaching state \'S863\'");
                int temp325 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker168)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker169)));
                if ((temp325 == 0)) {
                    this.Manager.Comment("reaching state \'S864\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S865\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S866\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S867\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S868\'");
                    int temp323 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker4)));
                    if ((temp323 == 0)) {
                        CreditMgmtTestCaseS656();
                        goto label277;
                    }
                    if ((temp323 == 1)) {
                        CreditMgmtTestCaseS809();
                        goto label277;
                    }
                    if ((temp323 == 2)) {
                        CreditMgmtTestCaseS810();
                        goto label277;
                    }
                    if ((temp323 == 3)) {
                        CreditMgmtTestCaseS811();
                        goto label277;
                    }
                    if ((temp323 == 4)) {
                        CreditMgmtTestCaseS812();
                        goto label277;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker4)));
                label277:
;
                    goto label279;
                }
                if ((temp325 == 1)) {
                    this.Manager.Comment("reaching state \'S869\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S870\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S871\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S872\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S873\'");
                    int temp324 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker9)));
                    if ((temp324 == 0)) {
                        CreditMgmtTestCaseS10();
                        goto label278;
                    }
                    if ((temp324 == 1)) {
                        CreditMgmtTestCaseS11();
                        goto label278;
                    }
                    if ((temp324 == 2)) {
                        CreditMgmtTestCaseS12();
                        goto label278;
                    }
                    if ((temp324 == 3)) {
                        CreditMgmtTestCaseS8();
                        goto label278;
                    }
                    if ((temp324 == 4)) {
                        CreditMgmtTestCaseS9();
                        goto label278;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker9)));
                label278:
;
                    goto label279;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S863\'.");
            label279:
;
                goto label283;
            }
            if ((temp329 == 2)) {
                this.Manager.Comment("reaching state \'S874\'");
                int temp328 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker170)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker171)));
                if ((temp328 == 0)) {
                    this.Manager.Comment("reaching state \'S875\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S876\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S877\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S878\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S879\'");
                    int temp326 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker14)));
                    if ((temp326 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label280;
                    }
                    if ((temp326 == 1)) {
                        CreditMgmtTestCaseS827();
                        goto label280;
                    }
                    if ((temp326 == 2)) {
                        CreditMgmtTestCaseS828();
                        goto label280;
                    }
                    if ((temp326 == 3)) {
                        CreditMgmtTestCaseS829();
                        goto label280;
                    }
                    if ((temp326 == 4)) {
                        CreditMgmtTestCaseS830();
                        goto label280;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker11)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker13)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker14)));
                label280:
;
                    goto label282;
                }
                if ((temp328 == 1)) {
                    this.Manager.Comment("reaching state \'S880\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S881\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S882\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S883\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S884\'");
                    int temp327 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker16)));
                    if ((temp327 == 0)) {
                        CreditMgmtTestCaseS26();
                        goto label281;
                    }
                    if ((temp327 == 1)) {
                        CreditMgmtTestCaseS27();
                        goto label281;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker15)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS861CreditOperationResponseChecker16)));
                label281:
;
                    goto label282;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S874\'.");
            label282:
;
                goto label283;
            }
            if ((temp329 == 3)) {
                CreditMgmtTestCaseS99();
                goto label283;
            }
            throw new InvalidOperationException("never reached");
        label283:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS861ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S862");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS861ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S862");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker168() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker169() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S873");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S873");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S873");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S873");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S862");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker170() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S879");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S879");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S879");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S879");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker171() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S884");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S884");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S884");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861CreditOperationResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S884");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S884");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S884");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS861ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S862");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S885
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS885() {
            this.Manager.BeginTest("CreditMgmtTestCaseS885");
            this.Manager.Comment("reaching state \'S885\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp330;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp330);
            this.Manager.AddReturn(ReadConfigInfo, null, temp330);
            this.Manager.Comment("reaching state \'S886\'");
            int temp337 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS885ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS885ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS885ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS885ReadConfigChecker3)));
            if ((temp337 == 0)) {
                CreditMgmtTestCaseS106();
                goto label290;
            }
            if ((temp337 == 1)) {
                this.Manager.Comment("reaching state \'S887\'");
                int temp333 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker172)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker173)));
                if ((temp333 == 0)) {
                    this.Manager.Comment("reaching state \'S888\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S889\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S890\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S891\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S892\'");
                    int temp331 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker4)));
                    if ((temp331 == 0)) {
                        CreditMgmtTestCaseS656();
                        goto label284;
                    }
                    if ((temp331 == 1)) {
                        CreditMgmtTestCaseS809();
                        goto label284;
                    }
                    if ((temp331 == 2)) {
                        CreditMgmtTestCaseS810();
                        goto label284;
                    }
                    if ((temp331 == 3)) {
                        CreditMgmtTestCaseS811();
                        goto label284;
                    }
                    if ((temp331 == 4)) {
                        CreditMgmtTestCaseS812();
                        goto label284;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker4)));
                label284:
;
                    goto label286;
                }
                if ((temp333 == 1)) {
                    this.Manager.Comment("reaching state \'S893\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S894\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S895\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S896\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S897\'");
                    int temp332 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker6)));
                    if ((temp332 == 0)) {
                        CreditMgmtTestCaseS11();
                        goto label285;
                    }
                    if ((temp332 == 1)) {
                        CreditMgmtTestCaseS762();
                        goto label285;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker6)));
                label285:
;
                    goto label286;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S887\'.");
            label286:
;
                goto label290;
            }
            if ((temp337 == 2)) {
                this.Manager.Comment("reaching state \'S898\'");
                int temp336 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker174)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker175)));
                if ((temp336 == 0)) {
                    this.Manager.Comment("reaching state \'S899\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S900\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S901\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S902\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S903\'");
                    int temp334 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker11)));
                    if ((temp334 == 0)) {
                        CreditMgmtTestCaseS769();
                        goto label287;
                    }
                    if ((temp334 == 1)) {
                        CreditMgmtTestCaseS827();
                        goto label287;
                    }
                    if ((temp334 == 2)) {
                        CreditMgmtTestCaseS828();
                        goto label287;
                    }
                    if ((temp334 == 3)) {
                        CreditMgmtTestCaseS829();
                        goto label287;
                    }
                    if ((temp334 == 4)) {
                        CreditMgmtTestCaseS830();
                        goto label287;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker8)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker9)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker10)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker11)));
                label287:
;
                    goto label289;
                }
                if ((temp336 == 1)) {
                    this.Manager.Comment("reaching state \'S904\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S905\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S906\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S907\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S908\'");
                    int temp335 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker13)));
                    if ((temp335 == 0)) {
                        CreditMgmtTestCaseS26();
                        goto label288;
                    }
                    if ((temp335 == 1)) {
                        CreditMgmtTestCaseS27();
                        goto label288;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker12)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS885CreditOperationResponseChecker13)));
                label288:
;
                    goto label289;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S898\'.");
            label289:
;
                goto label290;
            }
            if ((temp337 == 3)) {
                CreditMgmtTestCaseS99();
                goto label290;
            }
            throw new InvalidOperationException("never reached");
        label290:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS885ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS885ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker172() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2008R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012R2"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of credits in response to any non-zero value requested"", ""[TestInfo] Platform is WindowsServer2012"", ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker173() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S897");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S897");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S897");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S897");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S897");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S897");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker174() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S903");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S903");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S903");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S903");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker175() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S908");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S908");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S908");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885CreditOperationResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S908");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S908");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S908");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS885ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S909
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS909() {
            this.Manager.BeginTest("CreditMgmtTestCaseS909");
            this.Manager.Comment("reaching state \'S909\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp338;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp338);
            this.Manager.AddReturn(ReadConfigInfo, null, temp338);
            this.Manager.Comment("reaching state \'S910\'");
            int temp343 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS909ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS909ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS909ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS909ReadConfigChecker3)));
            if ((temp343 == 0)) {
                CreditMgmtTestCaseS106();
                goto label295;
            }
            if ((temp343 == 1)) {
                CreditMgmtTestCaseS382();
                goto label295;
            }
            if ((temp343 == 2)) {
                this.Manager.Comment("reaching state \'S911\'");
                int temp341 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker176)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker177)));
                if ((temp341 == 0)) {
                    this.Manager.Comment("reaching state \'S912\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S913\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S914\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2: If Connection.SupportsMultiCredit is FALSE and the size of th" +
                            "e request is greater than 68*1024 bytes, the server SHOULD<200> terminate the co" +
                            "nnection\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] <200> Section 3.3.5.2: Windows 7 without [MSKB-2536275], and Windows Server 2008 R2 without [MSKB-2536275] terminate the connection when the size of the request is greater than 64*1024 bytes. Windows Vista SP1 and Windows Server 2008 on Direct TCP transport disconnect the connection if the size of the message exceeds 128*1024 bytes, and Windows Vista SP1 and Windows Server 2008 on NetBIOS over TCP transport will disconnect the connection if the size of the message exceeds 64*1024 bytes""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server to drop the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Val" +
                            "idMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S915\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S916\'");
                    int temp339 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS909ExpectDisconnectChecker1)));
                    if ((temp339 == 0)) {
                        CreditMgmtTestCaseS705();
                        goto label291;
                    }
                    if ((temp339 == 1)) {
                        this.Manager.Comment("reaching state \'S918\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS909ExpectDisconnectChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S919\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS909ExpectDisconnectChecker)));
                        }
                        goto label291;
                    }
                    if ((temp339 == 2)) {
                        this.Manager.Comment("reaching state \'S917\'");
                        goto label291;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS909ExpectDisconnectChecker1)));
                label291:
;
                    goto label293;
                }
                if ((temp341 == 1)) {
                    this.Manager.Comment("reaching state \'S920\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S921\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S922\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetNonZero,PayloadSizeLessThanBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S923\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S924\'");
                    int temp340 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker6)));
                    if ((temp340 == 0)) {
                        CreditMgmtTestCaseS27();
                        goto label292;
                    }
                    if ((temp340 == 1)) {
                        CreditMgmtTestCaseS744();
                        goto label292;
                    }
                    if ((temp340 == 2)) {
                        CreditMgmtTestCaseS745();
                        goto label292;
                    }
                    if ((temp340 == 3)) {
                        CreditMgmtTestCaseS746();
                        goto label292;
                    }
                    if ((temp340 == 4)) {
                        CreditMgmtTestCaseS747();
                        goto label292;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker6)));
                label292:
;
                    goto label293;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S911\'.");
            label293:
;
                goto label295;
            }
            if ((temp343 == 3)) {
                this.Manager.Comment("reaching state \'S925\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S926\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S927\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                        "dary,CreditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Una" +
                        "vailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                this.Manager.Comment("reaching state \'S928\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S929\'");
                int temp342 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS909ExpectDisconnectChecker2)));
                if ((temp342 == 0)) {
                    CreditMgmtTestCaseS930();
                    goto label294;
                }
                if ((temp342 == 1)) {
                    this.Manager.Comment("reaching state \'S932\'");
                    goto label294;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS909CreditOperationResponseChecker7)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS909ExpectDisconnectChecker2)));
            label294:
;
                goto label295;
            }
            throw new InvalidOperationException("never reached");
        label295:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS909ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S910");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS909ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S910");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS909ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S910");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker176() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S916");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S916");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S916");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S916");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S916");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S916");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS909ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker177() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S924");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S924");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S924");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S924");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS909ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S910");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS909CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S929");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S929");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S929");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS909ExpectDisconnectChecker2() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        #endregion
        
        #region Test Starting in S933
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS933() {
            this.Manager.BeginTest("CreditMgmtTestCaseS933");
            this.Manager.Comment("reaching state \'S933\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp344;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp344);
            this.Manager.AddReturn(ReadConfigInfo, null, temp344);
            this.Manager.Comment("reaching state \'S934\'");
            int temp349 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS933ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS933ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS933ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS933ReadConfigChecker3)));
            if ((temp349 == 0)) {
                CreditMgmtTestCaseS106();
                goto label300;
            }
            if ((temp349 == 1)) {
                CreditMgmtTestCaseS382();
                goto label300;
            }
            if ((temp349 == 2)) {
                this.Manager.Comment("reaching state \'S935\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S936\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S937\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                        "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S939\'");
                int temp345 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker1)));
                if ((temp345 == 0)) {
                    CreditMgmtTestCaseS62();
                    goto label296;
                }
                if ((temp345 == 1)) {
                    CreditMgmtTestCaseS940();
                    goto label296;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker1)));
            label296:
;
                goto label300;
            }
            if ((temp349 == 3)) {
                this.Manager.Comment("reaching state \'S941\'");
                int temp348 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker178)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker179)));
                if ((temp348 == 0)) {
                    this.Manager.Comment("reaching state \'S942\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S943\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S944\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                            "editRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Used" +
                            "Mid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S945\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S946\'");
                    int temp346 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS933ExpectDisconnectChecker1)));
                    if ((temp346 == 0)) {
                        CreditMgmtTestCaseS947();
                        goto label297;
                    }
                    if ((temp346 == 1)) {
                        CreditMgmtTestCaseS679();
                        goto label297;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS933ExpectDisconnectChecker1)));
                label297:
;
                    goto label299;
                }
                if ((temp348 == 1)) {
                    this.Manager.Comment("reaching state \'S949\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S950\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S951\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetNonZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S952\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S953\'");
                    int temp347 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker7)));
                    if ((temp347 == 0)) {
                        this.Manager.Comment("reaching state \'S954\'");
                        goto label298;
                    }
                    if ((temp347 == 1)) {
                        this.Manager.Comment("reaching state \'S955\'");
                        goto label298;
                    }
                    if ((temp347 == 2)) {
                        this.Manager.Comment("reaching state \'S956\'");
                        goto label298;
                    }
                    if ((temp347 == 3)) {
                        this.Manager.Comment("reaching state \'S957\'");
                        goto label298;
                    }
                    if ((temp347 == 4)) {
                        this.Manager.Comment("reaching state \'S958\'");
                        goto label298;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker3)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker5)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker6)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS933CreditOperationResponseChecker7)));
                label298:
;
                    goto label299;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S941\'.");
            label299:
;
                goto label300;
            }
            throw new InvalidOperationException("never reached");
        label300:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS933ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S934");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS933ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S934");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS933ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S934");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S939");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S939");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S939");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S939");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S939");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S939");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS940() {
            this.Manager.Comment("reaching state \'S940\'");
        }
        
        private void CreditMgmtTestCaseS933ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S934");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker178() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S946");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S946");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS947() {
            this.Manager.Comment("reaching state \'S947\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, false, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS933ExpectDisconnectChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S948\'");
            }
            else {
                this.Manager.CheckObservationTimeout(true, new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS933ExpectDisconnectChecker)));
            }
        }
        
        private void CreditMgmtTestCaseS933ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS933ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker179() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S953");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v2.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S953");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2012\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v2.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2012\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S953");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008R2\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v2.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008R2\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S953");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S953");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the" +
                        " client a non-zero value of credits in response to any non-zero value requested\"" +
                        ", \"[TestInfo] Platform is WindowsServer2008\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.creditResponse.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(creditResponse == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v2.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.1.2: The server SHOULD<151> grant the client a non-zero value of c" +
                    "redits in response to any non-zero value requested\"");
            this.Manager.Checkpoint("\"[TestInfo] Platform is WindowsServer2008\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS933CreditOperationResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S953");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S953");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S953");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S959
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS959() {
            this.Manager.BeginTest("CreditMgmtTestCaseS959");
            this.Manager.Comment("reaching state \'S959\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp350;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp350);
            this.Manager.AddReturn(ReadConfigInfo, null, temp350);
            this.Manager.Comment("reaching state \'S960\'");
            int temp355 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS959ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS959ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS959ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS959ReadConfigChecker3)));
            if ((temp355 == 0)) {
                CreditMgmtTestCaseS106();
                goto label305;
            }
            if ((temp355 == 1)) {
                CreditMgmtTestCaseS382();
                goto label305;
            }
            if ((temp355 == 2)) {
                this.Manager.Comment("reaching state \'S961\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(UsedMid,CreditChargeWithinBoundary,Cr" +
                        "editRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to False, messageId type is Use" +
                        "dMid, creditCharge type is CreditChargeWithinBoundary\"");
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S965\'");
                int temp351 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS959ExpectDisconnectChecker)));
                if ((temp351 == 0)) {
                    CreditMgmtTestCaseS930();
                    goto label301;
                }
                if ((temp351 == 1)) {
                    CreditMgmtTestCaseS104();
                    goto label301;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS959ExpectDisconnectChecker)));
            label301:
;
                goto label305;
            }
            if ((temp355 == 3)) {
                this.Manager.Comment("reaching state \'S966\'");
                int temp354 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker180)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker181)));
                if ((temp354 == 0)) {
                    this.Manager.Comment("reaching state \'S967\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S968\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S969\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(UnavailableMid,CreditChargeWithinBoun" +
                            "dary,CreditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType.UnavailableMid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Unav" +
                            "ailableMid, creditCharge type is CreditChargeWithinBoundary\"");
                    this.Manager.Comment("reaching state \'S970\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S971\'");
                    int temp352 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS959ExpectDisconnectChecker1)));
                    if ((temp352 == 0)) {
                        CreditMgmtTestCaseS947();
                        goto label302;
                    }
                    if ((temp352 == 1)) {
                        this.Manager.Comment("reaching state \'S972\'");
                        goto label302;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS959ExpectDisconnectChecker1)));
                label302:
;
                    goto label304;
                }
                if ((temp354 == 1)) {
                    this.Manager.Comment("reaching state \'S973\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S974\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S975\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                            "reditRequestSetZero,PayloadSizeEqualToBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S976\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S977\'");
                    int temp353 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker3)));
                    if ((temp353 == 0)) {
                        CreditMgmtTestCaseS178();
                        goto label303;
                    }
                    if ((temp353 == 1)) {
                        CreditMgmtTestCaseS209();
                        goto label303;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS959CreditOperationResponseChecker3)));
                label303:
;
                    goto label304;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S966\'.");
            label304:
;
                goto label305;
            }
            throw new InvalidOperationException("never reached");
        label305:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS959ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S960");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS959ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S960");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS959ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S960");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS959CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S965");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S965");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S965");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS959ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void CreditMgmtTestCaseS959ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S960");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker180() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS959CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S971");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S971");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S971");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS959ExpectDisconnectChecker1() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker181() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS959CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S977");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S977");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S977");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS959CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S977");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S977");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S977");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S978
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS978() {
            this.Manager.BeginTest("CreditMgmtTestCaseS978");
            this.Manager.Comment("reaching state \'S978\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp356;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp356);
            this.Manager.AddReturn(ReadConfigInfo, null, temp356);
            this.Manager.Comment("reaching state \'S979\'");
            int temp361 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS978ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS978ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS978ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS978ReadConfigChecker3)));
            if ((temp361 == 0)) {
                CreditMgmtTestCaseS106();
                goto label310;
            }
            if ((temp361 == 1)) {
                CreditMgmtTestCaseS382();
                goto label310;
            }
            if ((temp361 == 2)) {
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S982\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                        "questSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                this.Manager.Comment("reaching state \'S983\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S984\'");
                int temp357 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker1)));
                if ((temp357 == 0)) {
                    CreditMgmtTestCaseS62();
                    goto label306;
                }
                if ((temp357 == 1)) {
                    CreditMgmtTestCaseS940();
                    goto label306;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker1)));
            label306:
;
                goto label310;
            }
            if ((temp361 == 3)) {
                this.Manager.Comment("reaching state \'S985\'");
                int temp360 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker182)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker183)));
                if ((temp360 == 0)) {
                    this.Manager.Comment("reaching state \'S986\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S987\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S988\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeLargerThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize.PayloadSizeLargerThanBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Comment("reaching state \'S989\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S990\'");
                    int temp358 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker3)));
                    if ((temp358 == 0)) {
                        CreditMgmtTestCaseS36();
                        goto label307;
                    }
                    if ((temp358 == 1)) {
                        CreditMgmtTestCaseS991();
                        goto label307;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker2)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker3)));
                label307:
;
                    goto label309;
                }
                if ((temp360 == 1)) {
                    this.Manager.Comment("reaching state \'S992\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                    this.Manager.Comment("reaching state \'S993\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S994\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeSetZero,CreditRe" +
                            "questSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                    this.Manager.Comment("reaching state \'S995\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S996\'");
                    int temp359 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker5)));
                    if ((temp359 == 0)) {
                        CreditMgmtTestCaseS372();
                        goto label308;
                    }
                    if ((temp359 == 1)) {
                        CreditMgmtTestCaseS373();
                        goto label308;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker4)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS978CreditOperationResponseChecker5)));
                label308:
;
                    goto label309;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S985\'.");
            label309:
;
                goto label310;
            }
            throw new InvalidOperationException("never reached");
        label310:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS978ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S979");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS978ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S979");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS978ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S979");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS978CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S984");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S984");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S984");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS978CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S984");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S984");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S984");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS978ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S979");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker182() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS978CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S990");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S990");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S990");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS978CreditOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_INVALID_PARAMETER,creditRespo" +
                    "nse,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreditOperationResponse, state S990");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S990");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S990");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST verify the CreditCharge field in the SMB2 header and the payload size (the size of the data within the variable-length field) of the request or the maximum response size"", ""[TestInfo] Connection.SupportsMultiCredit is TRUE"", ""[MS-SMB2] If CreditCharge is zero and the payload size of the request or the maximum response size is greater than 64 kilobytes, the server MUST fail the request with the error code STATUS_INVALID_PARAMETER."", ""[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size type is PayloadSizeLargerThanBoundary"", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.5: If Connection.SupportsMultiCredit is TRUE, the server MUST " +
                    "verify the CreditCharge field in the SMB2 header and the payload size (the size " +
                    "of the data within the variable-length field) of the request or the maximum resp" +
                    "onse size\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If CreditCharge is zero and the payload size of the request or the max" +
                    "imum response size is greater than 64 kilobytes, the server MUST fail the reques" +
                    "t with the error code STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] Credit charge type in request is CreditChargeSetZero, payload size ty" +
                    "pe is PayloadSizeLargerThanBoundary\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker183() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS978CreditOperationResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S996");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S996");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S996");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS978CreditOperationResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S996");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S996");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S996");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S997
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Credit)]
        public void CreditMgmtTestCaseS997() {
            this.Manager.BeginTest("CreditMgmtTestCaseS997");
            this.Manager.Comment("reaching state \'S997\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig temp362;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreditMgmtAdapterInstance.ReadConfig(out temp362);
            this.Manager.AddReturn(ReadConfigInfo, null, temp362);
            this.Manager.Comment("reaching state \'S998\'");
            int temp366 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS997ReadConfigChecker)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS997ReadConfigChecker1)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS997ReadConfigChecker2)), new ExpectedReturn(CreditMgmtTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreditMgmtTestCaseS997ReadConfigChecker3)));
            if ((temp366 == 0)) {
                this.Manager.Comment("reaching state \'S1004\'");
                int temp364 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker184)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker185)));
                if ((temp364 == 0)) {
                    this.Manager.Comment("reaching state \'S1005\'");
                    this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                    this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the common dialect is SMB 2.1 or 3.x dialect family and th" +
                            "e underlying connection is either TCP port 445 or RDMA,Connection.SupportsMultiC" +
                            "redit MUST be set to TRUE; otherwise, it MUST be set to FALSE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21 and server implementation supports multicredi" +
                            "t\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to TRUE\"");
                    this.Manager.Comment("reaching state \'S1006\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S1007\'");
                    this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeExceedBoundary,C" +
                            "reditRequestSetZero,PayloadSizeLessThanBoundary,RequestPayload)\'");
                    this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge.CreditChargeExceedBoundary, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(0)));
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
                    this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
                    this.Manager.Checkpoint("\"[TestInfo] Test case is expecting server disconnect the connection\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to True, messageId type is Vali" +
                            "dMid, creditCharge type is CreditChargeExceedBoundary\"");
                    this.Manager.Comment("reaching state \'S1008\'");
                    this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                    this.Manager.Comment("reaching state \'S1009\'");
                    int temp363 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS997CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS997ExpectDisconnectChecker)));
                    if ((temp363 == 0)) {
                        CreditMgmtTestCaseS947();
                        goto label311;
                    }
                    if ((temp363 == 1)) {
                        this.Manager.Comment("reaching state \'S1010\'");
                        goto label311;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS997CreditOperationResponseChecker)), new ExpectedEvent(CreditMgmtTestCase.ExpectDisconnectInfo, null, new ExpectDisconnectDelegate1(this.CreditMgmtTestCaseS997ExpectDisconnectChecker)));
                label311:
;
                    goto label312;
                }
                if ((temp364 == 1)) {
                    CreditMgmtTestCaseS668();
                    goto label312;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1004\'.");
            label312:
;
                goto label314;
            }
            if ((temp366 == 1)) {
                CreditMgmtTestCaseS106();
                goto label314;
            }
            if ((temp366 == 2)) {
                CreditMgmtTestCaseS382();
                goto label314;
            }
            if ((temp366 == 3)) {
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreditMgmtAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[TestInfo] Connection.SupportsMultiCredit is set to FALSE\"");
                this.Manager.Comment("reaching state \'S1000\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1001\'");
                this.Manager.Comment("executing step \'call CreditOperationRequest(ValidMid,CreditChargeWithinBoundary,C" +
                        "reditRequestSetZero,PayloadSizeEqualToBoundary,ResponsePayload)\'");
                this.ICreditMgmtAdapterInstance.CreditOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelMidType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditCharge)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelCreditRequestNum)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadSize)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.ModelPayloadType)(1)));
                this.Manager.Comment("reaching state \'S1002\'");
                this.Manager.Comment("checking step \'return CreditOperationRequest\'");
                this.Manager.Comment("reaching state \'S1003\'");
                int temp365 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS997CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS997CreditOperationResponseChecker2)));
                if ((temp365 == 0)) {
                    CreditMgmtTestCaseS62();
                    goto label313;
                }
                if ((temp365 == 1)) {
                    CreditMgmtTestCaseS940();
                    goto label313;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS997CreditOperationResponseChecker1)), new ExpectedEvent(CreditMgmtTestCase.CreditOperationResponseInfo, null, new CreditOperationResponseDelegate1(this.CreditMgmtTestCaseS997CreditOperationResponseChecker2)));
            label313:
;
                goto label314;
            }
            throw new InvalidOperationException("never reached");
        label314:
;
            this.Manager.EndTest();
        }
        
        private void CreditMgmtTestCaseS997ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S998");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker184() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsMultiCreditSupportedOnServer == 0)");
        }
        
        private void CreditMgmtTestCaseS997CreditOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(status,creditResponse,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreditOperationResponse, state S1009");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1009");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1009");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.status, "v3 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.2.3: If the server determines that the MessageId or the range of MessageIds for the incoming request is not valid, the server SHOULD<202> terminate the connection. Otherwise, the server MUST remove the MessageId or the range of MessageIds from the Connection.CommandSequenceWindow.""");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreditMgmtTestCaseS997ExpectDisconnectChecker() {
            this.Manager.Comment("checking step \'event ExpectDisconnect()\'");
        }
        
        private void PreConstraintChecker185() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiCreditSupportedOnServer))), ((object)(0))), "Fail to check preconstraint : c.IsMultiCreditSupportedOnServer == 0");
        }
        
        private void CreditMgmtTestCaseS997ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S998");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void CreditMgmtTestCaseS997ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S998");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void CreditMgmtTestCaseS997ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S998");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void CreditMgmtTestCaseS997CreditOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1003");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1003");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1003");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v2.Platform == 0");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreditMgmtTestCaseS997CreditOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint creditResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig c) {
            this.Manager.Comment("checking step \'event CreditOperationResponse(STATUS_SUCCESS,creditResponse,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreditOperationResponse, state S1003");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.creditResponse, (System.Int32)creditResponse, "creditResponse of CreditOperationResponse, state S1003");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.c1, c, "c of CreditOperationResponse, state S1003");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.creditResponse, "v1 == creditResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreditMgmt.CreditMgmtConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'creditResponse\'");
            this.creditResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
    }
}
