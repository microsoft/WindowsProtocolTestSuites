stages:
  - stage: Build_Test_Suite
    pool:
      vmImage: windows-2022
    jobs:
      - job:
        displayName: Build Test Suite
        workspace:
          clean: true
        timeoutInMinutes: 0
        steps:
          - checkout: self

          - task: PowerShell@2
            displayName: 'Check License Header'
            inputs:
              filePath: 'CommonScripts/CheckLicenseHeader.ps1'
              arguments: '-TestSuitePath $(Build.Repository.LocalPath) -IsCheckAll $false -targetBranch "$(system.pullRequest.targetBranch)" -sourceBranch "$(system.pullRequest.sourceBranch)" -prNum "$(system.pullRequest.pullRequestNumber)"'
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - task: PowerShell@2
            displayName: Run Build Script
            inputs:
              targetType: filePath
              filePath: "$(build.solutionFolder)/build.ps1"
              arguments: "-Configuration $(build.configuration) -OutDir $(Build.ArtifactStagingDirectory)/staging"

          - task: ArchiveFiles@2
            displayName: "Archive $(Build.ArtifactStagingDirectory)/staging"
            inputs:
              rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/staging"
              includeRootFolder: false
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(build.archiveName).zip"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(build.archiveName).zip"
            condition: succeededOrFailed()

          - task: PublishBuildArtifacts@1
            displayName: "Publish Command Scripts"
            inputs:
              PathtoPublish: CommonScripts
              ArtifactName: CommonScripts
            condition: succeededOrFailed()

      - job:
        displayName: Build RDP SUT Control Agents
        workspace:
          clean: true
        timeoutInMinutes: 0
        condition: and(succeeded(), eq(variables['test.testSuiteName'], 'RDPClient'))
        steps:
          - checkout: self

          - task: DotNetCoreCLI@2
            displayName: "Restore CSharp RDPSUTControlAgent"
            inputs:
              command: restore
              projects: "TestSuites/RDP/RDPSUTControlAgent/CSharp/**/*.csproj"

          - task: PowerShell@2
            displayName: "Build CSharp RDPSUTControlAgent"
            inputs:
              targetType: filePath
              filePath: "TestSuites/RDP/RDPSUTControlAgent/CSharp/build.ps1"
              arguments: "-Configuration $(build.configuration)"

          - task: CopyFiles@2
            displayName: "Copy Files to: $(Build.ArtifactStagingDirectory)/CSharp"
            inputs:
              SourceFolder: "TestSuites/RDP/RDPSUTControlAgent/CSharp/RDPSUTControlAgent/bin/$(build.configuration)/$(build.targetFramework)/publish"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/CSharp"

          - task: BatchScript@1
            displayName: "Build Java RDPSUTControlAgent"
            inputs:
              filename: TestSuites/RDP/RDPSUTControlAgent/Java/gradlew.bat
              arguments: build
              workingFolder: TestSuites/RDP/RDPSUTControlAgent/Java

          - task: CopyFiles@2
            displayName: "Copy Java Agent to: $(Build.ArtifactStagingDirectory)/Java"
            inputs:
              SourceFolder: TestSuites/RDP/RDPSUTControlAgent/Java/Build
              TargetFolder: "$(Build.ArtifactStagingDirectory)/Java"

          - task: CopyFiles@2
            displayName: "Copy Java Agent Config to: $(Build.ArtifactStagingDirectory)/Java"
            inputs:
              SourceFolder: TestSuites/RDP/RDPSUTControlAgent/Java
              Contents: freerdp.config
              TargetFolder: "$(Build.ArtifactStagingDirectory)/Java"

          - task: CopyFiles@2
            displayName: "Copy Python Agent to: $(Build.ArtifactStagingDirectory)/Python"
            inputs:
              SourceFolder: TestSuites/RDP/RDPSUTControlAgent/Python
              TargetFolder: "$(Build.ArtifactStagingDirectory)/Python"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: RDPSUTControlAgent"
            inputs:
              ArtifactName: RDPSUTControlAgent
            condition: succeededOrFailed()

  - stage: Run_Regression
    dependsOn: Build_Test_Suite
    condition: and(succeeded(), eq(variables['test.runRegression'], true))
    pool:
      name: Azure Agents
    jobs:
      - job:
        displayName: Run Regression
        workspace:
          clean: all
        timeoutInMinutes: 0
        steps:
          - checkout: none

          - script: "git clone -b $(extRepo.branchName) $(extRepo.url) $(extRepo.dir)"
            displayName: "Fetch Helper"

          - task: PowerShell@2
            displayName: "Queue Regression"
            inputs:
              targetType: filePath
              filePath: "$(extRepo.dir)/RegressionRunScripts/Common/Queue-SinglePipelineWithParameters.ps1"
              arguments: '-AccessToken "$(System.AccessToken)" -ApiUrl "$(build.apiUrl)" -RemoteAccessToken "$(tokens.pipelineTriggerToken)" -RemoteApiUrl "$(extRepo.apiUrl)" -PipelineName "$(test.regressionPipelineName)" -TargetRepoBranch "$(extRepo.branchName)" -PipelineParameters "`"targetRepo.csvFile`": `"$(test.targetRepoCsvFile)`", `"test.filter`": `"$(test.filter)`", `"test.buildId`": `"$(Build.BuildId)`", `"test.remoteApiUrl`": `"$(build.apiUrl)`", `"test.remoteAccessToken`": `"$(System.AccessToken)`"" -BuildIdVariableName "test.regressionBuildId" -Reason "manual" -ReportInfo $false'
              workingDirectory: "$(extRepo.dir)/RegressionRunScripts/Common"

          - task: PowerShell@2
            displayName: "Wait Regression Completion"
            inputs:
              targetType: filePath
              filePath: "$(extRepo.dir)/RegressionRunScripts/Common/Wait-SinglePipelineCompletionByBuildId.ps1"
              arguments: '-AccessToken "$(tokens.pipelineTriggerToken)" -ApiUrl "$(extRepo.apiUrl)" -BuildId "$(test.regressionBuildId)" -TimeoutInMinutes 0'
              workingDirectory: "$(extRepo.dir)/RegressionRunScripts/Common"

          - task: PowerShell@2
            displayName: "Get Regression Results"
            inputs:
              targetType: filePath
              filePath: "$(extRepo.dir)/RegressionRunScripts/Common/Get-DotNetCoreArtifactByBuildId.ps1"
              arguments: '-AccessToken "$(tokens.pipelineTriggerToken)" -ApiUrl "$(extRepo.apiUrl)" -BuildId "$(test.regressionBuildId)" -ArtifactName "results" -GetAllFiles $true -ArtifactLocalPath "$(Build.ArtifactStagingDirectory)/TestResults" -ReportInfo $false'
              workingDirectory: "$(extRepo.dir)/RegressionRunScripts/Common"
            condition: succeededOrFailed()

          - task: PublishTestResults@2
            displayName: "Publish Regression Results"
            inputs:
              testResultsFormat: VSTest
              searchFolder: "$(Build.ArtifactStagingDirectory)/TestResults"
              testResultsFiles: "*/*.trx"
              failTaskOnFailedTests: true
            condition: always()
